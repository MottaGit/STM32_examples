
LM235_MEASURE_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab3c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800ad20  0800ad20  0001ad20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b010  0800b010  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b010  0800b010  0001b010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b018  0800b018  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b018  0800b018  0001b018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b01c  0800b01c  0001b01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b020  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200001dc  0800b1fc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800b1fc  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fc2  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002581  00000000  00000000  000351ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f0  00000000  00000000  00037750  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  00038b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000207f2  00000000  00000000  00039e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e8ee  00000000  00000000  0005a5fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000daa70  00000000  00000000  00068ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143958  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006368  00000000  00000000  001439d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ad04 	.word	0x0800ad04

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	0800ad04 	.word	0x0800ad04

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b972 	b.w	8000fd4 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	4688      	mov	r8, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14b      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4615      	mov	r5, r2
 8000d1a:	d967      	bls.n	8000dec <__udivmoddi4+0xe4>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b14a      	cbz	r2, 8000d36 <__udivmoddi4+0x2e>
 8000d22:	f1c2 0720 	rsb	r7, r2, #32
 8000d26:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d2e:	4095      	lsls	r5, r2
 8000d30:	ea47 0803 	orr.w	r8, r7, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d40:	fa1f fc85 	uxth.w	ip, r5
 8000d44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d50:	4299      	cmp	r1, r3
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x60>
 8000d54:	18eb      	adds	r3, r5, r3
 8000d56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5a:	f080 811b 	bcs.w	8000f94 <__udivmoddi4+0x28c>
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	f240 8118 	bls.w	8000f94 <__udivmoddi4+0x28c>
 8000d64:	3f02      	subs	r7, #2
 8000d66:	442b      	add	r3, r5
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x8c>
 8000d80:	192c      	adds	r4, r5, r4
 8000d82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d86:	f080 8107 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	f240 8104 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d90:	3802      	subs	r0, #2
 8000d92:	442c      	add	r4, r5
 8000d94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d98:	eba4 040c 	sub.w	r4, r4, ip
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	b11e      	cbz	r6, 8000da8 <__udivmoddi4+0xa0>
 8000da0:	40d4      	lsrs	r4, r2
 8000da2:	2300      	movs	r3, #0
 8000da4:	e9c6 4300 	strd	r4, r3, [r6]
 8000da8:	4639      	mov	r1, r7
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0xbe>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80eb 	beq.w	8000f8e <__udivmoddi4+0x286>
 8000db8:	2700      	movs	r7, #0
 8000dba:	e9c6 0100 	strd	r0, r1, [r6]
 8000dbe:	4638      	mov	r0, r7
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	fab3 f783 	clz	r7, r3
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d147      	bne.n	8000e5e <__udivmoddi4+0x156>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d302      	bcc.n	8000dd8 <__udivmoddi4+0xd0>
 8000dd2:	4282      	cmp	r2, r0
 8000dd4:	f200 80fa 	bhi.w	8000fcc <__udivmoddi4+0x2c4>
 8000dd8:	1a84      	subs	r4, r0, r2
 8000dda:	eb61 0303 	sbc.w	r3, r1, r3
 8000dde:	2001      	movs	r0, #1
 8000de0:	4698      	mov	r8, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d0e0      	beq.n	8000da8 <__udivmoddi4+0xa0>
 8000de6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dea:	e7dd      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000dec:	b902      	cbnz	r2, 8000df0 <__udivmoddi4+0xe8>
 8000dee:	deff      	udf	#255	; 0xff
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	2a00      	cmp	r2, #0
 8000df6:	f040 808f 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000dfa:	1b49      	subs	r1, r1, r5
 8000dfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e00:	fa1f f885 	uxth.w	r8, r5
 8000e04:	2701      	movs	r7, #1
 8000e06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e14:	fb08 f10c 	mul.w	r1, r8, ip
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1c:	18eb      	adds	r3, r5, r3
 8000e1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4299      	cmp	r1, r3
 8000e26:	f200 80cd 	bhi.w	8000fc4 <__udivmoddi4+0x2bc>
 8000e2a:	4684      	mov	ip, r0
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	b2a3      	uxth	r3, r4
 8000e30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e3c:	fb08 f800 	mul.w	r8, r8, r0
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0x14c>
 8000e44:	192c      	adds	r4, r5, r4
 8000e46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0x14a>
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	f200 80b6 	bhi.w	8000fbe <__udivmoddi4+0x2b6>
 8000e52:	4618      	mov	r0, r3
 8000e54:	eba4 0408 	sub.w	r4, r4, r8
 8000e58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e5c:	e79f      	b.n	8000d9e <__udivmoddi4+0x96>
 8000e5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e62:	40bb      	lsls	r3, r7
 8000e64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e7c:	4325      	orrs	r5, r4
 8000e7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e82:	0c2c      	lsrs	r4, r5, #16
 8000e84:	fb08 3319 	mls	r3, r8, r9, r3
 8000e88:	fa1f fa8e 	uxth.w	sl, lr
 8000e8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e90:	fb09 f40a 	mul.w	r4, r9, sl
 8000e94:	429c      	cmp	r4, r3
 8000e96:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	f080 8087 	bcs.w	8000fba <__udivmoddi4+0x2b2>
 8000eac:	429c      	cmp	r4, r3
 8000eae:	f240 8084 	bls.w	8000fba <__udivmoddi4+0x2b2>
 8000eb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb6:	4473      	add	r3, lr
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	b2ad      	uxth	r5, r5
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ec8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ecc:	45a2      	cmp	sl, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ed8:	d26b      	bcs.n	8000fb2 <__udivmoddi4+0x2aa>
 8000eda:	45a2      	cmp	sl, r4
 8000edc:	d969      	bls.n	8000fb2 <__udivmoddi4+0x2aa>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	4474      	add	r4, lr
 8000ee2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	eba4 040a 	sub.w	r4, r4, sl
 8000eee:	454c      	cmp	r4, r9
 8000ef0:	46c2      	mov	sl, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	d354      	bcc.n	8000fa0 <__udivmoddi4+0x298>
 8000ef6:	d051      	beq.n	8000f9c <__udivmoddi4+0x294>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d069      	beq.n	8000fd0 <__udivmoddi4+0x2c8>
 8000efc:	ebb1 050a 	subs.w	r5, r1, sl
 8000f00:	eb64 0403 	sbc.w	r4, r4, r3
 8000f04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f08:	40fd      	lsrs	r5, r7
 8000f0a:	40fc      	lsrs	r4, r7
 8000f0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f10:	e9c6 5400 	strd	r5, r4, [r6]
 8000f14:	2700      	movs	r7, #0
 8000f16:	e747      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f20:	4095      	lsls	r5, r2
 8000f22:	fa01 f002 	lsl.w	r0, r1, r2
 8000f26:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f2e:	4338      	orrs	r0, r7
 8000f30:	0c01      	lsrs	r1, r0, #16
 8000f32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f36:	fa1f f885 	uxth.w	r8, r5
 8000f3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f42:	fb07 f308 	mul.w	r3, r7, r8
 8000f46:	428b      	cmp	r3, r1
 8000f48:	fa04 f402 	lsl.w	r4, r4, r2
 8000f4c:	d907      	bls.n	8000f5e <__udivmoddi4+0x256>
 8000f4e:	1869      	adds	r1, r5, r1
 8000f50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f54:	d22f      	bcs.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d92d      	bls.n	8000fb6 <__udivmoddi4+0x2ae>
 8000f5a:	3f02      	subs	r7, #2
 8000f5c:	4429      	add	r1, r5
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	b281      	uxth	r1, r0
 8000f62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f6e:	fb00 f308 	mul.w	r3, r0, r8
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d907      	bls.n	8000f86 <__udivmoddi4+0x27e>
 8000f76:	1869      	adds	r1, r5, r1
 8000f78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f7c:	d217      	bcs.n	8000fae <__udivmoddi4+0x2a6>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d915      	bls.n	8000fae <__udivmoddi4+0x2a6>
 8000f82:	3802      	subs	r0, #2
 8000f84:	4429      	add	r1, r5
 8000f86:	1ac9      	subs	r1, r1, r3
 8000f88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f8c:	e73b      	b.n	8000e06 <__udivmoddi4+0xfe>
 8000f8e:	4637      	mov	r7, r6
 8000f90:	4630      	mov	r0, r6
 8000f92:	e709      	b.n	8000da8 <__udivmoddi4+0xa0>
 8000f94:	4607      	mov	r7, r0
 8000f96:	e6e7      	b.n	8000d68 <__udivmoddi4+0x60>
 8000f98:	4618      	mov	r0, r3
 8000f9a:	e6fb      	b.n	8000d94 <__udivmoddi4+0x8c>
 8000f9c:	4541      	cmp	r1, r8
 8000f9e:	d2ab      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fa8:	3801      	subs	r0, #1
 8000faa:	4613      	mov	r3, r2
 8000fac:	e7a4      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fae:	4660      	mov	r0, ip
 8000fb0:	e7e9      	b.n	8000f86 <__udivmoddi4+0x27e>
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	e795      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb6:	4667      	mov	r7, ip
 8000fb8:	e7d1      	b.n	8000f5e <__udivmoddi4+0x256>
 8000fba:	4681      	mov	r9, r0
 8000fbc:	e77c      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	442c      	add	r4, r5
 8000fc2:	e747      	b.n	8000e54 <__udivmoddi4+0x14c>
 8000fc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc8:	442b      	add	r3, r5
 8000fca:	e72f      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fcc:	4638      	mov	r0, r7
 8000fce:	e708      	b.n	8000de2 <__udivmoddi4+0xda>
 8000fd0:	4637      	mov	r7, r6
 8000fd2:	e6e9      	b.n	8000da8 <__udivmoddi4+0xa0>

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <HAL_TIM_PeriodElapsedCallback>:
lm235 temp_sens[2] = {0};

#define ts_cal1 *((uint16_t*) 0x1FFF75A8)	// 1040
#define ts_cal2 *((uint16_t*) 0x1FFF75CA) 	// 1381

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
	//RUNS EVERY 1s
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);		// BLINKS THE STANDARD BOARD LED
 8000fe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe4:	4815      	ldr	r0, [pc, #84]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000fe6:	f002 ff01 	bl	8003dec <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);		// BLINKS BREADBOARD LED
 8000fea:	2110      	movs	r1, #16
 8000fec:	4813      	ldr	r0, [pc, #76]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000fee:	f002 fefd 	bl	8003dec <HAL_GPIO_TogglePin>

    //sprintf(transmit_word, "t1: [%3.1f]ºC - t2:[%3.1f]ºC \n", temp_sens[0].temp_celc, temp_sens[1].temp_celc);
    sprintf(transmit_word, "%3.1f %3.1f\n", temp_sens[0].temp_celc, temp_sens[1].temp_celc);
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff face 	bl	8000598 <__aeabi_f2d>
 8000ffc:	4605      	mov	r5, r0
 8000ffe:	460e      	mov	r6, r1
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fac7 	bl	8000598 <__aeabi_f2d>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	e9cd 3400 	strd	r3, r4, [sp]
 8001012:	462a      	mov	r2, r5
 8001014:	4633      	mov	r3, r6
 8001016:	490b      	ldr	r1, [pc, #44]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001018:	480b      	ldr	r0, [pc, #44]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800101a:	f006 ff7f 	bl	8007f1c <siprintf>
    HAL_UART_Transmit(&huart2, transmit_word, strlen(transmit_word), 1000);
 800101e:	480a      	ldr	r0, [pc, #40]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001020:	f7ff f8fe 	bl	8000220 <strlen>
 8001024:	4603      	mov	r3, r0
 8001026:	b29a      	uxth	r2, r3
 8001028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102c:	4906      	ldr	r1, [pc, #24]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001030:	f004 fc5a 	bl	80058e8 <HAL_UART_Transmit>

}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800103c:	48000400 	.word	0x48000400
 8001040:	20000238 	.word	0x20000238
 8001044:	0800ad20 	.word	0x0800ad20
 8001048:	200001f8 	.word	0x200001f8
 800104c:	20000370 	.word	0x20000370

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001056:	f000 fd48 	bl	8001aea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105a:	f000 f93b 	bl	80012d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105e:	f000 fb29 	bl	80016b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001062:	f000 fafd 	bl	8001660 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001066:	f000 faaf 	bl	80015c8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800106a:	f000 fa43 	bl	80014f4 <MX_TIM1_Init>
  MX_ADC1_Init();
 800106e:	f000 f999 	bl	80013a4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001072:	488f      	ldr	r0, [pc, #572]	; (80012b0 <main+0x260>)
 8001074:	f003 fec8 	bl	8004e08 <HAL_TIM_Base_Start_IT>

  if((ADC1->CR & ADC_CR_ADEN) != 0){		 	  // (1)
 8001078:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d007      	beq.n	8001096 <main+0x46>
	  ADC1->CR &= (uint32_t)(~ADC_CR_ADEN);    	  // (2)
 8001086:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001090:	f023 0301 	bic.w	r3, r3, #1
 8001094:	6093      	str	r3, [r2, #8]
  }
      ADC1->CR |= ADC_CR_ADCAL;    				  // (3)
 8001096:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010a4:	6093      	str	r3, [r2, #8]

      while((ADC1->CR & ADC_CR_ADCAL) != 0)       // (4)
 80010a6:	bf00      	nop
 80010a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	dbfa      	blt.n	80010a8 <main+0x58>
  // measurements[0] -> ADC1_IN1 -> PA0
  // measurements[1] -> ADC1_IN2 -> PA1
  // measurements[2] -> TEMPERATURE SENSOR
  // measurements[3] -> VREFINT

  HAL_ADC_Start_DMA(&hadc1, measurements, 4);			// start adc in DMA mode
 80010b2:	2204      	movs	r2, #4
 80010b4:	497f      	ldr	r1, [pc, #508]	; (80012b4 <main+0x264>)
 80010b6:	4880      	ldr	r0, [pc, #512]	; (80012b8 <main+0x268>)
 80010b8:	f001 f93c 	bl	8002334 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	int i;
	for(i = 0; i < 4; i++){
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	e023      	b.n	800110a <main+0xba>
		voltages[i] = 3.300*(measurements[i]/4095.0);
 80010c2:	4a7c      	ldr	r2, [pc, #496]	; (80012b4 <main+0x264>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fa42 	bl	8000554 <__aeabi_ui2d>
 80010d0:	a36d      	add	r3, pc, #436	; (adr r3, 8001288 <main+0x238>)
 80010d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d6:	f7ff fbe1 	bl	800089c <__aeabi_ddiv>
 80010da:	4603      	mov	r3, r0
 80010dc:	460c      	mov	r4, r1
 80010de:	4618      	mov	r0, r3
 80010e0:	4621      	mov	r1, r4
 80010e2:	a36b      	add	r3, pc, #428	; (adr r3, 8001290 <main+0x240>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff faae 	bl	8000648 <__aeabi_dmul>
 80010ec:	4603      	mov	r3, r0
 80010ee:	460c      	mov	r4, r1
 80010f0:	4618      	mov	r0, r3
 80010f2:	4621      	mov	r1, r4
 80010f4:	f7ff fda0 	bl	8000c38 <__aeabi_d2f>
 80010f8:	4601      	mov	r1, r0
 80010fa:	4a70      	ldr	r2, [pc, #448]	; (80012bc <main+0x26c>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	6019      	str	r1, [r3, #0]
	for(i = 0; i < 4; i++){
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3301      	adds	r3, #1
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b03      	cmp	r3, #3
 800110e:	ddd8      	ble.n	80010c2 <main+0x72>
	}
	for(i = 0; i < 2; i++){
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	e06d      	b.n	80011f2 <main+0x1a2>
		temp_sens[i].ADC_raw = measurements[i];
 8001116:	4a67      	ldr	r2, [pc, #412]	; (80012b4 <main+0x264>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800111e:	4968      	ldr	r1, [pc, #416]	; (80012c0 <main+0x270>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	440b      	add	r3, r1
 8001126:	601a      	str	r2, [r3, #0]
		temp_sens[i].voltages = 3.300*(temp_sens[i].ADC_raw/4095.0);
 8001128:	4a65      	ldr	r2, [pc, #404]	; (80012c0 <main+0x270>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	4413      	add	r3, r2
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fa0e 	bl	8000554 <__aeabi_ui2d>
 8001138:	a353      	add	r3, pc, #332	; (adr r3, 8001288 <main+0x238>)
 800113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113e:	f7ff fbad 	bl	800089c <__aeabi_ddiv>
 8001142:	4603      	mov	r3, r0
 8001144:	460c      	mov	r4, r1
 8001146:	4618      	mov	r0, r3
 8001148:	4621      	mov	r1, r4
 800114a:	a351      	add	r3, pc, #324	; (adr r3, 8001290 <main+0x240>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff fa7a 	bl	8000648 <__aeabi_dmul>
 8001154:	4603      	mov	r3, r0
 8001156:	460c      	mov	r4, r1
 8001158:	4618      	mov	r0, r3
 800115a:	4621      	mov	r1, r4
 800115c:	f7ff fd6c 	bl	8000c38 <__aeabi_d2f>
 8001160:	4601      	mov	r1, r0
 8001162:	4a57      	ldr	r2, [pc, #348]	; (80012c0 <main+0x270>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4413      	add	r3, r2
 800116a:	3304      	adds	r3, #4
 800116c:	6019      	str	r1, [r3, #0]
		temp_sens[i].temp_celc = (temp_sens[i].voltages/0.02)-45.9;
 800116e:	4a54      	ldr	r2, [pc, #336]	; (80012c0 <main+0x270>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	4413      	add	r3, r2
 8001176:	3304      	adds	r3, #4
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fa0c 	bl	8000598 <__aeabi_f2d>
 8001180:	a345      	add	r3, pc, #276	; (adr r3, 8001298 <main+0x248>)
 8001182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001186:	f7ff fb89 	bl	800089c <__aeabi_ddiv>
 800118a:	4603      	mov	r3, r0
 800118c:	460c      	mov	r4, r1
 800118e:	4618      	mov	r0, r3
 8001190:	4621      	mov	r1, r4
 8001192:	a343      	add	r3, pc, #268	; (adr r3, 80012a0 <main+0x250>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	f7ff f89e 	bl	80002d8 <__aeabi_dsub>
 800119c:	4603      	mov	r3, r0
 800119e:	460c      	mov	r4, r1
 80011a0:	4618      	mov	r0, r3
 80011a2:	4621      	mov	r1, r4
 80011a4:	f7ff fd48 	bl	8000c38 <__aeabi_d2f>
 80011a8:	4601      	mov	r1, r0
 80011aa:	4a45      	ldr	r2, [pc, #276]	; (80012c0 <main+0x270>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	4413      	add	r3, r2
 80011b2:	330c      	adds	r3, #12
 80011b4:	6019      	str	r1, [r3, #0]
		temp_sens[i].temp_kelv = temp_sens[i].temp_celc + 273.15;
 80011b6:	4a42      	ldr	r2, [pc, #264]	; (80012c0 <main+0x270>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	4413      	add	r3, r2
 80011be:	330c      	adds	r3, #12
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f9e8 	bl	8000598 <__aeabi_f2d>
 80011c8:	a337      	add	r3, pc, #220	; (adr r3, 80012a8 <main+0x258>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff f885 	bl	80002dc <__adddf3>
 80011d2:	4603      	mov	r3, r0
 80011d4:	460c      	mov	r4, r1
 80011d6:	4618      	mov	r0, r3
 80011d8:	4621      	mov	r1, r4
 80011da:	f7ff fd2d 	bl	8000c38 <__aeabi_d2f>
 80011de:	4601      	mov	r1, r0
 80011e0:	4a37      	ldr	r2, [pc, #220]	; (80012c0 <main+0x270>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	4413      	add	r3, r2
 80011e8:	3308      	adds	r3, #8
 80011ea:	6019      	str	r1, [r3, #0]
	for(i = 0; i < 2; i++){
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3301      	adds	r3, #1
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	dd8e      	ble.n	8001116 <main+0xc6>
	}

	float internal_temp = ((110.0 - 30.0)/(float)(ts_cal2 - ts_cal1))*(measurements[2] - (float)ts_cal1) + 30;
 80011f8:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <main+0x274>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <main+0x278>)
 8001200:	881b      	ldrh	r3, [r3, #0]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120c:	ee17 0a90 	vmov	r0, s15
 8001210:	f7ff f9c2 	bl	8000598 <__aeabi_f2d>
 8001214:	4603      	mov	r3, r0
 8001216:	460c      	mov	r4, r1
 8001218:	461a      	mov	r2, r3
 800121a:	4623      	mov	r3, r4
 800121c:	f04f 0000 	mov.w	r0, #0
 8001220:	492a      	ldr	r1, [pc, #168]	; (80012cc <main+0x27c>)
 8001222:	f7ff fb3b 	bl	800089c <__aeabi_ddiv>
 8001226:	4603      	mov	r3, r0
 8001228:	460c      	mov	r4, r1
 800122a:	4625      	mov	r5, r4
 800122c:	461c      	mov	r4, r3
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <main+0x264>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <main+0x278>)
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001246:	ee77 7a67 	vsub.f32	s15, s14, s15
 800124a:	ee17 0a90 	vmov	r0, s15
 800124e:	f7ff f9a3 	bl	8000598 <__aeabi_f2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4620      	mov	r0, r4
 8001258:	4629      	mov	r1, r5
 800125a:	f7ff f9f5 	bl	8000648 <__aeabi_dmul>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	4618      	mov	r0, r3
 8001264:	4621      	mov	r1, r4
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <main+0x280>)
 800126c:	f7ff f836 	bl	80002dc <__adddf3>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	4618      	mov	r0, r3
 8001276:	4621      	mov	r1, r4
 8001278:	f7ff fcde 	bl	8000c38 <__aeabi_d2f>
 800127c:	4603      	mov	r3, r0
 800127e:	603b      	str	r3, [r7, #0]
  {
 8001280:	e71c      	b.n	80010bc <main+0x6c>
 8001282:	bf00      	nop
 8001284:	f3af 8000 	nop.w
 8001288:	00000000 	.word	0x00000000
 800128c:	40affe00 	.word	0x40affe00
 8001290:	66666666 	.word	0x66666666
 8001294:	400a6666 	.word	0x400a6666
 8001298:	47ae147b 	.word	0x47ae147b
 800129c:	3f947ae1 	.word	0x3f947ae1
 80012a0:	33333333 	.word	0x33333333
 80012a4:	4046f333 	.word	0x4046f333
 80012a8:	66666666 	.word	0x66666666
 80012ac:	40711266 	.word	0x40711266
 80012b0:	20000330 	.word	0x20000330
 80012b4:	20000218 	.word	0x20000218
 80012b8:	20000264 	.word	0x20000264
 80012bc:	20000228 	.word	0x20000228
 80012c0:	20000238 	.word	0x20000238
 80012c4:	1fff75ca 	.word	0x1fff75ca
 80012c8:	1fff75a8 	.word	0x1fff75a8
 80012cc:	40540000 	.word	0x40540000
 80012d0:	403e0000 	.word	0x403e0000

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b0a4      	sub	sp, #144	; 0x90
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012de:	2238      	movs	r2, #56	; 0x38
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f005 ffce 	bl	8007284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f8:	463b      	mov	r3, r7
 80012fa:	2244      	movs	r2, #68	; 0x44
 80012fc:	2100      	movs	r1, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f005 ffc0 	bl	8007284 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001304:	2000      	movs	r0, #0
 8001306:	f002 fd8b 	bl	8003e20 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130a:	2302      	movs	r3, #2
 800130c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001312:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001314:	2340      	movs	r3, #64	; 0x40
 8001316:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001318:	2302      	movs	r3, #2
 800131a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800131c:	2302      	movs	r3, #2
 800131e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001320:	2304      	movs	r3, #4
 8001322:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001324:	2355      	movs	r3, #85	; 0x55
 8001326:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800132a:	2302      	movs	r3, #2
 800132c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001330:	2302      	movs	r3, #2
 8001332:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001340:	4618      	mov	r0, r3
 8001342:	f002 fe11 	bl	8003f68 <HAL_RCC_OscConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800134c:	f000 f9fe 	bl	800174c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001350:	230f      	movs	r3, #15
 8001352:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001354:	2303      	movs	r3, #3
 8001356:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8001364:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001368:	2108      	movs	r1, #8
 800136a:	4618      	mov	r0, r3
 800136c:	f003 f914 	bl	8004598 <HAL_RCC_ClockConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001376:	f000 f9e9 	bl	800174c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 800137a:	f248 0302 	movw	r3, #32770	; 0x8002
 800137e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001384:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001388:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	4618      	mov	r0, r3
 800138e:	f003 fb1f 	bl	80049d0 <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001398:	f000 f9d8 	bl	800174c <Error_Handler>
  }
}
 800139c:	bf00      	nop
 800139e:	3790      	adds	r7, #144	; 0x90
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2220      	movs	r2, #32
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f005 ff61 	bl	8007284 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80013c2:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <MX_ADC1_Init+0x13c>)
 80013c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80013ca:	4b45      	ldr	r3, [pc, #276]	; (80014e0 <MX_ADC1_Init+0x13c>)
 80013cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013d2:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <MX_ADC1_Init+0x13c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d8:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <MX_ADC1_Init+0x13c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80013de:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <MX_ADC1_Init+0x13c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013e4:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <MX_ADC1_Init+0x13c>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <MX_ADC1_Init+0x13c>)
 80013ec:	2204      	movs	r2, #4
 80013ee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013f0:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <MX_ADC1_Init+0x13c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013f6:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <MX_ADC1_Init+0x13c>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80013fc:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <MX_ADC1_Init+0x13c>)
 80013fe:	2204      	movs	r2, #4
 8001400:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001402:	4b37      	ldr	r3, [pc, #220]	; (80014e0 <MX_ADC1_Init+0x13c>)
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800140a:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <MX_ADC1_Init+0x13c>)
 800140c:	2200      	movs	r2, #0
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001410:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <MX_ADC1_Init+0x13c>)
 8001412:	2200      	movs	r2, #0
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001416:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <MX_ADC1_Init+0x13c>)
 8001418:	2201      	movs	r2, #1
 800141a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <MX_ADC1_Init+0x13c>)
 8001420:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001424:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <MX_ADC1_Init+0x13c>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800142e:	482c      	ldr	r0, [pc, #176]	; (80014e0 <MX_ADC1_Init+0x13c>)
 8001430:	f000 fdf8 	bl	8002024 <HAL_ADC_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800143a:	f000 f987 	bl	800174c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	4619      	mov	r1, r3
 8001448:	4825      	ldr	r0, [pc, #148]	; (80014e0 <MX_ADC1_Init+0x13c>)
 800144a:	f001 ff13 	bl	8003274 <HAL_ADCEx_MultiModeConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001454:	f000 f97a 	bl	800174c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <MX_ADC1_Init+0x140>)
 800145a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800145c:	2306      	movs	r3, #6
 800145e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001460:	2307      	movs	r3, #7
 8001462:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001464:	237f      	movs	r3, #127	; 0x7f
 8001466:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001468:	2304      	movs	r3, #4
 800146a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	4619      	mov	r1, r3
 8001474:	481a      	ldr	r0, [pc, #104]	; (80014e0 <MX_ADC1_Init+0x13c>)
 8001476:	f001 fa53 	bl	8002920 <HAL_ADC_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001480:	f000 f964 	bl	800174c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_ADC1_Init+0x144>)
 8001486:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001488:	230c      	movs	r3, #12
 800148a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	4813      	ldr	r0, [pc, #76]	; (80014e0 <MX_ADC1_Init+0x13c>)
 8001492:	f001 fa45 	bl	8002920 <HAL_ADC_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 800149c:	f000 f956 	bl	800174c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <MX_ADC1_Init+0x148>)
 80014a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80014a4:	2312      	movs	r3, #18
 80014a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <MX_ADC1_Init+0x13c>)
 80014ae:	f001 fa37 	bl	8002920 <HAL_ADC_ConfigChannel>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80014b8:	f000 f948 	bl	800174c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <MX_ADC1_Init+0x14c>)
 80014be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014c0:	2318      	movs	r3, #24
 80014c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_ADC1_Init+0x13c>)
 80014ca:	f001 fa29 	bl	8002920 <HAL_ADC_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80014d4:	f000 f93a 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3730      	adds	r7, #48	; 0x30
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000264 	.word	0x20000264
 80014e4:	04300002 	.word	0x04300002
 80014e8:	08600004 	.word	0x08600004
 80014ec:	c3210000 	.word	0xc3210000
 80014f0:	cb840000 	.word	0xcb840000

080014f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b094      	sub	sp, #80	; 0x50
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001508:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001514:	463b      	mov	r3, r7
 8001516:	2234      	movs	r2, #52	; 0x34
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f005 feb2 	bl	8007284 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001520:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <MX_TIM1_Init+0xcc>)
 8001522:	4a28      	ldr	r2, [pc, #160]	; (80015c4 <MX_TIM1_Init+0xd0>)
 8001524:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9999;
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <MX_TIM1_Init+0xcc>)
 8001528:	f242 720f 	movw	r2, #9999	; 0x270f
 800152c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <MX_TIM1_Init+0xcc>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8499;
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <MX_TIM1_Init+0xcc>)
 8001536:	f242 1233 	movw	r2, #8499	; 0x2133
 800153a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <MX_TIM1_Init+0xcc>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001542:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <MX_TIM1_Init+0xcc>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <MX_TIM1_Init+0xcc>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800154e:	481c      	ldr	r0, [pc, #112]	; (80015c0 <MX_TIM1_Init+0xcc>)
 8001550:	f003 fc2e 	bl	8004db0 <HAL_TIM_Base_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 800155a:	f000 f8f7 	bl	800174c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001564:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001568:	4619      	mov	r1, r3
 800156a:	4815      	ldr	r0, [pc, #84]	; (80015c0 <MX_TIM1_Init+0xcc>)
 800156c:	f003 fdf6 	bl	800515c <HAL_TIM_ConfigClockSource>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0x86>
  {
    Error_Handler();
 8001576:	f000 f8e9 	bl	800174c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001586:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800158a:	4619      	mov	r1, r3
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <MX_TIM1_Init+0xcc>)
 800158e:	f004 f817 	bl	80055c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001598:	f000 f8d8 	bl	800174c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015a4:	463b      	mov	r3, r7
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_TIM1_Init+0xcc>)
 80015aa:	f004 f867 	bl	800567c <HAL_TIMEx_ConfigBreakDeadTime>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015b4:	f000 f8ca 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	3750      	adds	r7, #80	; 0x50
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000330 	.word	0x20000330
 80015c4:	40012c00 	.word	0x40012c00

080015c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <MX_USART2_UART_Init+0x90>)
 80015ce:	4a23      	ldr	r2, [pc, #140]	; (800165c <MX_USART2_UART_Init+0x94>)
 80015d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015d2:	4b21      	ldr	r3, [pc, #132]	; (8001658 <MX_USART2_UART_Init+0x90>)
 80015d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_USART2_UART_Init+0x90>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_USART2_UART_Init+0x90>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_USART2_UART_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_USART2_UART_Init+0x90>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <MX_USART2_UART_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_USART2_UART_Init+0x90>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <MX_USART2_UART_Init+0x90>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_USART2_UART_Init+0x90>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <MX_USART2_UART_Init+0x90>)
 800160c:	2200      	movs	r2, #0
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001610:	4811      	ldr	r0, [pc, #68]	; (8001658 <MX_USART2_UART_Init+0x90>)
 8001612:	f004 f919 	bl	8005848 <HAL_UART_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800161c:	f000 f896 	bl	800174c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001620:	2100      	movs	r1, #0
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_USART2_UART_Init+0x90>)
 8001624:	f005 fd1f 	bl	8007066 <HAL_UARTEx_SetTxFifoThreshold>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800162e:	f000 f88d 	bl	800174c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001632:	2100      	movs	r1, #0
 8001634:	4808      	ldr	r0, [pc, #32]	; (8001658 <MX_USART2_UART_Init+0x90>)
 8001636:	f005 fd54 	bl	80070e2 <HAL_UARTEx_SetRxFifoThreshold>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001640:	f000 f884 	bl	800174c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_USART2_UART_Init+0x90>)
 8001646:	f005 fcd5 	bl	8006ff4 <HAL_UARTEx_DisableFifoMode>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001650:	f000 f87c 	bl	800174c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000370 	.word	0x20000370
 800165c:	40004400 	.word	0x40004400

08001660 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_DMA_Init+0x50>)
 8001668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <MX_DMA_Init+0x50>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	6493      	str	r3, [r2, #72]	; 0x48
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_DMA_Init+0x50>)
 8001674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_DMA_Init+0x50>)
 8001680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001682:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <MX_DMA_Init+0x50>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6493      	str	r3, [r2, #72]	; 0x48
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_DMA_Init+0x50>)
 800168c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	200b      	movs	r0, #11
 800169c:	f001 ff65 	bl	800356a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016a0:	200b      	movs	r0, #11
 80016a2:	f001 ff7c 	bl	800359e <HAL_NVIC_EnableIRQ>

}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000

080016b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ca:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <MX_GPIO_Init+0x90>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <MX_GPIO_Init+0x90>)
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <MX_GPIO_Init+0x90>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_GPIO_Init+0x90>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	4a17      	ldr	r2, [pc, #92]	; (8001744 <MX_GPIO_Init+0x90>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_GPIO_Init+0x90>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_GPIO_Init+0x90>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	4a11      	ldr	r2, [pc, #68]	; (8001744 <MX_GPIO_Init+0x90>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_GPIO_Init+0x90>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001718:	480b      	ldr	r0, [pc, #44]	; (8001748 <MX_GPIO_Init+0x94>)
 800171a:	f002 fb4f 	bl	8003dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 800171e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4619      	mov	r1, r3
 8001736:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_GPIO_Init+0x94>)
 8001738:	f002 f9be 	bl	8003ab8 <HAL_GPIO_Init>

}
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	48000400 	.word	0x48000400

0800174c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8001766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800176a:	6093      	str	r3, [r2, #8]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40007000 	.word	0x40007000

0800177c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_MspInit+0x44>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <HAL_MspInit+0x44>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6613      	str	r3, [r2, #96]	; 0x60
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_MspInit+0x44>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_MspInit+0x44>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_MspInit+0x44>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a4:	6593      	str	r3, [r2, #88]	; 0x58
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_MspInit+0x44>)
 80017a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80017b2:	f7ff ffd3 	bl	800175c <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000

080017c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017e4:	d157      	bne.n	8001896 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <HAL_ADC_MspInit+0xdc>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	4a2d      	ldr	r2, [pc, #180]	; (80018a0 <HAL_ADC_MspInit+0xdc>)
 80017ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_ADC_MspInit+0xdc>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <HAL_ADC_MspInit+0xdc>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a27      	ldr	r2, [pc, #156]	; (80018a0 <HAL_ADC_MspInit+0xdc>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <HAL_ADC_MspInit+0xdc>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001816:	2303      	movs	r3, #3
 8001818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181a:	2303      	movs	r3, #3
 800181c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182c:	f002 f944 	bl	8003ab8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_ADC_MspInit+0xe0>)
 8001832:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <HAL_ADC_MspInit+0xe4>)
 8001834:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_ADC_MspInit+0xe0>)
 8001838:	2205      	movs	r2, #5
 800183a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_ADC_MspInit+0xe0>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_ADC_MspInit+0xe0>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_ADC_MspInit+0xe0>)
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800184e:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_ADC_MspInit+0xe0>)
 8001850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001854:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_ADC_MspInit+0xe0>)
 8001858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800185c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_ADC_MspInit+0xe0>)
 8001860:	2220      	movs	r2, #32
 8001862:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <HAL_ADC_MspInit+0xe0>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800186a:	480e      	ldr	r0, [pc, #56]	; (80018a4 <HAL_ADC_MspInit+0xe0>)
 800186c:	f001 feb2 	bl	80035d4 <HAL_DMA_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8001876:	f7ff ff69 	bl	800174c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <HAL_ADC_MspInit+0xe0>)
 800187e:	655a      	str	r2, [r3, #84]	; 0x54
 8001880:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_ADC_MspInit+0xe0>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2012      	movs	r0, #18
 800188c:	f001 fe6d 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001890:	2012      	movs	r0, #18
 8001892:	f001 fe84 	bl	800359e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	; 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000
 80018a4:	200002d0 	.word	0x200002d0
 80018a8:	40020008 	.word	0x40020008

080018ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <HAL_TIM_Base_MspInit+0x44>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d113      	bne.n	80018e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018be:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <HAL_TIM_Base_MspInit+0x48>)
 80018c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c2:	4a0c      	ldr	r2, [pc, #48]	; (80018f4 <HAL_TIM_Base_MspInit+0x48>)
 80018c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018c8:	6613      	str	r3, [r2, #96]	; 0x60
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_TIM_Base_MspInit+0x48>)
 80018cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	2019      	movs	r0, #25
 80018dc:	f001 fe45 	bl	800356a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80018e0:	2019      	movs	r0, #25
 80018e2:	f001 fe5c 	bl	800359e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40012c00 	.word	0x40012c00
 80018f4:	40021000 	.word	0x40021000

080018f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a17      	ldr	r2, [pc, #92]	; (8001974 <HAL_UART_MspInit+0x7c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d128      	bne.n	800196c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_UART_MspInit+0x80>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	4a16      	ldr	r2, [pc, #88]	; (8001978 <HAL_UART_MspInit+0x80>)
 8001920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001924:	6593      	str	r3, [r2, #88]	; 0x58
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_UART_MspInit+0x80>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_UART_MspInit+0x80>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a10      	ldr	r2, [pc, #64]	; (8001978 <HAL_UART_MspInit+0x80>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_UART_MspInit+0x80>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800194a:	230c      	movs	r3, #12
 800194c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800195a:	2307      	movs	r3, #7
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001968:	f002 f8a6 	bl	8003ab8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800196c:	bf00      	nop
 800196e:	3728      	adds	r7, #40	; 0x28
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40004400 	.word	0x40004400
 8001978:	40021000 	.word	0x40021000

0800197c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <HardFault_Handler+0x4>

08001990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <MemManage_Handler+0x4>

08001996 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d0:	f000 f8de 	bl	8001b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <DMA1_Channel1_IRQHandler+0x10>)
 80019de:	f001 ff1c 	bl	800381a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200002d0 	.word	0x200002d0

080019ec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <ADC1_2_IRQHandler+0x10>)
 80019f2:	f000 fd53 	bl	800249c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000264 	.word	0x20000264

08001a00 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a06:	f003 fa29 	bl	8004e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000330 	.word	0x20000330

08001a14 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <_sbrk+0x50>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x16>
		heap_end = &end;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <_sbrk+0x50>)
 8001a26:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <_sbrk+0x54>)
 8001a28:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <_sbrk+0x50>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <_sbrk+0x50>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	466a      	mov	r2, sp
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d907      	bls.n	8001a4e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a3e:	f005 fbf7 	bl	8007230 <__errno>
 8001a42:	4602      	mov	r2, r0
 8001a44:	230c      	movs	r3, #12
 8001a46:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a48:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4c:	e006      	b.n	8001a5c <_sbrk+0x48>
	}

	heap_end += incr;
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <_sbrk+0x50>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a03      	ldr	r2, [pc, #12]	; (8001a64 <_sbrk+0x50>)
 8001a58:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000258 	.word	0x20000258
 8001a68:	20000408 	.word	0x20000408

08001a6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <SystemInit+0x28>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a76:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <SystemInit+0x28>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <SystemInit+0x28>)
 8001a82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a86:	609a      	str	r2, [r3, #8]
#endif
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a9e:	490e      	ldr	r1, [pc, #56]	; (8001ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa0:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <LoopForever+0xe>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab4:	4c0b      	ldr	r4, [pc, #44]	; (8001ae4 <LoopForever+0x16>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ac2:	f7ff ffd3 	bl	8001a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac6:	f005 fbb9 	bl	800723c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aca:	f7ff fac1 	bl	8001050 <main>

08001ace <LoopForever>:

LoopForever:
    b LoopForever
 8001ace:	e7fe      	b.n	8001ace <LoopForever>
  ldr   r0, =_estack
 8001ad0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001adc:	0800b020 	.word	0x0800b020
  ldr r2, =_sbss
 8001ae0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ae4:	20000404 	.word	0x20000404

08001ae8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae8:	e7fe      	b.n	8001ae8 <COMP1_2_3_IRQHandler>

08001aea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af4:	2003      	movs	r0, #3
 8001af6:	f001 fd2d 	bl	8003554 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afa:	2000      	movs	r0, #0
 8001afc:	f000 f80e 	bl	8001b1c <HAL_InitTick>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	71fb      	strb	r3, [r7, #7]
 8001b0a:	e001      	b.n	8001b10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b0c:	f7ff fe36 	bl	800177c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b10:	79fb      	ldrb	r3, [r7, #7]

}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_InitTick+0x68>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d022      	beq.n	8001b76 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b30:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_InitTick+0x6c>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_InitTick+0x68>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 fd38 	bl	80035ba <HAL_SYSTICK_Config>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10f      	bne.n	8001b70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	d809      	bhi.n	8001b6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b56:	2200      	movs	r2, #0
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5e:	f001 fd04 	bl	800356a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_InitTick+0x70>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e007      	b.n	8001b7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	73fb      	strb	r3, [r7, #15]
 8001b6e:	e004      	b.n	8001b7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e001      	b.n	8001b7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000008 	.word	0x20000008
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_IncTick+0x1c>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_IncTick+0x20>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a03      	ldr	r2, [pc, #12]	; (8001bac <HAL_IncTick+0x1c>)
 8001ba0:	6013      	str	r3, [r2, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	200003fc 	.word	0x200003fc
 8001bb0:	20000008 	.word	0x20000008

08001bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_GetTick+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	200003fc 	.word	0x200003fc

08001bcc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	609a      	str	r2, [r3, #8]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c34:	b490      	push	{r4, r7}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3360      	adds	r3, #96	; 0x60
 8001c46:	461a      	mov	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001c50:	6822      	ldr	r2, [r4, #0]
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <LL_ADC_SetOffset+0x40>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	4313      	orrs	r3, r2
 8001c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001c66:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c68:	bf00      	nop
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc90      	pop	{r4, r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	03fff000 	.word	0x03fff000

08001c78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c78:	b490      	push	{r4, r7}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3360      	adds	r3, #96	; 0x60
 8001c86:	461a      	mov	r2, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c90:	6823      	ldr	r3, [r4, #0]
 8001c92:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc90      	pop	{r4, r7}
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ca0:	b490      	push	{r4, r7}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	3360      	adds	r3, #96	; 0x60
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc90      	pop	{r4, r7}
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001cd0:	b490      	push	{r4, r7}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3360      	adds	r3, #96	; 0x60
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc90      	pop	{r4, r7}
 8001cfe:	4770      	bx	lr

08001d00 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d00:	b490      	push	{r4, r7}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	3360      	adds	r3, #96	; 0x60
 8001d10:	461a      	mov	r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001d1a:	6823      	ldr	r3, [r4, #0]
 8001d1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc90      	pop	{r4, r7}
 8001d2e:	4770      	bx	lr

08001d30 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	615a      	str	r2, [r3, #20]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d7c:	b490      	push	{r4, r7}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3330      	adds	r3, #48	; 0x30
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	4413      	add	r3, r2
 8001d9a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001d9c:	6822      	ldr	r2, [r4, #0]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	211f      	movs	r1, #31
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	401a      	ands	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	0e9b      	lsrs	r3, r3, #26
 8001db2:	f003 011f 	and.w	r1, r3, #31
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc90      	pop	{r4, r7}
 8001dcc:	4770      	bx	lr

08001dce <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001df4:	b490      	push	{r4, r7}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	3314      	adds	r3, #20
 8001e04:	461a      	mov	r2, r3
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	0e5b      	lsrs	r3, r3, #25
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	4413      	add	r3, r2
 8001e12:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	0d1b      	lsrs	r3, r3, #20
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	2107      	movs	r1, #7
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	0d1b      	lsrs	r3, r3, #20
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	4313      	orrs	r3, r2
 8001e38:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc90      	pop	{r4, r7}
 8001e42:	4770      	bx	lr

08001e44 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	401a      	ands	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0318 	and.w	r3, r3, #24
 8001e66:	4908      	ldr	r1, [pc, #32]	; (8001e88 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e68:	40d9      	lsrs	r1, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	400b      	ands	r3, r1
 8001e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e72:	431a      	orrs	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	0007ffff 	.word	0x0007ffff

08001e8c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 031f 	and.w	r3, r3, #31
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ed4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6093      	str	r3, [r2, #8]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001efc:	d101      	bne.n	8001f02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f4c:	d101      	bne.n	8001f52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f74:	f043 0201 	orr.w	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <LL_ADC_IsEnabled+0x18>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <LL_ADC_IsEnabled+0x1a>
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fbe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fc2:	f043 0204 	orr.w	r2, r3, #4
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d101      	bne.n	8001fee <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b08      	cmp	r3, #8
 800200e:	d101      	bne.n	8002014 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002030:	2300      	movs	r3, #0
 8002032:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e16b      	b.n	8002316 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d109      	bne.n	8002060 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff fbb9 	bl	80017c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ff3f 	bl	8001ee8 <LL_ADC_IsDeepPowerDownEnabled>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d004      	beq.n	800207a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff25 	bl	8001ec4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff ff5a 	bl	8001f38 <LL_ADC_IsInternalRegulatorEnabled>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d113      	bne.n	80020b2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff ff3e 	bl	8001f10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002094:	4ba2      	ldr	r3, [pc, #648]	; (8002320 <HAL_ADC_Init+0x2fc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	099b      	lsrs	r3, r3, #6
 800209a:	4aa2      	ldr	r2, [pc, #648]	; (8002324 <HAL_ADC_Init+0x300>)
 800209c:	fba2 2303 	umull	r2, r3, r2, r3
 80020a0:	099b      	lsrs	r3, r3, #6
 80020a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020a4:	e002      	b.n	80020ac <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f9      	bne.n	80020a6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff3e 	bl	8001f38 <LL_ADC_IsInternalRegulatorEnabled>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10d      	bne.n	80020de <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	f043 0210 	orr.w	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	f043 0201 	orr.w	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ff77 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 80020e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 8106 	bne.w	8002304 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 8102 	bne.w	8002304 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002108:	f043 0202 	orr.w	r2, r3, #2
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff37 	bl	8001f88 <LL_ADC_IsEnabled>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d111      	bne.n	8002144 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002120:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002124:	f7ff ff30 	bl	8001f88 <LL_ADC_IsEnabled>
 8002128:	4604      	mov	r4, r0
 800212a:	487f      	ldr	r0, [pc, #508]	; (8002328 <HAL_ADC_Init+0x304>)
 800212c:	f7ff ff2c 	bl	8001f88 <LL_ADC_IsEnabled>
 8002130:	4603      	mov	r3, r0
 8002132:	4323      	orrs	r3, r4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d105      	bne.n	8002144 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4619      	mov	r1, r3
 800213e:	487b      	ldr	r0, [pc, #492]	; (800232c <HAL_ADC_Init+0x308>)
 8002140:	f7ff fd44 	bl	8001bcc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	7f5b      	ldrb	r3, [r3, #29]
 8002148:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800214e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002154:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800215a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002162:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800216e:	2b01      	cmp	r3, #1
 8002170:	d106      	bne.n	8002180 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	3b01      	subs	r3, #1
 8002178:	045b      	lsls	r3, r3, #17
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	4b63      	ldr	r3, [pc, #396]	; (8002330 <HAL_ADC_Init+0x30c>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	69b9      	ldr	r1, [r7, #24]
 80021ac:	430b      	orrs	r3, r1
 80021ae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff03 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 80021d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff ff10 	bl	8001ffc <LL_ADC_INJ_IsConversionOngoing>
 80021dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d16d      	bne.n	80022c0 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d16a      	bne.n	80022c0 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021ee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021f6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002206:	f023 0302 	bic.w	r3, r3, #2
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	69b9      	ldr	r1, [r7, #24]
 8002210:	430b      	orrs	r3, r1
 8002212:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d017      	beq.n	800224c <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800222a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002234:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6911      	ldr	r1, [r2, #16]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	430b      	orrs	r3, r1
 8002246:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800224a:	e013      	b.n	8002274 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691a      	ldr	r2, [r3, #16]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800225a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800226c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002270:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800227a:	2b01      	cmp	r3, #1
 800227c:	d118      	bne.n	80022b0 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002294:	4311      	orrs	r1, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800229a:	4311      	orrs	r1, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022a0:	430a      	orrs	r2, r1
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	611a      	str	r2, [r3, #16]
 80022ae:	e007      	b.n	80022c0 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d10c      	bne.n	80022e2 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f023 010f 	bic.w	r1, r3, #15
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	1e5a      	subs	r2, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	631a      	str	r2, [r3, #48]	; 0x30
 80022e0:	e007      	b.n	80022f2 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 020f 	bic.w	r2, r2, #15
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f6:	f023 0303 	bic.w	r3, r3, #3
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	65da      	str	r2, [r3, #92]	; 0x5c
 8002302:	e007      	b.n	8002314 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002308:	f043 0210 	orr.w	r2, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002314:	7ffb      	ldrb	r3, [r7, #31]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	; 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}
 800231e:	bf00      	nop
 8002320:	20000000 	.word	0x20000000
 8002324:	053e2d63 	.word	0x053e2d63
 8002328:	50000100 	.word	0x50000100
 800232c:	50000300 	.word	0x50000300
 8002330:	fff04007 	.word	0xfff04007

08002334 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002340:	4851      	ldr	r0, [pc, #324]	; (8002488 <HAL_ADC_Start_DMA+0x154>)
 8002342:	f7ff fda3 	bl	8001e8c <LL_ADC_GetMultimode>
 8002346:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fe42 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 808f 	bne.w	8002478 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_ADC_Start_DMA+0x34>
 8002364:	2302      	movs	r3, #2
 8002366:	e08a      	b.n	800247e <HAL_ADC_Start_DMA+0x14a>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b05      	cmp	r3, #5
 800237a:	d002      	beq.n	8002382 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	2b09      	cmp	r3, #9
 8002380:	d173      	bne.n	800246a <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fe30 	bl	8002fe8 <ADC_Enable>
 8002388:	4603      	mov	r3, r0
 800238a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800238c:	7dfb      	ldrb	r3, [r7, #23]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d166      	bne.n	8002460 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002396:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800239a:	f023 0301 	bic.w	r3, r3, #1
 800239e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a38      	ldr	r2, [pc, #224]	; (800248c <HAL_ADC_Start_DMA+0x158>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d002      	beq.n	80023b6 <HAL_ADC_Start_DMA+0x82>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	e001      	b.n	80023ba <HAL_ADC_Start_DMA+0x86>
 80023b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	4293      	cmp	r3, r2
 80023c0:	d002      	beq.n	80023c8 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e4:	f023 0206 	bic.w	r2, r3, #6
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	661a      	str	r2, [r3, #96]	; 0x60
 80023ec:	e002      	b.n	80023f4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	4a25      	ldr	r2, [pc, #148]	; (8002490 <HAL_ADC_Start_DMA+0x15c>)
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002400:	4a24      	ldr	r2, [pc, #144]	; (8002494 <HAL_ADC_Start_DMA+0x160>)
 8002402:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	4a23      	ldr	r2, [pc, #140]	; (8002498 <HAL_ADC_Start_DMA+0x164>)
 800240a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	221c      	movs	r2, #28
 8002412:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0210 	orr.w	r2, r2, #16
 800242a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3340      	adds	r3, #64	; 0x40
 8002446:	4619      	mov	r1, r3
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f001 f96a 	bl	8003724 <HAL_DMA_Start_IT>
 8002450:	4603      	mov	r3, r0
 8002452:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fda8 	bl	8001fae <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800245e:	e00d      	b.n	800247c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002468:	e008      	b.n	800247c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002476:	e001      	b.n	800247c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002478:	2302      	movs	r3, #2
 800247a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800247c:	7dfb      	ldrb	r3, [r7, #23]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	50000300 	.word	0x50000300
 800248c:	50000100 	.word	0x50000100
 8002490:	0800309d 	.word	0x0800309d
 8002494:	08003175 	.word	0x08003175
 8002498:	08003191 	.word	0x08003191

0800249c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024b8:	4883      	ldr	r0, [pc, #524]	; (80026c8 <HAL_ADC_IRQHandler+0x22c>)
 80024ba:	f7ff fce7 	bl	8001e8c <LL_ADC_GetMultimode>
 80024be:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d017      	beq.n	80024fa <HAL_ADC_IRQHandler+0x5e>
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d012      	beq.n	80024fa <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 feb7 	bl	8003260 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2202      	movs	r2, #2
 80024f8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d004      	beq.n	800250e <HAL_ADC_IRQHandler+0x72>
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10a      	bne.n	8002524 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 8085 	beq.w	8002624 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d07f      	beq.n	8002624 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	f003 0310 	and.w	r3, r3, #16
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002534:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff fc08 	bl	8001d56 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d064      	beq.n	8002616 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a5e      	ldr	r2, [pc, #376]	; (80026cc <HAL_ADC_IRQHandler+0x230>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d002      	beq.n	800255c <HAL_ADC_IRQHandler+0xc0>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	e001      	b.n	8002560 <HAL_ADC_IRQHandler+0xc4>
 800255c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	4293      	cmp	r3, r2
 8002566:	d008      	beq.n	800257a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b05      	cmp	r3, #5
 8002572:	d002      	beq.n	800257a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b09      	cmp	r3, #9
 8002578:	d104      	bne.n	8002584 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	623b      	str	r3, [r7, #32]
 8002582:	e00d      	b.n	80025a0 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a50      	ldr	r2, [pc, #320]	; (80026cc <HAL_ADC_IRQHandler+0x230>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d002      	beq.n	8002594 <HAL_ADC_IRQHandler+0xf8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e001      	b.n	8002598 <HAL_ADC_IRQHandler+0xfc>
 8002594:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002598:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d135      	bne.n	8002616 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d12e      	bne.n	8002616 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff fd0a 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d11a      	bne.n	80025fe <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 020c 	bic.w	r2, r2, #12
 80025d6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d112      	bne.n	8002616 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80025fc:	e00b      	b.n	8002616 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	f043 0210 	orr.w	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f95a 	bl	80028d0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	220c      	movs	r2, #12
 8002622:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b00      	cmp	r3, #0
 800262c:	d004      	beq.n	8002638 <HAL_ADC_IRQHandler+0x19c>
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10b      	bne.n	8002650 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 809e 	beq.w	8002780 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8098 	beq.w	8002780 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff fbae 	bl	8001dce <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002672:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fb6c 	bl	8001d56 <LL_ADC_REG_IsTriggerSourceSWStart>
 800267e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a11      	ldr	r2, [pc, #68]	; (80026cc <HAL_ADC_IRQHandler+0x230>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d002      	beq.n	8002690 <HAL_ADC_IRQHandler+0x1f4>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	e001      	b.n	8002694 <HAL_ADC_IRQHandler+0x1f8>
 8002690:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	4293      	cmp	r3, r2
 800269a:	d008      	beq.n	80026ae <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d005      	beq.n	80026ae <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d002      	beq.n	80026ae <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b07      	cmp	r3, #7
 80026ac:	d104      	bne.n	80026b8 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	623b      	str	r3, [r7, #32]
 80026b6:	e011      	b.n	80026dc <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a03      	ldr	r2, [pc, #12]	; (80026cc <HAL_ADC_IRQHandler+0x230>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d006      	beq.n	80026d0 <HAL_ADC_IRQHandler+0x234>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	e005      	b.n	80026d4 <HAL_ADC_IRQHandler+0x238>
 80026c8:	50000300 	.word	0x50000300
 80026cc:	50000100 	.word	0x50000100
 80026d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026d4:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <HAL_ADC_IRQHandler+0x260>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d142      	bne.n	8002772 <HAL_ADC_IRQHandler+0x2d6>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d03f      	beq.n	8002772 <HAL_ADC_IRQHandler+0x2d6>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d13a      	bne.n	8002772 <HAL_ADC_IRQHandler+0x2d6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	2b40      	cmp	r3, #64	; 0x40
 8002708:	d133      	bne.n	8002772 <HAL_ADC_IRQHandler+0x2d6>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d12e      	bne.n	8002772 <HAL_ADC_IRQHandler+0x2d6>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fc6f 	bl	8001ffc <LL_ADC_INJ_IsConversionOngoing>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d11a      	bne.n	800275a <HAL_ADC_IRQHandler+0x2be>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002732:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002738:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d112      	bne.n	8002772 <HAL_ADC_IRQHandler+0x2d6>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	65da      	str	r2, [r3, #92]	; 0x5c
 8002758:	e00b      	b.n	8002772 <HAL_ADC_IRQHandler+0x2d6>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275e:	f043 0210 	orr.w	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276a:	f043 0201 	orr.w	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fd4c 	bl	8003210 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2260      	movs	r2, #96	; 0x60
 800277e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002786:	2b00      	cmp	r3, #0
 8002788:	d011      	beq.n	80027ae <HAL_ADC_IRQHandler+0x312>
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00c      	beq.n	80027ae <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002798:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f8a9 	bl	80028f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2280      	movs	r2, #128	; 0x80
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d012      	beq.n	80027de <HAL_ADC_IRQHandler+0x342>
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00d      	beq.n	80027de <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fd32 	bl	8003238 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d012      	beq.n	800280e <HAL_ADC_IRQHandler+0x372>
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00d      	beq.n	800280e <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fd24 	bl	800324c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800280c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	2b00      	cmp	r3, #0
 8002816:	d036      	beq.n	8002886 <HAL_ADC_IRQHandler+0x3ea>
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b00      	cmp	r3, #0
 8002820:	d031      	beq.n	8002886 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002826:	2b00      	cmp	r3, #0
 8002828:	d102      	bne.n	8002830 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 800282a:	2301      	movs	r3, #1
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
 800282e:	e014      	b.n	800285a <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002836:	4825      	ldr	r0, [pc, #148]	; (80028cc <HAL_ADC_IRQHandler+0x430>)
 8002838:	f7ff fb36 	bl	8001ea8 <LL_ADC_GetMultiDMATransfer>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002842:	2301      	movs	r3, #1
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
 8002846:	e008      	b.n	800285a <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8002856:	2301      	movs	r3, #1
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	2b01      	cmp	r3, #1
 800285e:	d10e      	bne.n	800287e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002870:	f043 0202 	orr.w	r2, r3, #2
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f847 	bl	800290c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2210      	movs	r2, #16
 8002884:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288c:	2b00      	cmp	r3, #0
 800288e:	d018      	beq.n	80028c2 <HAL_ADC_IRQHandler+0x426>
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002896:	2b00      	cmp	r3, #0
 8002898:	d013      	beq.n	80028c2 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	f043 0208 	orr.w	r2, r3, #8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ba:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fcb1 	bl	8003224 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80028c2:	bf00      	nop
 80028c4:	3728      	adds	r7, #40	; 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	50000300 	.word	0x50000300

080028d0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b0a6      	sub	sp, #152	; 0x98
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x22>
 800293e:	2302      	movs	r3, #2
 8002940:	e348      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x6b4>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fb41 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 832d 	bne.w	8002fb6 <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	f7ff fa07 	bl	8001d7c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fb2f 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 8002978:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fb3b 	bl	8001ffc <LL_ADC_INJ_IsConversionOngoing>
 8002986:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800298a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800298e:	2b00      	cmp	r3, #0
 8002990:	f040 817b 	bne.w	8002c8a <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002998:	2b00      	cmp	r3, #0
 800299a:	f040 8176 	bne.w	8002c8a <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029a6:	d10f      	bne.n	80029c8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2200      	movs	r2, #0
 80029b2:	4619      	mov	r1, r3
 80029b4:	f7ff fa1e 	bl	8001df4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff f9b5 	bl	8001d30 <LL_ADC_SetSamplingTimeCommonConfig>
 80029c6:	e00e      	b.n	80029e6 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	461a      	mov	r2, r3
 80029d6:	f7ff fa0d 	bl	8001df4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff f9a5 	bl	8001d30 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	08db      	lsrs	r3, r3, #3
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d022      	beq.n	8002a4e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6919      	ldr	r1, [r3, #16]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a18:	f7ff f90c 	bl	8001c34 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6818      	ldr	r0, [r3, #0]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6919      	ldr	r1, [r3, #16]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	f7ff f951 	bl	8001cd0 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6919      	ldr	r1, [r3, #16]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	7f1b      	ldrb	r3, [r3, #28]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d102      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x124>
 8002a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a42:	e000      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x126>
 8002a44:	2300      	movs	r3, #0
 8002a46:	461a      	mov	r2, r3
 8002a48:	f7ff f95a 	bl	8001d00 <LL_ADC_SetOffsetSaturation>
 8002a4c:	e11d      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff f90f 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x15a>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff f904 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	e012      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x180>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff f8f9 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a98:	fab3 f383 	clz	r3, r3
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d105      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x198>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0e9b      	lsrs	r3, r3, #26
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	e00a      	b.n	8002ace <HAL_ADC_ConfigChannel+0x1ae>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002ac6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d106      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff f8e0 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff f8c6 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x1ec>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2101      	movs	r1, #1
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff f8bb 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	f003 021f 	and.w	r2, r3, #31
 8002b0a:	e010      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x20e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2101      	movs	r1, #1
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff f8b0 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d105      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x226>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	0e9b      	lsrs	r3, r3, #26
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	e00a      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x23c>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d106      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2200      	movs	r2, #0
 8002b66:	2101      	movs	r1, #1
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff f899 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2102      	movs	r1, #2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff f87f 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x27a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2102      	movs	r1, #2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff f874 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002b90:	4603      	mov	r3, r0
 8002b92:	0e9b      	lsrs	r3, r3, #26
 8002b94:	f003 021f 	and.w	r2, r3, #31
 8002b98:	e010      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x29c>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff f869 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bac:	fa93 f3a3 	rbit	r3, r3
 8002bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb4:	fab3 f383 	clz	r3, r3
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d105      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x2b4>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0e9b      	lsrs	r3, r3, #26
 8002bce:	f003 031f 	and.w	r3, r3, #31
 8002bd2:	e00a      	b.n	8002bea <HAL_ADC_ConfigChannel+0x2ca>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d106      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f852 	bl	8001ca0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2103      	movs	r1, #3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff f838 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10a      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x308>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2103      	movs	r1, #3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff f82d 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	0e9b      	lsrs	r3, r3, #26
 8002c22:	f003 021f 	and.w	r2, r3, #31
 8002c26:	e010      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x32a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2103      	movs	r1, #3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff f822 	bl	8001c78 <LL_ADC_GetOffsetChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d105      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x342>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	0e9b      	lsrs	r3, r3, #26
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	e00a      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x358>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d106      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2200      	movs	r2, #0
 8002c82:	2103      	movs	r1, #3
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff f80b 	bl	8001ca0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff f97a 	bl	8001f88 <LL_ADC_IsEnabled>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 810c 	bne.w	8002eb4 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6819      	ldr	r1, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f7ff f8cb 	bl	8001e44 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	4aab      	ldr	r2, [pc, #684]	; (8002f60 <HAL_ADC_ConfigChannel+0x640>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	f040 80fd 	bne.w	8002eb4 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10b      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x3c2>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	0e9b      	lsrs	r3, r3, #26
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	2b09      	cmp	r3, #9
 8002cd8:	bf94      	ite	ls
 8002cda:	2301      	movls	r3, #1
 8002cdc:	2300      	movhi	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	e012      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x3e8>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cea:	fa93 f3a3 	rbit	r3, r3
 8002cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	2b09      	cmp	r3, #9
 8002d00:	bf94      	ite	ls
 8002d02:	2301      	movls	r3, #1
 8002d04:	2300      	movhi	r3, #0
 8002d06:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d064      	beq.n	8002dd6 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d107      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x408>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	3301      	adds	r3, #1
 8002d20:	069b      	lsls	r3, r3, #26
 8002d22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d26:	e00e      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x426>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	069b      	lsls	r3, r3, #26
 8002d42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x446>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	0e9b      	lsrs	r3, r3, #26
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	2101      	movs	r1, #1
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	e010      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x468>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f303 	lsl.w	r3, r1, r3
 8002d88:	ea42 0103 	orr.w	r1, r2, r3
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10a      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x48e>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	0e9b      	lsrs	r3, r3, #26
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f003 021f 	and.w	r2, r3, #31
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	051b      	lsls	r3, r3, #20
 8002dac:	e011      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x4b2>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	f003 021f 	and.w	r2, r3, #31
 8002dca:	4613      	mov	r3, r2
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	4413      	add	r3, r2
 8002dd0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	e069      	b.n	8002eaa <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d107      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x4d2>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	0e9b      	lsrs	r3, r3, #26
 8002de8:	3301      	adds	r3, #1
 8002dea:	069b      	lsls	r3, r3, #26
 8002dec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002df0:	e00e      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x4f0>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	61fb      	str	r3, [r7, #28]
  return result;
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	3301      	adds	r3, #1
 8002e0a:	069b      	lsls	r3, r3, #26
 8002e0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x510>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0e9b      	lsrs	r3, r3, #26
 8002e22:	3301      	adds	r3, #1
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	2101      	movs	r1, #1
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	e010      	b.n	8002e52 <HAL_ADC_ConfigChannel+0x532>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	617b      	str	r3, [r7, #20]
  return result;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e52:	ea42 0103 	orr.w	r1, r2, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10d      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x55e>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	0e9b      	lsrs	r3, r3, #26
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f003 021f 	and.w	r2, r3, #31
 8002e6e:	4613      	mov	r3, r2
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	4413      	add	r3, r2
 8002e74:	3b1e      	subs	r3, #30
 8002e76:	051b      	lsls	r3, r3, #20
 8002e78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	e014      	b.n	8002ea8 <HAL_ADC_ConfigChannel+0x588>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	60fb      	str	r3, [r7, #12]
  return result;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	f003 021f 	and.w	r2, r3, #31
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3b1e      	subs	r3, #30
 8002ea2:	051b      	lsls	r3, r3, #20
 8002ea4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	6892      	ldr	r2, [r2, #8]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f7fe ffa0 	bl	8001df4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b2a      	ldr	r3, [pc, #168]	; (8002f64 <HAL_ADC_ConfigChannel+0x644>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8083 	beq.w	8002fc8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ec2:	4829      	ldr	r0, [pc, #164]	; (8002f68 <HAL_ADC_ConfigChannel+0x648>)
 8002ec4:	f7fe fea8 	bl	8001c18 <LL_ADC_GetCommonPathInternalCh>
 8002ec8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <HAL_ADC_ConfigChannel+0x64c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d004      	beq.n	8002ee0 <HAL_ADC_ConfigChannel+0x5c0>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a25      	ldr	r2, [pc, #148]	; (8002f70 <HAL_ADC_ConfigChannel+0x650>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d126      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ee4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d120      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ef4:	d168      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002efa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002efe:	4619      	mov	r1, r3
 8002f00:	4819      	ldr	r0, [pc, #100]	; (8002f68 <HAL_ADC_ConfigChannel+0x648>)
 8002f02:	f7fe fe76 	bl	8001bf2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_ADC_ConfigChannel+0x654>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	099b      	lsrs	r3, r3, #6
 8002f0c:	4a1a      	ldr	r2, [pc, #104]	; (8002f78 <HAL_ADC_ConfigChannel+0x658>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	099a      	lsrs	r2, r3, #6
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f1e:	e002      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f9      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f2c:	e04c      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <HAL_ADC_ConfigChannel+0x65c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d125      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x664>
 8002f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d11f      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a0d      	ldr	r2, [pc, #52]	; (8002f80 <HAL_ADC_ConfigChannel+0x660>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d03c      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f56:	4619      	mov	r1, r3
 8002f58:	4803      	ldr	r0, [pc, #12]	; (8002f68 <HAL_ADC_ConfigChannel+0x648>)
 8002f5a:	f7fe fe4a 	bl	8001bf2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f5e:	e033      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x6a8>
 8002f60:	407f0000 	.word	0x407f0000
 8002f64:	80080000 	.word	0x80080000
 8002f68:	50000300 	.word	0x50000300
 8002f6c:	c3210000 	.word	0xc3210000
 8002f70:	90c00010 	.word	0x90c00010
 8002f74:	20000000 	.word	0x20000000
 8002f78:	053e2d63 	.word	0x053e2d63
 8002f7c:	c7520000 	.word	0xc7520000
 8002f80:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <HAL_ADC_ConfigChannel+0x6bc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d11c      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d116      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a10      	ldr	r2, [pc, #64]	; (8002fe0 <HAL_ADC_ConfigChannel+0x6c0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d011      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fac:	4619      	mov	r1, r3
 8002fae:	480d      	ldr	r0, [pc, #52]	; (8002fe4 <HAL_ADC_ConfigChannel+0x6c4>)
 8002fb0:	f7fe fe1f 	bl	8001bf2 <LL_ADC_SetCommonPathInternalCh>
 8002fb4:	e008      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	f043 0220 	orr.w	r2, r3, #32
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fd0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3798      	adds	r7, #152	; 0x98
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	cb840000 	.word	0xcb840000
 8002fe0:	50000100 	.word	0x50000100
 8002fe4:	50000300 	.word	0x50000300

08002fe8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe ffc7 	bl	8001f88 <LL_ADC_IsEnabled>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d146      	bne.n	800308e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <ADC_Enable+0xb0>)
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00d      	beq.n	800302a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	f043 0210 	orr.w	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e032      	b.n	8003090 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe ff96 	bl	8001f60 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003034:	f7fe fdbe 	bl	8001bb4 <HAL_GetTick>
 8003038:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800303a:	e021      	b.n	8003080 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe ffa1 	bl	8001f88 <LL_ADC_IsEnabled>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d104      	bne.n	8003056 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f7fe ff85 	bl	8001f60 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003056:	f7fe fdad 	bl	8001bb4 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d90d      	bls.n	8003080 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	f043 0210 	orr.w	r2, r3, #16
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003074:	f043 0201 	orr.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e007      	b.n	8003090 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	d1d6      	bne.n	800303c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	8000003f 	.word	0x8000003f

0800309c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d14b      	bne.n	800314e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d021      	beq.n	8003114 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe fe3e 	bl	8001d56 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d032      	beq.n	8003146 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d12b      	bne.n	8003146 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d11f      	bne.n	8003146 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	65da      	str	r2, [r3, #92]	; 0x5c
 8003112:	e018      	b.n	8003146 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d111      	bne.n	8003146 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d105      	bne.n	8003146 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	f043 0201 	orr.w	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f7ff fbc2 	bl	80028d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800314c:	e00e      	b.n	800316c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f7ff fbd6 	bl	800290c <HAL_ADC_ErrorCallback>
}
 8003160:	e004      	b.n	800316c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4798      	blx	r3
}
 800316c:	bf00      	nop
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003180:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f7ff fbae 	bl	80028e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003188:	bf00      	nop
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ae:	f043 0204 	orr.w	r2, r3, #4
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7ff fba8 	bl	800290c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <LL_ADC_IsEnabled>:
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <LL_ADC_IsEnabled+0x18>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <LL_ADC_IsEnabled+0x1a>
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_ADC_REG_IsConversionOngoing>:
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d101      	bne.n	8003202 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b0a1      	sub	sp, #132	; 0x84
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800328e:	2302      	movs	r3, #2
 8003290:	e087      	b.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a2:	d102      	bne.n	80032aa <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80032a4:	4b41      	ldr	r3, [pc, #260]	; (80033ac <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	e001      	b.n	80032ae <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80032aa:	2300      	movs	r3, #0
 80032ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10b      	bne.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e06a      	b.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ff8b 	bl	80031ea <LL_ADC_REG_IsConversionOngoing>
 80032d4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff ff85 	bl	80031ea <LL_ADC_REG_IsConversionOngoing>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d14c      	bne.n	8003380 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d149      	bne.n	8003380 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032ec:	4b30      	ldr	r3, [pc, #192]	; (80033b0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80032ee:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d028      	beq.n	800334a <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6859      	ldr	r1, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800330a:	035b      	lsls	r3, r3, #13
 800330c:	430b      	orrs	r3, r1
 800330e:	431a      	orrs	r2, r3
 8003310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003312:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003314:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003318:	f7ff ff54 	bl	80031c4 <LL_ADC_IsEnabled>
 800331c:	4604      	mov	r4, r0
 800331e:	4823      	ldr	r0, [pc, #140]	; (80033ac <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003320:	f7ff ff50 	bl	80031c4 <LL_ADC_IsEnabled>
 8003324:	4603      	mov	r3, r0
 8003326:	4323      	orrs	r3, r4
 8003328:	2b00      	cmp	r3, #0
 800332a:	d133      	bne.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800332c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003334:	f023 030f 	bic.w	r3, r3, #15
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	6811      	ldr	r1, [r2, #0]
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	6892      	ldr	r2, [r2, #8]
 8003340:	430a      	orrs	r2, r1
 8003342:	431a      	orrs	r2, r3
 8003344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003346:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003348:	e024      	b.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800334a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003354:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003356:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800335a:	f7ff ff33 	bl	80031c4 <LL_ADC_IsEnabled>
 800335e:	4604      	mov	r4, r0
 8003360:	4812      	ldr	r0, [pc, #72]	; (80033ac <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8003362:	f7ff ff2f 	bl	80031c4 <LL_ADC_IsEnabled>
 8003366:	4603      	mov	r3, r0
 8003368:	4323      	orrs	r3, r4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d112      	bne.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800336e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003376:	f023 030f 	bic.w	r3, r3, #15
 800337a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800337c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800337e:	e009      	b.n	8003394 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003392:	e000      	b.n	8003396 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003394:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800339e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3784      	adds	r7, #132	; 0x84
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd90      	pop	{r4, r7, pc}
 80033aa:	bf00      	nop
 80033ac:	50000100 	.word	0x50000100
 80033b0:	50000300 	.word	0x50000300

080033b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c4:	4b0c      	ldr	r3, [pc, #48]	; (80033f8 <__NVIC_SetPriorityGrouping+0x44>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033d0:	4013      	ands	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033e6:	4a04      	ldr	r2, [pc, #16]	; (80033f8 <__NVIC_SetPriorityGrouping+0x44>)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	60d3      	str	r3, [r2, #12]
}
 80033ec:	bf00      	nop
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003400:	4b04      	ldr	r3, [pc, #16]	; (8003414 <__NVIC_GetPriorityGrouping+0x18>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	0a1b      	lsrs	r3, r3, #8
 8003406:	f003 0307 	and.w	r3, r3, #7
}
 800340a:	4618      	mov	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	2b00      	cmp	r3, #0
 8003428:	db0b      	blt.n	8003442 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	f003 021f 	and.w	r2, r3, #31
 8003430:	4907      	ldr	r1, [pc, #28]	; (8003450 <__NVIC_EnableIRQ+0x38>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	2001      	movs	r0, #1
 800343a:	fa00 f202 	lsl.w	r2, r0, r2
 800343e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	e000e100 	.word	0xe000e100

08003454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	6039      	str	r1, [r7, #0]
 800345e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003464:	2b00      	cmp	r3, #0
 8003466:	db0a      	blt.n	800347e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	b2da      	uxtb	r2, r3
 800346c:	490c      	ldr	r1, [pc, #48]	; (80034a0 <__NVIC_SetPriority+0x4c>)
 800346e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003472:	0112      	lsls	r2, r2, #4
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	440b      	add	r3, r1
 8003478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800347c:	e00a      	b.n	8003494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	4908      	ldr	r1, [pc, #32]	; (80034a4 <__NVIC_SetPriority+0x50>)
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	3b04      	subs	r3, #4
 800348c:	0112      	lsls	r2, r2, #4
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	440b      	add	r3, r1
 8003492:	761a      	strb	r2, [r3, #24]
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000e100 	.word	0xe000e100
 80034a4:	e000ed00 	.word	0xe000ed00

080034a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b089      	sub	sp, #36	; 0x24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f1c3 0307 	rsb	r3, r3, #7
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	bf28      	it	cs
 80034c6:	2304      	movcs	r3, #4
 80034c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3304      	adds	r3, #4
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d902      	bls.n	80034d8 <NVIC_EncodePriority+0x30>
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	3b03      	subs	r3, #3
 80034d6:	e000      	b.n	80034da <NVIC_EncodePriority+0x32>
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034dc:	f04f 32ff 	mov.w	r2, #4294967295
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43da      	mvns	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	401a      	ands	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f0:	f04f 31ff 	mov.w	r1, #4294967295
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	fa01 f303 	lsl.w	r3, r1, r3
 80034fa:	43d9      	mvns	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003500:	4313      	orrs	r3, r2
         );
}
 8003502:	4618      	mov	r0, r3
 8003504:	3724      	adds	r7, #36	; 0x24
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003520:	d301      	bcc.n	8003526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003522:	2301      	movs	r3, #1
 8003524:	e00f      	b.n	8003546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003526:	4a0a      	ldr	r2, [pc, #40]	; (8003550 <SysTick_Config+0x40>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3b01      	subs	r3, #1
 800352c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800352e:	210f      	movs	r1, #15
 8003530:	f04f 30ff 	mov.w	r0, #4294967295
 8003534:	f7ff ff8e 	bl	8003454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003538:	4b05      	ldr	r3, [pc, #20]	; (8003550 <SysTick_Config+0x40>)
 800353a:	2200      	movs	r2, #0
 800353c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800353e:	4b04      	ldr	r3, [pc, #16]	; (8003550 <SysTick_Config+0x40>)
 8003540:	2207      	movs	r2, #7
 8003542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	e000e010 	.word	0xe000e010

08003554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ff29 	bl	80033b4 <__NVIC_SetPriorityGrouping>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	4603      	mov	r3, r0
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003578:	f7ff ff40 	bl	80033fc <__NVIC_GetPriorityGrouping>
 800357c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	6978      	ldr	r0, [r7, #20]
 8003584:	f7ff ff90 	bl	80034a8 <NVIC_EncodePriority>
 8003588:	4602      	mov	r2, r0
 800358a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff5f 	bl	8003454 <__NVIC_SetPriority>
}
 8003596:	bf00      	nop
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	4603      	mov	r3, r0
 80035a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff ff33 	bl	8003418 <__NVIC_EnableIRQ>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b082      	sub	sp, #8
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff ffa4 	bl	8003510 <SysTick_Config>
 80035c8:	4603      	mov	r3, r0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e08d      	b.n	8003702 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b47      	ldr	r3, [pc, #284]	; (800370c <HAL_DMA_Init+0x138>)
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d80f      	bhi.n	8003612 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	4b45      	ldr	r3, [pc, #276]	; (8003710 <HAL_DMA_Init+0x13c>)
 80035fa:	4413      	add	r3, r2
 80035fc:	4a45      	ldr	r2, [pc, #276]	; (8003714 <HAL_DMA_Init+0x140>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	009a      	lsls	r2, r3, #2
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a42      	ldr	r2, [pc, #264]	; (8003718 <HAL_DMA_Init+0x144>)
 800360e:	641a      	str	r2, [r3, #64]	; 0x40
 8003610:	e00e      	b.n	8003630 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	4b40      	ldr	r3, [pc, #256]	; (800371c <HAL_DMA_Init+0x148>)
 800361a:	4413      	add	r3, r2
 800361c:	4a3d      	ldr	r2, [pc, #244]	; (8003714 <HAL_DMA_Init+0x140>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	009a      	lsls	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a3c      	ldr	r2, [pc, #240]	; (8003720 <HAL_DMA_Init+0x14c>)
 800362e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f9b6 	bl	80039f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003690:	d102      	bne.n	8003698 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d010      	beq.n	80036d8 <HAL_DMA_Init+0x104>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d80c      	bhi.n	80036d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f9d6 	bl	8003a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	e008      	b.n	80036ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40020407 	.word	0x40020407
 8003710:	bffdfff8 	.word	0xbffdfff8
 8003714:	cccccccd 	.word	0xcccccccd
 8003718:	40020000 	.word	0x40020000
 800371c:	bffdfbf8 	.word	0xbffdfbf8
 8003720:	40020400 	.word	0x40020400

08003724 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800373c:	2b01      	cmp	r3, #1
 800373e:	d101      	bne.n	8003744 <HAL_DMA_Start_IT+0x20>
 8003740:	2302      	movs	r3, #2
 8003742:	e066      	b.n	8003812 <HAL_DMA_Start_IT+0xee>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d155      	bne.n	8003804 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0201 	bic.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	68b9      	ldr	r1, [r7, #8]
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f8fb 	bl	8003978 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 020e 	orr.w	r2, r2, #14
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e00f      	b.n	80037bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0204 	bic.w	r2, r2, #4
 80037aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 020a 	orr.w	r2, r2, #10
 80037ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f042 0201 	orr.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e005      	b.n	8003810 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800380c:	2302      	movs	r3, #2
 800380e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003810:	7dfb      	ldrb	r3, [r7, #23]
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	2204      	movs	r2, #4
 800383c:	409a      	lsls	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d026      	beq.n	8003894 <HAL_DMA_IRQHandler+0x7a>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d021      	beq.n	8003894 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d107      	bne.n	800386e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0204 	bic.w	r2, r2, #4
 800386c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f003 021f 	and.w	r2, r3, #31
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	2104      	movs	r1, #4
 800387c:	fa01 f202 	lsl.w	r2, r1, r2
 8003880:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	2b00      	cmp	r3, #0
 8003888:	d071      	beq.n	800396e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003892:	e06c      	b.n	800396e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2202      	movs	r2, #2
 800389e:	409a      	lsls	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d02e      	beq.n	8003906 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d029      	beq.n	8003906 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10b      	bne.n	80038d8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 020a 	bic.w	r2, r2, #10
 80038ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038dc:	f003 021f 	and.w	r2, r3, #31
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e4:	2102      	movs	r1, #2
 80038e6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d038      	beq.n	800396e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003904:	e033      	b.n	800396e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	f003 031f 	and.w	r3, r3, #31
 800390e:	2208      	movs	r2, #8
 8003910:	409a      	lsls	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d02a      	beq.n	8003970 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f003 0308 	and.w	r3, r3, #8
 8003920:	2b00      	cmp	r3, #0
 8003922:	d025      	beq.n	8003970 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 020e 	bic.w	r2, r2, #14
 8003932:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	f003 021f 	and.w	r2, r3, #31
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	2101      	movs	r1, #1
 8003942:	fa01 f202 	lsl.w	r2, r1, r2
 8003946:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003962:	2b00      	cmp	r3, #0
 8003964:	d004      	beq.n	8003970 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800396e:	bf00      	nop
 8003970:	bf00      	nop
}
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800398e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039a0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f003 021f 	and.w	r2, r3, #31
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2101      	movs	r1, #1
 80039b0:	fa01 f202 	lsl.w	r2, r1, r2
 80039b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b10      	cmp	r3, #16
 80039c4:	d108      	bne.n	80039d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039d6:	e007      	b.n	80039e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	60da      	str	r2, [r3, #12]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	461a      	mov	r2, r3
 8003a02:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d802      	bhi.n	8003a0e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003a08:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	e001      	b.n	8003a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a10:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	3b08      	subs	r3, #8
 8003a1e:	4a12      	ldr	r2, [pc, #72]	; (8003a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a20:	fba2 2303 	umull	r2, r3, r2, r3
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	089b      	lsrs	r3, r3, #2
 8003a2e:	009a      	lsls	r2, r3, #2
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	461a      	mov	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a0b      	ldr	r2, [pc, #44]	; (8003a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	2201      	movs	r2, #1
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40020407 	.word	0x40020407
 8003a60:	40020800 	.word	0x40020800
 8003a64:	40020820 	.word	0x40020820
 8003a68:	cccccccd 	.word	0xcccccccd
 8003a6c:	40020880 	.word	0x40020880

08003a70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a08      	ldr	r2, [pc, #32]	; (8003ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003a92:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003aa4:	bf00      	nop
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	1000823f 	.word	0x1000823f
 8003ab4:	40020940 	.word	0x40020940

08003ab8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ac6:	e15a      	b.n	8003d7e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	2101      	movs	r1, #1
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 814c 	beq.w	8003d78 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x38>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b12      	cmp	r3, #18
 8003aee:	d123      	bne.n	8003b38 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	08da      	lsrs	r2, r3, #3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3208      	adds	r2, #8
 8003af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	220f      	movs	r2, #15
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	08da      	lsrs	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3208      	adds	r2, #8
 8003b32:	6939      	ldr	r1, [r7, #16]
 8003b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	2203      	movs	r2, #3
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 0203 	and.w	r2, r3, #3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d00b      	beq.n	8003b8c <HAL_GPIO_Init+0xd4>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d007      	beq.n	8003b8c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b80:	2b11      	cmp	r3, #17
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b12      	cmp	r3, #18
 8003b8a:	d130      	bne.n	8003bee <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	2203      	movs	r2, #3
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43db      	mvns	r3, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	f003 0201 	and.w	r2, r3, #1
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 80a6 	beq.w	8003d78 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c2c:	4b5b      	ldr	r3, [pc, #364]	; (8003d9c <HAL_GPIO_Init+0x2e4>)
 8003c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c30:	4a5a      	ldr	r2, [pc, #360]	; (8003d9c <HAL_GPIO_Init+0x2e4>)
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	6613      	str	r3, [r2, #96]	; 0x60
 8003c38:	4b58      	ldr	r3, [pc, #352]	; (8003d9c <HAL_GPIO_Init+0x2e4>)
 8003c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c44:	4a56      	ldr	r2, [pc, #344]	; (8003da0 <HAL_GPIO_Init+0x2e8>)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	089b      	lsrs	r3, r3, #2
 8003c4a:	3302      	adds	r3, #2
 8003c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	220f      	movs	r2, #15
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	43db      	mvns	r3, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4013      	ands	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c6e:	d01f      	beq.n	8003cb0 <HAL_GPIO_Init+0x1f8>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a4c      	ldr	r2, [pc, #304]	; (8003da4 <HAL_GPIO_Init+0x2ec>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d019      	beq.n	8003cac <HAL_GPIO_Init+0x1f4>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a4b      	ldr	r2, [pc, #300]	; (8003da8 <HAL_GPIO_Init+0x2f0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d013      	beq.n	8003ca8 <HAL_GPIO_Init+0x1f0>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a4a      	ldr	r2, [pc, #296]	; (8003dac <HAL_GPIO_Init+0x2f4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00d      	beq.n	8003ca4 <HAL_GPIO_Init+0x1ec>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a49      	ldr	r2, [pc, #292]	; (8003db0 <HAL_GPIO_Init+0x2f8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d007      	beq.n	8003ca0 <HAL_GPIO_Init+0x1e8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a48      	ldr	r2, [pc, #288]	; (8003db4 <HAL_GPIO_Init+0x2fc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d101      	bne.n	8003c9c <HAL_GPIO_Init+0x1e4>
 8003c98:	2305      	movs	r3, #5
 8003c9a:	e00a      	b.n	8003cb2 <HAL_GPIO_Init+0x1fa>
 8003c9c:	2306      	movs	r3, #6
 8003c9e:	e008      	b.n	8003cb2 <HAL_GPIO_Init+0x1fa>
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	e006      	b.n	8003cb2 <HAL_GPIO_Init+0x1fa>
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e004      	b.n	8003cb2 <HAL_GPIO_Init+0x1fa>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e002      	b.n	8003cb2 <HAL_GPIO_Init+0x1fa>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <HAL_GPIO_Init+0x1fa>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	f002 0203 	and.w	r2, r2, #3
 8003cb8:	0092      	lsls	r2, r2, #2
 8003cba:	4093      	lsls	r3, r2
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cc2:	4937      	ldr	r1, [pc, #220]	; (8003da0 <HAL_GPIO_Init+0x2e8>)
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	089b      	lsrs	r3, r3, #2
 8003cc8:	3302      	adds	r3, #2
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003cd0:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <HAL_GPIO_Init+0x300>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cf4:	4a30      	ldr	r2, [pc, #192]	; (8003db8 <HAL_GPIO_Init+0x300>)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003cfa:	4b2f      	ldr	r3, [pc, #188]	; (8003db8 <HAL_GPIO_Init+0x300>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	43db      	mvns	r3, r3
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d1e:	4a26      	ldr	r2, [pc, #152]	; (8003db8 <HAL_GPIO_Init+0x300>)
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d24:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <HAL_GPIO_Init+0x300>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d48:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <HAL_GPIO_Init+0x300>)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <HAL_GPIO_Init+0x300>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d72:	4a11      	ldr	r2, [pc, #68]	; (8003db8 <HAL_GPIO_Init+0x300>)
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f47f ae9d 	bne.w	8003ac8 <HAL_GPIO_Init+0x10>
  }
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	40010000 	.word	0x40010000
 8003da4:	48000400 	.word	0x48000400
 8003da8:	48000800 	.word	0x48000800
 8003dac:	48000c00 	.word	0x48000c00
 8003db0:	48001000 	.word	0x48001000
 8003db4:	48001400 	.word	0x48001400
 8003db8:	40010400 	.word	0x40010400

08003dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	807b      	strh	r3, [r7, #2]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dcc:	787b      	ldrb	r3, [r7, #1]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dd2:	887a      	ldrh	r2, [r7, #2]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dd8:	e002      	b.n	8003de0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dda:	887a      	ldrh	r2, [r7, #2]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	887b      	ldrh	r3, [r7, #2]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e04:	887a      	ldrh	r2, [r7, #2]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003e0a:	e002      	b.n	8003e12 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e0c:	887a      	ldrh	r2, [r7, #2]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	619a      	str	r2, [r3, #24]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d141      	bne.n	8003eb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e2e:	4b4b      	ldr	r3, [pc, #300]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3a:	d131      	bne.n	8003ea0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e3c:	4b47      	ldr	r3, [pc, #284]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e42:	4a46      	ldr	r2, [pc, #280]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e4c:	4b43      	ldr	r3, [pc, #268]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e54:	4a41      	ldr	r2, [pc, #260]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e5c:	4b40      	ldr	r3, [pc, #256]	; (8003f60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2232      	movs	r2, #50	; 0x32
 8003e62:	fb02 f303 	mul.w	r3, r2, r3
 8003e66:	4a3f      	ldr	r2, [pc, #252]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	0c9b      	lsrs	r3, r3, #18
 8003e6e:	3301      	adds	r3, #1
 8003e70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e72:	e002      	b.n	8003e7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e7a:	4b38      	ldr	r3, [pc, #224]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e86:	d102      	bne.n	8003e8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1f2      	bne.n	8003e74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e8e:	4b33      	ldr	r3, [pc, #204]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9a:	d158      	bne.n	8003f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e057      	b.n	8003f50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ea0:	4b2e      	ldr	r3, [pc, #184]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea6:	4a2d      	ldr	r2, [pc, #180]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003eb0:	e04d      	b.n	8003f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb8:	d141      	bne.n	8003f3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eba:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec6:	d131      	bne.n	8003f2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ec8:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ece:	4a23      	ldr	r2, [pc, #140]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ed8:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ee0:	4a1e      	ldr	r2, [pc, #120]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ee6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ee8:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2232      	movs	r2, #50	; 0x32
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	4a1c      	ldr	r2, [pc, #112]	; (8003f64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	0c9b      	lsrs	r3, r3, #18
 8003efa:	3301      	adds	r3, #1
 8003efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003efe:	e002      	b.n	8003f06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f06:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f12:	d102      	bne.n	8003f1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f2      	bne.n	8003f00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f1a:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f26:	d112      	bne.n	8003f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e011      	b.n	8003f50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f32:	4a0a      	ldr	r2, [pc, #40]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f3c:	e007      	b.n	8003f4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f3e:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f46:	4a05      	ldr	r2, [pc, #20]	; (8003f5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	40007000 	.word	0x40007000
 8003f60:	20000000 	.word	0x20000000
 8003f64:	431bde83 	.word	0x431bde83

08003f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e308      	b.n	800458c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d075      	beq.n	8004072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f86:	4ba3      	ldr	r3, [pc, #652]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 030c 	and.w	r3, r3, #12
 8003f8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f90:	4ba0      	ldr	r3, [pc, #640]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b0c      	cmp	r3, #12
 8003f9e:	d102      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x3e>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	d002      	beq.n	8003fac <HAL_RCC_OscConfig+0x44>
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d10b      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fac:	4b99      	ldr	r3, [pc, #612]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d05b      	beq.n	8004070 <HAL_RCC_OscConfig+0x108>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d157      	bne.n	8004070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e2e3      	b.n	800458c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fcc:	d106      	bne.n	8003fdc <HAL_RCC_OscConfig+0x74>
 8003fce:	4b91      	ldr	r3, [pc, #580]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a90      	ldr	r2, [pc, #576]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	e01d      	b.n	8004018 <HAL_RCC_OscConfig+0xb0>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x98>
 8003fe6:	4b8b      	ldr	r3, [pc, #556]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a8a      	ldr	r2, [pc, #552]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	4b88      	ldr	r3, [pc, #544]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a87      	ldr	r2, [pc, #540]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	e00b      	b.n	8004018 <HAL_RCC_OscConfig+0xb0>
 8004000:	4b84      	ldr	r3, [pc, #528]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a83      	ldr	r2, [pc, #524]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b81      	ldr	r3, [pc, #516]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a80      	ldr	r2, [pc, #512]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d013      	beq.n	8004048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fd fdc8 	bl	8001bb4 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004028:	f7fd fdc4 	bl	8001bb4 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e2a8      	b.n	800458c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800403a:	4b76      	ldr	r3, [pc, #472]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0xc0>
 8004046:	e014      	b.n	8004072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004048:	f7fd fdb4 	bl	8001bb4 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004050:	f7fd fdb0 	bl	8001bb4 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b64      	cmp	r3, #100	; 0x64
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e294      	b.n	800458c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004062:	4b6c      	ldr	r3, [pc, #432]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0xe8>
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d075      	beq.n	800416a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800407e:	4b65      	ldr	r3, [pc, #404]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 030c 	and.w	r3, r3, #12
 8004086:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004088:	4b62      	ldr	r3, [pc, #392]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f003 0303 	and.w	r3, r3, #3
 8004090:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b0c      	cmp	r3, #12
 8004096:	d102      	bne.n	800409e <HAL_RCC_OscConfig+0x136>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d002      	beq.n	80040a4 <HAL_RCC_OscConfig+0x13c>
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d11f      	bne.n	80040e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040a4:	4b5b      	ldr	r3, [pc, #364]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_OscConfig+0x154>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e267      	b.n	800458c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040bc:	4b55      	ldr	r3, [pc, #340]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	061b      	lsls	r3, r3, #24
 80040ca:	4952      	ldr	r1, [pc, #328]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040d0:	4b51      	ldr	r3, [pc, #324]	; (8004218 <HAL_RCC_OscConfig+0x2b0>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fd fd21 	bl	8001b1c <HAL_InitTick>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d043      	beq.n	8004168 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e253      	b.n	800458c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d023      	beq.n	8004134 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ec:	4b49      	ldr	r3, [pc, #292]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a48      	ldr	r2, [pc, #288]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80040f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fd fd5c 	bl	8001bb4 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004100:	f7fd fd58 	bl	8001bb4 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e23c      	b.n	800458c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004112:	4b40      	ldr	r3, [pc, #256]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411e:	4b3d      	ldr	r3, [pc, #244]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	061b      	lsls	r3, r3, #24
 800412c:	4939      	ldr	r1, [pc, #228]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
 8004132:	e01a      	b.n	800416a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004134:	4b37      	ldr	r3, [pc, #220]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a36      	ldr	r2, [pc, #216]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800413a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800413e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004140:	f7fd fd38 	bl	8001bb4 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004148:	f7fd fd34 	bl	8001bb4 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e218      	b.n	800458c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800415a:	4b2e      	ldr	r3, [pc, #184]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1f0      	bne.n	8004148 <HAL_RCC_OscConfig+0x1e0>
 8004166:	e000      	b.n	800416a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004168:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d03c      	beq.n	80041f0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01c      	beq.n	80041b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800417e:	4b25      	ldr	r3, [pc, #148]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004184:	4a23      	ldr	r2, [pc, #140]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418e:	f7fd fd11 	bl	8001bb4 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004196:	f7fd fd0d 	bl	8001bb4 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e1f1      	b.n	800458c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80041aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0ef      	beq.n	8004196 <HAL_RCC_OscConfig+0x22e>
 80041b6:	e01b      	b.n	80041f0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b8:	4b16      	ldr	r3, [pc, #88]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80041ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041be:	4a15      	ldr	r2, [pc, #84]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	f023 0301 	bic.w	r3, r3, #1
 80041c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fd fcf4 	bl	8001bb4 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d0:	f7fd fcf0 	bl	8001bb4 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e1d4      	b.n	800458c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041e2:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ef      	bne.n	80041d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 80ab 	beq.w	8004354 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041fe:	2300      	movs	r3, #0
 8004200:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004202:	4b04      	ldr	r3, [pc, #16]	; (8004214 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_RCC_OscConfig+0x2b4>
 800420e:	2301      	movs	r3, #1
 8004210:	e005      	b.n	800421e <HAL_RCC_OscConfig+0x2b6>
 8004212:	bf00      	nop
 8004214:	40021000 	.word	0x40021000
 8004218:	20000004 	.word	0x20000004
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004222:	4baf      	ldr	r3, [pc, #700]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 8004224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004226:	4aae      	ldr	r2, [pc, #696]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 8004228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422c:	6593      	str	r3, [r2, #88]	; 0x58
 800422e:	4bac      	ldr	r3, [pc, #688]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800423a:	2301      	movs	r3, #1
 800423c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423e:	4ba9      	ldr	r3, [pc, #676]	; (80044e4 <HAL_RCC_OscConfig+0x57c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d118      	bne.n	800427c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800424a:	4ba6      	ldr	r3, [pc, #664]	; (80044e4 <HAL_RCC_OscConfig+0x57c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4aa5      	ldr	r2, [pc, #660]	; (80044e4 <HAL_RCC_OscConfig+0x57c>)
 8004250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004256:	f7fd fcad 	bl	8001bb4 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800425e:	f7fd fca9 	bl	8001bb4 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e18d      	b.n	800458c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004270:	4b9c      	ldr	r3, [pc, #624]	; (80044e4 <HAL_RCC_OscConfig+0x57c>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f0      	beq.n	800425e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d108      	bne.n	8004296 <HAL_RCC_OscConfig+0x32e>
 8004284:	4b96      	ldr	r3, [pc, #600]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	4a95      	ldr	r2, [pc, #596]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004294:	e024      	b.n	80042e0 <HAL_RCC_OscConfig+0x378>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b05      	cmp	r3, #5
 800429c:	d110      	bne.n	80042c0 <HAL_RCC_OscConfig+0x358>
 800429e:	4b90      	ldr	r3, [pc, #576]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80042a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a4:	4a8e      	ldr	r2, [pc, #568]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80042a6:	f043 0304 	orr.w	r3, r3, #4
 80042aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ae:	4b8c      	ldr	r3, [pc, #560]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	4a8a      	ldr	r2, [pc, #552]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042be:	e00f      	b.n	80042e0 <HAL_RCC_OscConfig+0x378>
 80042c0:	4b87      	ldr	r3, [pc, #540]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c6:	4a86      	ldr	r2, [pc, #536]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042d0:	4b83      	ldr	r3, [pc, #524]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	4a82      	ldr	r2, [pc, #520]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80042d8:	f023 0304 	bic.w	r3, r3, #4
 80042dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d016      	beq.n	8004316 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7fd fc64 	bl	8001bb4 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f0:	f7fd fc60 	bl	8001bb4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e142      	b.n	800458c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004306:	4b76      	ldr	r3, [pc, #472]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ed      	beq.n	80042f0 <HAL_RCC_OscConfig+0x388>
 8004314:	e015      	b.n	8004342 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004316:	f7fd fc4d 	bl	8001bb4 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800431c:	e00a      	b.n	8004334 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431e:	f7fd fc49 	bl	8001bb4 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	f241 3288 	movw	r2, #5000	; 0x1388
 800432c:	4293      	cmp	r3, r2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e12b      	b.n	800458c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004334:	4b6a      	ldr	r3, [pc, #424]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1ed      	bne.n	800431e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004342:	7ffb      	ldrb	r3, [r7, #31]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d105      	bne.n	8004354 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004348:	4b65      	ldr	r3, [pc, #404]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	4a64      	ldr	r2, [pc, #400]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 800434e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004352:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d03c      	beq.n	80043da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01c      	beq.n	80043a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004368:	4b5d      	ldr	r3, [pc, #372]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 800436a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800436e:	4a5c      	ldr	r2, [pc, #368]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004378:	f7fd fc1c 	bl	8001bb4 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004380:	f7fd fc18 	bl	8001bb4 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e0fc      	b.n	800458c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004392:	4b53      	ldr	r3, [pc, #332]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 8004394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0ef      	beq.n	8004380 <HAL_RCC_OscConfig+0x418>
 80043a0:	e01b      	b.n	80043da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043a2:	4b4f      	ldr	r3, [pc, #316]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80043a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043a8:	4a4d      	ldr	r2, [pc, #308]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b2:	f7fd fbff 	bl	8001bb4 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043ba:	f7fd fbfb 	bl	8001bb4 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e0df      	b.n	800458c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043cc:	4b44      	ldr	r3, [pc, #272]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80043ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1ef      	bne.n	80043ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	f000 80d3 	beq.w	800458a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043e4:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 030c 	and.w	r3, r3, #12
 80043ec:	2b0c      	cmp	r3, #12
 80043ee:	f000 808d 	beq.w	800450c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d15a      	bne.n	80044b0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fa:	4b39      	ldr	r3, [pc, #228]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a38      	ldr	r2, [pc, #224]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 8004400:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fd fbd5 	bl	8001bb4 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440e:	f7fd fbd1 	bl	8001bb4 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e0b5      	b.n	800458c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004420:	4b2f      	ldr	r3, [pc, #188]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1f0      	bne.n	800440e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800442c:	4b2c      	ldr	r3, [pc, #176]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	4b2d      	ldr	r3, [pc, #180]	; (80044e8 <HAL_RCC_OscConfig+0x580>)
 8004432:	4013      	ands	r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6a11      	ldr	r1, [r2, #32]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800443c:	3a01      	subs	r2, #1
 800443e:	0112      	lsls	r2, r2, #4
 8004440:	4311      	orrs	r1, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004446:	0212      	lsls	r2, r2, #8
 8004448:	4311      	orrs	r1, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800444e:	0852      	lsrs	r2, r2, #1
 8004450:	3a01      	subs	r2, #1
 8004452:	0552      	lsls	r2, r2, #21
 8004454:	4311      	orrs	r1, r2
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800445a:	0852      	lsrs	r2, r2, #1
 800445c:	3a01      	subs	r2, #1
 800445e:	0652      	lsls	r2, r2, #25
 8004460:	4311      	orrs	r1, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004466:	06d2      	lsls	r2, r2, #27
 8004468:	430a      	orrs	r2, r1
 800446a:	491d      	ldr	r1, [pc, #116]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 800446c:	4313      	orrs	r3, r2
 800446e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004470:	4b1b      	ldr	r3, [pc, #108]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a1a      	ldr	r2, [pc, #104]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 8004476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800447c:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4a17      	ldr	r2, [pc, #92]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 8004482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004486:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fd fb94 	bl	8001bb4 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004490:	f7fd fb90 	bl	8001bb4 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e074      	b.n	800458c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a2:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0x528>
 80044ae:	e06c      	b.n	800458a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80044b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044bc:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a07      	ldr	r2, [pc, #28]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80044c2:	f023 0303 	bic.w	r3, r3, #3
 80044c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <HAL_RCC_OscConfig+0x578>)
 80044ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80044d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d8:	f7fd fb6c 	bl	8001bb4 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044de:	e00e      	b.n	80044fe <HAL_RCC_OscConfig+0x596>
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40007000 	.word	0x40007000
 80044e8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fd fb62 	bl	8001bb4 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e046      	b.n	800458c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044fe:	4b25      	ldr	r3, [pc, #148]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x584>
 800450a:	e03e      	b.n	800458a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d101      	bne.n	8004518 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e039      	b.n	800458c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004518:	4b1e      	ldr	r3, [pc, #120]	; (8004594 <HAL_RCC_OscConfig+0x62c>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f003 0203 	and.w	r2, r3, #3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	429a      	cmp	r2, r3
 800452a:	d12c      	bne.n	8004586 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	3b01      	subs	r3, #1
 8004538:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d123      	bne.n	8004586 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004548:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d11b      	bne.n	8004586 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d113      	bne.n	8004586 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004568:	085b      	lsrs	r3, r3, #1
 800456a:	3b01      	subs	r3, #1
 800456c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d109      	bne.n	8004586 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	3b01      	subs	r3, #1
 8004580:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d001      	beq.n	800458a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3720      	adds	r7, #32
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40021000 	.word	0x40021000

08004598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e11e      	b.n	80047ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045b0:	4b91      	ldr	r3, [pc, #580]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d910      	bls.n	80045e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045be:	4b8e      	ldr	r3, [pc, #568]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 020f 	bic.w	r2, r3, #15
 80045c6:	498c      	ldr	r1, [pc, #560]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ce:	4b8a      	ldr	r3, [pc, #552]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e106      	b.n	80047ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d073      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b03      	cmp	r3, #3
 80045f2:	d129      	bne.n	8004648 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f4:	4b81      	ldr	r3, [pc, #516]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0f4      	b.n	80047ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004604:	f000 f99e 	bl	8004944 <RCC_GetSysClockFreqFromPLLSource>
 8004608:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4a7c      	ldr	r2, [pc, #496]	; (8004800 <HAL_RCC_ClockConfig+0x268>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d93f      	bls.n	8004692 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004612:	4b7a      	ldr	r3, [pc, #488]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004626:	2b00      	cmp	r3, #0
 8004628:	d033      	beq.n	8004692 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800462e:	2b00      	cmp	r3, #0
 8004630:	d12f      	bne.n	8004692 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004632:	4b72      	ldr	r3, [pc, #456]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800463a:	4a70      	ldr	r2, [pc, #448]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 800463c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004640:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	e024      	b.n	8004692 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d107      	bne.n	8004660 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004650:	4b6a      	ldr	r3, [pc, #424]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0c6      	b.n	80047ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004660:	4b66      	ldr	r3, [pc, #408]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0be      	b.n	80047ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004670:	f000 f8ce 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8004674:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4a61      	ldr	r2, [pc, #388]	; (8004800 <HAL_RCC_ClockConfig+0x268>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d909      	bls.n	8004692 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800467e:	4b5f      	ldr	r3, [pc, #380]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004686:	4a5d      	ldr	r2, [pc, #372]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004692:	4b5a      	ldr	r3, [pc, #360]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f023 0203 	bic.w	r2, r3, #3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4957      	ldr	r1, [pc, #348]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046a4:	f7fd fa86 	bl	8001bb4 <HAL_GetTick>
 80046a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046aa:	e00a      	b.n	80046c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ac:	f7fd fa82 	bl	8001bb4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e095      	b.n	80047ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c2:	4b4e      	ldr	r3, [pc, #312]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 020c 	and.w	r2, r3, #12
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d1eb      	bne.n	80046ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d023      	beq.n	8004728 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046ec:	4b43      	ldr	r3, [pc, #268]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	4a42      	ldr	r2, [pc, #264]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80046f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004704:	4b3d      	ldr	r3, [pc, #244]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800470c:	4a3b      	ldr	r2, [pc, #236]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 800470e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004712:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004714:	4b39      	ldr	r3, [pc, #228]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4936      	ldr	r1, [pc, #216]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004722:	4313      	orrs	r3, r2
 8004724:	608b      	str	r3, [r1, #8]
 8004726:	e008      	b.n	800473a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2b80      	cmp	r3, #128	; 0x80
 800472c:	d105      	bne.n	800473a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800472e:	4b33      	ldr	r3, [pc, #204]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	4a32      	ldr	r2, [pc, #200]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004734:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004738:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800473a:	4b2f      	ldr	r3, [pc, #188]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d21d      	bcs.n	8004784 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004748:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 020f 	bic.w	r2, r3, #15
 8004750:	4929      	ldr	r1, [pc, #164]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	4313      	orrs	r3, r2
 8004756:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004758:	f7fd fa2c 	bl	8001bb4 <HAL_GetTick>
 800475c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	e00a      	b.n	8004776 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004760:	f7fd fa28 	bl	8001bb4 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f241 3288 	movw	r2, #5000	; 0x1388
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e03b      	b.n	80047ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004776:	4b20      	ldr	r3, [pc, #128]	; (80047f8 <HAL_RCC_ClockConfig+0x260>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d1ed      	bne.n	8004760 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004790:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4917      	ldr	r1, [pc, #92]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ae:	4b13      	ldr	r3, [pc, #76]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	490f      	ldr	r1, [pc, #60]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047c2:	f000 f825 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80047c6:	4601      	mov	r1, r0
 80047c8:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <HAL_RCC_ClockConfig+0x264>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	4a0c      	ldr	r2, [pc, #48]	; (8004804 <HAL_RCC_ClockConfig+0x26c>)
 80047d4:	5cd3      	ldrb	r3, [r2, r3]
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	fa21 f303 	lsr.w	r3, r1, r3
 80047de:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <HAL_RCC_ClockConfig+0x270>)
 80047e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80047e2:	4b0a      	ldr	r3, [pc, #40]	; (800480c <HAL_RCC_ClockConfig+0x274>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd f998 	bl	8001b1c <HAL_InitTick>
 80047ec:	4603      	mov	r3, r0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40022000 	.word	0x40022000
 80047fc:	40021000 	.word	0x40021000
 8004800:	04c4b400 	.word	0x04c4b400
 8004804:	0800ad40 	.word	0x0800ad40
 8004808:	20000000 	.word	0x20000000
 800480c:	20000004 	.word	0x20000004

08004810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004816:	4b2c      	ldr	r3, [pc, #176]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f003 030c 	and.w	r3, r3, #12
 800481e:	2b04      	cmp	r3, #4
 8004820:	d102      	bne.n	8004828 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004822:	4b2a      	ldr	r3, [pc, #168]	; (80048cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	e047      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004828:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 030c 	and.w	r3, r3, #12
 8004830:	2b08      	cmp	r3, #8
 8004832:	d102      	bne.n	800483a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004834:	4b26      	ldr	r3, [pc, #152]	; (80048d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	e03e      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800483a:	4b23      	ldr	r3, [pc, #140]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	2b0c      	cmp	r3, #12
 8004844:	d136      	bne.n	80048b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004846:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004850:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	3301      	adds	r3, #1
 800485c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d10c      	bne.n	800487e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004864:	4a1a      	ldr	r2, [pc, #104]	; (80048d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	4a16      	ldr	r2, [pc, #88]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800486e:	68d2      	ldr	r2, [r2, #12]
 8004870:	0a12      	lsrs	r2, r2, #8
 8004872:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004876:	fb02 f303 	mul.w	r3, r2, r3
 800487a:	617b      	str	r3, [r7, #20]
      break;
 800487c:	e00c      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800487e:	4a13      	ldr	r2, [pc, #76]	; (80048cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	4a10      	ldr	r2, [pc, #64]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004888:	68d2      	ldr	r2, [r2, #12]
 800488a:	0a12      	lsrs	r2, r2, #8
 800488c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004890:	fb02 f303 	mul.w	r3, r2, r3
 8004894:	617b      	str	r3, [r7, #20]
      break;
 8004896:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	0e5b      	lsrs	r3, r3, #25
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	3301      	adds	r3, #1
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	e001      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048b8:	693b      	ldr	r3, [r7, #16]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	00f42400 	.word	0x00f42400
 80048d0:	016e3600 	.word	0x016e3600

080048d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048da:	681b      	ldr	r3, [r3, #0]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000000 	.word	0x20000000

080048ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048f0:	f7ff fff0 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 80048f4:	4601      	mov	r1, r0
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4a04      	ldr	r2, [pc, #16]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004902:	5cd3      	ldrb	r3, [r2, r3]
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	fa21 f303 	lsr.w	r3, r1, r3
}
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000
 8004914:	0800ad50 	.word	0x0800ad50

08004918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800491c:	f7ff ffda 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 8004920:	4601      	mov	r1, r0
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	0adb      	lsrs	r3, r3, #11
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4a04      	ldr	r2, [pc, #16]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x28>)
 800492e:	5cd3      	ldrb	r3, [r2, r3]
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40021000 	.word	0x40021000
 8004940:	0800ad50 	.word	0x0800ad50

08004944 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800494a:	4b1e      	ldr	r3, [pc, #120]	; (80049c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004954:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	3301      	adds	r3, #1
 8004960:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b03      	cmp	r3, #3
 8004966:	d10c      	bne.n	8004982 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004968:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	4a14      	ldr	r2, [pc, #80]	; (80049c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004972:	68d2      	ldr	r2, [r2, #12]
 8004974:	0a12      	lsrs	r2, r2, #8
 8004976:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	617b      	str	r3, [r7, #20]
    break;
 8004980:	e00c      	b.n	800499c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004982:	4a12      	ldr	r2, [pc, #72]	; (80049cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	fbb2 f3f3 	udiv	r3, r2, r3
 800498a:	4a0e      	ldr	r2, [pc, #56]	; (80049c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800498c:	68d2      	ldr	r2, [r2, #12]
 800498e:	0a12      	lsrs	r2, r2, #8
 8004990:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004994:	fb02 f303 	mul.w	r3, r2, r3
 8004998:	617b      	str	r3, [r7, #20]
    break;
 800499a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800499c:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	0e5b      	lsrs	r3, r3, #25
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	3301      	adds	r3, #1
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80049b6:	687b      	ldr	r3, [r7, #4]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	40021000 	.word	0x40021000
 80049c8:	016e3600 	.word	0x016e3600
 80049cc:	00f42400 	.word	0x00f42400

080049d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049d8:	2300      	movs	r3, #0
 80049da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049dc:	2300      	movs	r3, #0
 80049de:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8098 	beq.w	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ee:	2300      	movs	r3, #0
 80049f0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049f2:	4b43      	ldr	r3, [pc, #268]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10d      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049fe:	4b40      	ldr	r3, [pc, #256]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a02:	4a3f      	ldr	r2, [pc, #252]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a08:	6593      	str	r3, [r2, #88]	; 0x58
 8004a0a:	4b3d      	ldr	r3, [pc, #244]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a16:	2301      	movs	r3, #1
 8004a18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a1a:	4b3a      	ldr	r3, [pc, #232]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a39      	ldr	r2, [pc, #228]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a26:	f7fd f8c5 	bl	8001bb4 <HAL_GetTick>
 8004a2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a2c:	e009      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a2e:	f7fd f8c1 	bl	8001bb4 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d902      	bls.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	74fb      	strb	r3, [r7, #19]
        break;
 8004a40:	e005      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a42:	4b30      	ldr	r3, [pc, #192]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0ef      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d159      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a54:	4b2a      	ldr	r3, [pc, #168]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d01e      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d019      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a70:	4b23      	ldr	r3, [pc, #140]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a7c:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a82:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a8c:	4b1c      	ldr	r3, [pc, #112]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a92:	4a1b      	ldr	r2, [pc, #108]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a9c:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d016      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aae:	f7fd f881 	bl	8001bb4 <HAL_GetTick>
 8004ab2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab4:	e00b      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab6:	f7fd f87d 	bl	8001bb4 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d902      	bls.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	74fb      	strb	r3, [r7, #19]
            break;
 8004acc:	e006      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ace:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0ec      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10b      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ae2:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	4903      	ldr	r1, [pc, #12]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004af8:	e008      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004afa:	7cfb      	ldrb	r3, [r7, #19]
 8004afc:	74bb      	strb	r3, [r7, #18]
 8004afe:	e005      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b00:	40021000 	.word	0x40021000
 8004b04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b08:	7cfb      	ldrb	r3, [r7, #19]
 8004b0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b0c:	7c7b      	ldrb	r3, [r7, #17]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d105      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b12:	4ba6      	ldr	r3, [pc, #664]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b16:	4aa5      	ldr	r2, [pc, #660]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b2a:	4ba0      	ldr	r3, [pc, #640]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b30:	f023 0203 	bic.w	r2, r3, #3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	499c      	ldr	r1, [pc, #624]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b4c:	4b97      	ldr	r3, [pc, #604]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f023 020c 	bic.w	r2, r3, #12
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	4994      	ldr	r1, [pc, #592]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b6e:	4b8f      	ldr	r3, [pc, #572]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	498b      	ldr	r1, [pc, #556]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b90:	4b86      	ldr	r3, [pc, #536]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	4983      	ldr	r1, [pc, #524]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bb2:	4b7e      	ldr	r3, [pc, #504]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	497a      	ldr	r1, [pc, #488]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bd4:	4b75      	ldr	r3, [pc, #468]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bda:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	4972      	ldr	r1, [pc, #456]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bf6:	4b6d      	ldr	r3, [pc, #436]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	4969      	ldr	r1, [pc, #420]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c18:	4b64      	ldr	r3, [pc, #400]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	4961      	ldr	r1, [pc, #388]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c3a:	4b5c      	ldr	r3, [pc, #368]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	4958      	ldr	r1, [pc, #352]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d015      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c5c:	4b53      	ldr	r3, [pc, #332]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	4950      	ldr	r1, [pc, #320]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c7a:	d105      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c7c:	4b4b      	ldr	r3, [pc, #300]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4a4a      	ldr	r2, [pc, #296]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d015      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c94:	4b45      	ldr	r3, [pc, #276]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	4942      	ldr	r1, [pc, #264]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cb2:	d105      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb4:	4b3d      	ldr	r3, [pc, #244]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4a3c      	ldr	r2, [pc, #240]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cbe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d015      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ccc:	4b37      	ldr	r3, [pc, #220]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	4934      	ldr	r1, [pc, #208]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cea:	d105      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cec:	4b2f      	ldr	r3, [pc, #188]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	4a2e      	ldr	r2, [pc, #184]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cf6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d015      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d04:	4b29      	ldr	r3, [pc, #164]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	4926      	ldr	r1, [pc, #152]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d22:	d105      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d24:	4b21      	ldr	r3, [pc, #132]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	4a20      	ldr	r2, [pc, #128]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d015      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	4918      	ldr	r1, [pc, #96]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d5a:	d105      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d5c:	4b13      	ldr	r3, [pc, #76]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	4a12      	ldr	r2, [pc, #72]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d66:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d015      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d74:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d82:	490a      	ldr	r1, [pc, #40]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d92:	d105      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d94:	4b05      	ldr	r3, [pc, #20]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4a04      	ldr	r2, [pc, #16]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004da0:	7cbb      	ldrb	r3, [r7, #18]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000

08004db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e01d      	b.n	8004dfe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fc fd68 	bl	80018ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f000 faba 	bl	8005368 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0201 	orr.w	r2, r2, #1
 8004e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	4b0c      	ldr	r3, [pc, #48]	; (8004e58 <HAL_TIM_Base_Start_IT+0x50>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b06      	cmp	r3, #6
 8004e30:	d00b      	beq.n	8004e4a <HAL_TIM_Base_Start_IT+0x42>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e38:	d007      	beq.n	8004e4a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f042 0201 	orr.w	r2, r2, #1
 8004e48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	00010007 	.word	0x00010007

08004e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d122      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d11b      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f06f 0202 	mvn.w	r2, #2
 8004e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fa44 	bl	800532c <HAL_TIM_IC_CaptureCallback>
 8004ea4:	e005      	b.n	8004eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fa36 	bl	8005318 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fa47 	bl	8005340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d122      	bne.n	8004f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d11b      	bne.n	8004f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0204 	mvn.w	r2, #4
 8004edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fa1a 	bl	800532c <HAL_TIM_IC_CaptureCallback>
 8004ef8:	e005      	b.n	8004f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fa0c 	bl	8005318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fa1d 	bl	8005340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d122      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d11b      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0208 	mvn.w	r2, #8
 8004f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2204      	movs	r2, #4
 8004f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f9f0 	bl	800532c <HAL_TIM_IC_CaptureCallback>
 8004f4c:	e005      	b.n	8004f5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f9e2 	bl	8005318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f9f3 	bl	8005340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b10      	cmp	r3, #16
 8004f6c:	d122      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b10      	cmp	r3, #16
 8004f7a:	d11b      	bne.n	8004fb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0210 	mvn.w	r2, #16
 8004f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2208      	movs	r2, #8
 8004f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f9c6 	bl	800532c <HAL_TIM_IC_CaptureCallback>
 8004fa0:	e005      	b.n	8004fae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f9b8 	bl	8005318 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f9c9 	bl	8005340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d10e      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d107      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0201 	mvn.w	r2, #1
 8004fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7fb fffc 	bl	8000fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fea:	2b80      	cmp	r3, #128	; 0x80
 8004fec:	d10e      	bne.n	800500c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff8:	2b80      	cmp	r3, #128	; 0x80
 8004ffa:	d107      	bne.n	800500c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fbe2 	bl	80057d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501a:	d10e      	bne.n	800503a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005026:	2b80      	cmp	r3, #128	; 0x80
 8005028:	d107      	bne.n	800503a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fbd5 	bl	80057e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005044:	2b40      	cmp	r3, #64	; 0x40
 8005046:	d10e      	bne.n	8005066 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005052:	2b40      	cmp	r3, #64	; 0x40
 8005054:	d107      	bne.n	8005066 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800505e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f977 	bl	8005354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b20      	cmp	r3, #32
 8005072:	d10e      	bne.n	8005092 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b20      	cmp	r3, #32
 8005080:	d107      	bne.n	8005092 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f06f 0220 	mvn.w	r2, #32
 800508a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fb95 	bl	80057bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800509c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a0:	d10f      	bne.n	80050c2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050b0:	d107      	bne.n	80050c2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80050ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fb9b 	bl	80057f8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050d0:	d10f      	bne.n	80050f2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050e0:	d107      	bne.n	80050f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80050ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fb8d 	bl	800580c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005100:	d10f      	bne.n	8005122 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800510c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005110:	d107      	bne.n	8005122 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800511a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fb7f 	bl	8005820 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800512c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005130:	d10f      	bne.n	8005152 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800513c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005140:	d107      	bne.n	8005152 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800514a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fb71 	bl	8005834 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_TIM_ConfigClockSource+0x18>
 8005170:	2302      	movs	r3, #2
 8005172:	e0c3      	b.n	80052fc <HAL_TIM_ConfigClockSource+0x1a0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005192:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005196:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800519e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b70      	cmp	r3, #112	; 0x70
 80051ae:	d038      	beq.n	8005222 <HAL_TIM_ConfigClockSource+0xc6>
 80051b0:	2b70      	cmp	r3, #112	; 0x70
 80051b2:	d815      	bhi.n	80051e0 <HAL_TIM_ConfigClockSource+0x84>
 80051b4:	2b30      	cmp	r3, #48	; 0x30
 80051b6:	f000 808e 	beq.w	80052d6 <HAL_TIM_ConfigClockSource+0x17a>
 80051ba:	2b30      	cmp	r3, #48	; 0x30
 80051bc:	d809      	bhi.n	80051d2 <HAL_TIM_ConfigClockSource+0x76>
 80051be:	2b10      	cmp	r3, #16
 80051c0:	f000 8089 	beq.w	80052d6 <HAL_TIM_ConfigClockSource+0x17a>
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	f000 8086 	beq.w	80052d6 <HAL_TIM_ConfigClockSource+0x17a>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8083 	beq.w	80052d6 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80051d0:	e08b      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80051d2:	2b50      	cmp	r3, #80	; 0x50
 80051d4:	d04f      	beq.n	8005276 <HAL_TIM_ConfigClockSource+0x11a>
 80051d6:	2b60      	cmp	r3, #96	; 0x60
 80051d8:	d05d      	beq.n	8005296 <HAL_TIM_ConfigClockSource+0x13a>
 80051da:	2b40      	cmp	r3, #64	; 0x40
 80051dc:	d06b      	beq.n	80052b6 <HAL_TIM_ConfigClockSource+0x15a>
      break;
 80051de:	e084      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 80051e0:	4a48      	ldr	r2, [pc, #288]	; (8005304 <HAL_TIM_ConfigClockSource+0x1a8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d077      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x17a>
 80051e6:	4a47      	ldr	r2, [pc, #284]	; (8005304 <HAL_TIM_ConfigClockSource+0x1a8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d809      	bhi.n	8005200 <HAL_TIM_ConfigClockSource+0xa4>
 80051ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f0:	d02e      	beq.n	8005250 <HAL_TIM_ConfigClockSource+0xf4>
 80051f2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80051f6:	d06e      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x17a>
 80051f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fc:	d074      	beq.n	80052e8 <HAL_TIM_ConfigClockSource+0x18c>
      break;
 80051fe:	e074      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005200:	4a41      	ldr	r2, [pc, #260]	; (8005308 <HAL_TIM_ConfigClockSource+0x1ac>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d067      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x17a>
 8005206:	4a40      	ldr	r2, [pc, #256]	; (8005308 <HAL_TIM_ConfigClockSource+0x1ac>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d803      	bhi.n	8005214 <HAL_TIM_ConfigClockSource+0xb8>
 800520c:	4a3f      	ldr	r2, [pc, #252]	; (800530c <HAL_TIM_ConfigClockSource+0x1b0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d061      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8005212:	e06a      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x18e>
  switch (sClockSourceConfig->ClockSource)
 8005214:	4a3e      	ldr	r2, [pc, #248]	; (8005310 <HAL_TIM_ConfigClockSource+0x1b4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d05d      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x17a>
 800521a:	4a3e      	ldr	r2, [pc, #248]	; (8005314 <HAL_TIM_ConfigClockSource+0x1b8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d05a      	beq.n	80052d6 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8005220:	e063      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6899      	ldr	r1, [r3, #8]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f000 f9a5 	bl	8005580 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005244:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	609a      	str	r2, [r3, #8]
      break;
 800524e:	e04c      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ETR_SetConfig(htim->Instance,
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	6899      	ldr	r1, [r3, #8]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f000 f98e 	bl	8005580 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005272:	609a      	str	r2, [r3, #8]
      break;
 8005274:	e039      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6859      	ldr	r1, [r3, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	461a      	mov	r2, r3
 8005284:	f000 f900 	bl	8005488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2150      	movs	r1, #80	; 0x50
 800528e:	4618      	mov	r0, r3
 8005290:	f000 f959 	bl	8005546 <TIM_ITRx_SetConfig>
      break;
 8005294:	e029      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6859      	ldr	r1, [r3, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	461a      	mov	r2, r3
 80052a4:	f000 f91f 	bl	80054e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2160      	movs	r1, #96	; 0x60
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 f949 	bl	8005546 <TIM_ITRx_SetConfig>
      break;
 80052b4:	e019      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x18e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	6859      	ldr	r1, [r3, #4]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f000 f8e0 	bl	8005488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2140      	movs	r1, #64	; 0x40
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 f939 	bl	8005546 <TIM_ITRx_SetConfig>
      break;
 80052d4:	e009      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x18e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4619      	mov	r1, r3
 80052e0:	4610      	mov	r0, r2
 80052e2:	f000 f930 	bl	8005546 <TIM_ITRx_SetConfig>
      break;
 80052e6:	e000      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x18e>
      break;
 80052e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	00100020 	.word	0x00100020
 8005308:	00100040 	.word	0x00100040
 800530c:	00100030 	.word	0x00100030
 8005310:	00100060 	.word	0x00100060
 8005314:	00100070 	.word	0x00100070

08005318 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a3c      	ldr	r2, [pc, #240]	; (800546c <TIM_Base_SetConfig+0x104>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00f      	beq.n	80053a0 <TIM_Base_SetConfig+0x38>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005386:	d00b      	beq.n	80053a0 <TIM_Base_SetConfig+0x38>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a39      	ldr	r2, [pc, #228]	; (8005470 <TIM_Base_SetConfig+0x108>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d007      	beq.n	80053a0 <TIM_Base_SetConfig+0x38>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a38      	ldr	r2, [pc, #224]	; (8005474 <TIM_Base_SetConfig+0x10c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d003      	beq.n	80053a0 <TIM_Base_SetConfig+0x38>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a37      	ldr	r2, [pc, #220]	; (8005478 <TIM_Base_SetConfig+0x110>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d108      	bne.n	80053b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2d      	ldr	r2, [pc, #180]	; (800546c <TIM_Base_SetConfig+0x104>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d01b      	beq.n	80053f2 <TIM_Base_SetConfig+0x8a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053c0:	d017      	beq.n	80053f2 <TIM_Base_SetConfig+0x8a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a2a      	ldr	r2, [pc, #168]	; (8005470 <TIM_Base_SetConfig+0x108>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d013      	beq.n	80053f2 <TIM_Base_SetConfig+0x8a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a29      	ldr	r2, [pc, #164]	; (8005474 <TIM_Base_SetConfig+0x10c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00f      	beq.n	80053f2 <TIM_Base_SetConfig+0x8a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a28      	ldr	r2, [pc, #160]	; (8005478 <TIM_Base_SetConfig+0x110>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00b      	beq.n	80053f2 <TIM_Base_SetConfig+0x8a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a27      	ldr	r2, [pc, #156]	; (800547c <TIM_Base_SetConfig+0x114>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d007      	beq.n	80053f2 <TIM_Base_SetConfig+0x8a>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a26      	ldr	r2, [pc, #152]	; (8005480 <TIM_Base_SetConfig+0x118>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d003      	beq.n	80053f2 <TIM_Base_SetConfig+0x8a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a25      	ldr	r2, [pc, #148]	; (8005484 <TIM_Base_SetConfig+0x11c>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d108      	bne.n	8005404 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4313      	orrs	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a10      	ldr	r2, [pc, #64]	; (800546c <TIM_Base_SetConfig+0x104>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d00f      	beq.n	8005450 <TIM_Base_SetConfig+0xe8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a11      	ldr	r2, [pc, #68]	; (8005478 <TIM_Base_SetConfig+0x110>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00b      	beq.n	8005450 <TIM_Base_SetConfig+0xe8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a10      	ldr	r2, [pc, #64]	; (800547c <TIM_Base_SetConfig+0x114>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <TIM_Base_SetConfig+0xe8>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a0f      	ldr	r2, [pc, #60]	; (8005480 <TIM_Base_SetConfig+0x118>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d003      	beq.n	8005450 <TIM_Base_SetConfig+0xe8>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a0e      	ldr	r2, [pc, #56]	; (8005484 <TIM_Base_SetConfig+0x11c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d103      	bne.n	8005458 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	615a      	str	r2, [r3, #20]
}
 800545e:	bf00      	nop
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	40012c00 	.word	0x40012c00
 8005470:	40000400 	.word	0x40000400
 8005474:	40000800 	.word	0x40000800
 8005478:	40013400 	.word	0x40013400
 800547c:	40014000 	.word	0x40014000
 8005480:	40014400 	.word	0x40014400
 8005484:	40014800 	.word	0x40014800

08005488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f023 0201 	bic.w	r2, r3, #1
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f023 030a 	bic.w	r3, r3, #10
 80054c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b087      	sub	sp, #28
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	f023 0210 	bic.w	r2, r3, #16
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005510:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	031b      	lsls	r3, r3, #12
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005522:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
 800554e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800555c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005560:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	f043 0307 	orr.w	r3, r3, #7
 800556c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	609a      	str	r2, [r3, #8]
}
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800559a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	021a      	lsls	r2, r3, #8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	bf00      	nop
 80055b6:	371c      	adds	r7, #28
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e047      	b.n	8005668 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1d      	ldr	r2, [pc, #116]	; (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d004      	beq.n	800560c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a1c      	ldr	r2, [pc, #112]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d108      	bne.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005612:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005628:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800563a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	4313      	orrs	r3, r2
 8005644:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	40012c00 	.word	0x40012c00
 8005678:	40013400 	.word	0x40013400

0800567c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005694:	2302      	movs	r3, #2
 8005696:	e087      	b.n	80057a8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	041b      	lsls	r3, r3, #16
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a27      	ldr	r2, [pc, #156]	; (80057b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d004      	beq.n	8005726 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a25      	ldr	r2, [pc, #148]	; (80057b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d106      	bne.n	8005734 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1e      	ldr	r2, [pc, #120]	; (80057b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d126      	bne.n	8005796 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005752:	051b      	lsls	r3, r3, #20
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a0e      	ldr	r2, [pc, #56]	; (80057b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a0d      	ldr	r2, [pc, #52]	; (80057b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d106      	bne.n	8005796 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	40012c00 	.word	0x40012c00
 80057b8:	40013400 	.word	0x40013400

080057bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e042      	b.n	80058e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005860:	2b00      	cmp	r3, #0
 8005862:	d106      	bne.n	8005872 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7fc f843 	bl	80018f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2224      	movs	r2, #36	; 0x24
 8005876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f8c4 	bl	8005a18 <UART_SetConfig>
 8005890:	4603      	mov	r3, r0
 8005892:	2b01      	cmp	r3, #1
 8005894:	d101      	bne.n	800589a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e022      	b.n	80058e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f001 fa72 	bl	8006d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f001 faf9 	bl	8006ed0 <UART_CheckIdleState>
 80058de:	4603      	mov	r3, r0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	; 0x28
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	4613      	mov	r3, r2
 80058f6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058fe:	2b20      	cmp	r3, #32
 8005900:	f040 8083 	bne.w	8005a0a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <HAL_UART_Transmit+0x28>
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e07b      	b.n	8005a0c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800591a:	2b01      	cmp	r3, #1
 800591c:	d101      	bne.n	8005922 <HAL_UART_Transmit+0x3a>
 800591e:	2302      	movs	r3, #2
 8005920:	e074      	b.n	8005a0c <HAL_UART_Transmit+0x124>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2221      	movs	r2, #33	; 0x21
 8005936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800593a:	f7fc f93b 	bl	8001bb4 <HAL_GetTick>
 800593e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	88fa      	ldrh	r2, [r7, #6]
 8005944:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	88fa      	ldrh	r2, [r7, #6]
 800594c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005958:	d108      	bne.n	800596c <HAL_UART_Transmit+0x84>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005962:	2300      	movs	r3, #0
 8005964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	e003      	b.n	8005974 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005970:	2300      	movs	r3, #0
 8005972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005974:	e02c      	b.n	80059d0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2200      	movs	r2, #0
 800597e:	2180      	movs	r1, #128	; 0x80
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f001 faed 	bl	8006f60 <UART_WaitOnFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e03d      	b.n	8005a0c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10b      	bne.n	80059ae <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	3302      	adds	r3, #2
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	e007      	b.n	80059be <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	3301      	adds	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1cc      	bne.n	8005976 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2200      	movs	r2, #0
 80059e4:	2140      	movs	r1, #64	; 0x40
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f001 faba 	bl	8006f60 <UART_WaitOnFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e00a      	b.n	8005a0c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e000      	b.n	8005a0c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005a0a:	2302      	movs	r3, #2
  }
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	0000      	movs	r0, r0
	...

08005a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005a1c:	b08a      	sub	sp, #40	; 0x28
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4ba4      	ldr	r3, [pc, #656]	; (8005ce8 <UART_SetConfig+0x2d0>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a99      	ldr	r2, [pc, #612]	; (8005cec <UART_SetConfig+0x2d4>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d004      	beq.n	8005a94 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a90:	4313      	orrs	r3, r2
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005a9e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6812      	ldr	r2, [r2, #0]
 8005aa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	f023 010f 	bic.w	r1, r3, #15
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a8a      	ldr	r2, [pc, #552]	; (8005cf0 <UART_SetConfig+0x2d8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d126      	bne.n	8005b1a <UART_SetConfig+0x102>
 8005acc:	4b89      	ldr	r3, [pc, #548]	; (8005cf4 <UART_SetConfig+0x2dc>)
 8005ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d81a      	bhi.n	8005b10 <UART_SetConfig+0xf8>
 8005ada:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <UART_SetConfig+0xc8>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005af1 	.word	0x08005af1
 8005ae4:	08005b01 	.word	0x08005b01
 8005ae8:	08005af9 	.word	0x08005af9
 8005aec:	08005b09 	.word	0x08005b09
 8005af0:	2301      	movs	r3, #1
 8005af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005af6:	e0d6      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005af8:	2302      	movs	r3, #2
 8005afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005afe:	e0d2      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005b00:	2304      	movs	r3, #4
 8005b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b06:	e0ce      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005b08:	2308      	movs	r3, #8
 8005b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b0e:	e0ca      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005b10:	2310      	movs	r3, #16
 8005b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b16:	bf00      	nop
 8005b18:	e0c5      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a76      	ldr	r2, [pc, #472]	; (8005cf8 <UART_SetConfig+0x2e0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d138      	bne.n	8005b96 <UART_SetConfig+0x17e>
 8005b24:	4b73      	ldr	r3, [pc, #460]	; (8005cf4 <UART_SetConfig+0x2dc>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	f003 030c 	and.w	r3, r3, #12
 8005b2e:	2b0c      	cmp	r3, #12
 8005b30:	d82c      	bhi.n	8005b8c <UART_SetConfig+0x174>
 8005b32:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <UART_SetConfig+0x120>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005b6d 	.word	0x08005b6d
 8005b3c:	08005b8d 	.word	0x08005b8d
 8005b40:	08005b8d 	.word	0x08005b8d
 8005b44:	08005b8d 	.word	0x08005b8d
 8005b48:	08005b7d 	.word	0x08005b7d
 8005b4c:	08005b8d 	.word	0x08005b8d
 8005b50:	08005b8d 	.word	0x08005b8d
 8005b54:	08005b8d 	.word	0x08005b8d
 8005b58:	08005b75 	.word	0x08005b75
 8005b5c:	08005b8d 	.word	0x08005b8d
 8005b60:	08005b8d 	.word	0x08005b8d
 8005b64:	08005b8d 	.word	0x08005b8d
 8005b68:	08005b85 	.word	0x08005b85
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b72:	e098      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005b74:	2302      	movs	r3, #2
 8005b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b7a:	e094      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b82:	e090      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005b84:	2308      	movs	r3, #8
 8005b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b8a:	e08c      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005b8c:	2310      	movs	r3, #16
 8005b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b92:	bf00      	nop
 8005b94:	e087      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a58      	ldr	r2, [pc, #352]	; (8005cfc <UART_SetConfig+0x2e4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d125      	bne.n	8005bec <UART_SetConfig+0x1d4>
 8005ba0:	4b54      	ldr	r3, [pc, #336]	; (8005cf4 <UART_SetConfig+0x2dc>)
 8005ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005baa:	2b10      	cmp	r3, #16
 8005bac:	d011      	beq.n	8005bd2 <UART_SetConfig+0x1ba>
 8005bae:	2b10      	cmp	r3, #16
 8005bb0:	d802      	bhi.n	8005bb8 <UART_SetConfig+0x1a0>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d005      	beq.n	8005bc2 <UART_SetConfig+0x1aa>
 8005bb6:	e014      	b.n	8005be2 <UART_SetConfig+0x1ca>
 8005bb8:	2b20      	cmp	r3, #32
 8005bba:	d006      	beq.n	8005bca <UART_SetConfig+0x1b2>
 8005bbc:	2b30      	cmp	r3, #48	; 0x30
 8005bbe:	d00c      	beq.n	8005bda <UART_SetConfig+0x1c2>
 8005bc0:	e00f      	b.n	8005be2 <UART_SetConfig+0x1ca>
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bc8:	e06d      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bd0:	e069      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005bd2:	2304      	movs	r3, #4
 8005bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bd8:	e065      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005bda:	2308      	movs	r3, #8
 8005bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be0:	e061      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005be2:	2310      	movs	r3, #16
 8005be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be8:	bf00      	nop
 8005bea:	e05c      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a43      	ldr	r2, [pc, #268]	; (8005d00 <UART_SetConfig+0x2e8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d125      	bne.n	8005c42 <UART_SetConfig+0x22a>
 8005bf6:	4b3f      	ldr	r3, [pc, #252]	; (8005cf4 <UART_SetConfig+0x2dc>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	d011      	beq.n	8005c28 <UART_SetConfig+0x210>
 8005c04:	2b40      	cmp	r3, #64	; 0x40
 8005c06:	d802      	bhi.n	8005c0e <UART_SetConfig+0x1f6>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <UART_SetConfig+0x200>
 8005c0c:	e014      	b.n	8005c38 <UART_SetConfig+0x220>
 8005c0e:	2b80      	cmp	r3, #128	; 0x80
 8005c10:	d006      	beq.n	8005c20 <UART_SetConfig+0x208>
 8005c12:	2bc0      	cmp	r3, #192	; 0xc0
 8005c14:	d00c      	beq.n	8005c30 <UART_SetConfig+0x218>
 8005c16:	e00f      	b.n	8005c38 <UART_SetConfig+0x220>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c1e:	e042      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005c20:	2302      	movs	r3, #2
 8005c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c26:	e03e      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c2e:	e03a      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005c30:	2308      	movs	r3, #8
 8005c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c36:	e036      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c3e:	bf00      	nop
 8005c40:	e031      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a29      	ldr	r2, [pc, #164]	; (8005cec <UART_SetConfig+0x2d4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d129      	bne.n	8005ca0 <UART_SetConfig+0x288>
 8005c4c:	4b29      	ldr	r3, [pc, #164]	; (8005cf4 <UART_SetConfig+0x2dc>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c52:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c5a:	d014      	beq.n	8005c86 <UART_SetConfig+0x26e>
 8005c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c60:	d802      	bhi.n	8005c68 <UART_SetConfig+0x250>
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d007      	beq.n	8005c76 <UART_SetConfig+0x25e>
 8005c66:	e016      	b.n	8005c96 <UART_SetConfig+0x27e>
 8005c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c6c:	d007      	beq.n	8005c7e <UART_SetConfig+0x266>
 8005c6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c72:	d00c      	beq.n	8005c8e <UART_SetConfig+0x276>
 8005c74:	e00f      	b.n	8005c96 <UART_SetConfig+0x27e>
 8005c76:	2300      	movs	r3, #0
 8005c78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c7c:	e013      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c84:	e00f      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005c86:	2304      	movs	r3, #4
 8005c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c8c:	e00b      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005c8e:	2308      	movs	r3, #8
 8005c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c94:	e007      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005c96:	2310      	movs	r3, #16
 8005c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005c9c:	bf00      	nop
 8005c9e:	e002      	b.n	8005ca6 <UART_SetConfig+0x28e>
 8005ca0:	2310      	movs	r3, #16
 8005ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a10      	ldr	r2, [pc, #64]	; (8005cec <UART_SetConfig+0x2d4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	f040 842e 	bne.w	800650e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005cb6:	2b08      	cmp	r3, #8
 8005cb8:	f200 8169 	bhi.w	8005f8e <UART_SetConfig+0x576>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <UART_SetConfig+0x2ac>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005d05 	.word	0x08005d05
 8005cc8:	08005f8f 	.word	0x08005f8f
 8005ccc:	08005da7 	.word	0x08005da7
 8005cd0:	08005f8f 	.word	0x08005f8f
 8005cd4:	08005e3f 	.word	0x08005e3f
 8005cd8:	08005f8f 	.word	0x08005f8f
 8005cdc:	08005f8f 	.word	0x08005f8f
 8005ce0:	08005f8f 	.word	0x08005f8f
 8005ce4:	08005ee1 	.word	0x08005ee1
 8005ce8:	cfff69f3 	.word	0xcfff69f3
 8005cec:	40008000 	.word	0x40008000
 8005cf0:	40013800 	.word	0x40013800
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	40004400 	.word	0x40004400
 8005cfc:	40004800 	.word	0x40004800
 8005d00:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005d04:	f7fe fdf2 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d044      	beq.n	8005d9c <UART_SetConfig+0x384>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d03e      	beq.n	8005d98 <UART_SetConfig+0x380>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d038      	beq.n	8005d94 <UART_SetConfig+0x37c>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d032      	beq.n	8005d90 <UART_SetConfig+0x378>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d02c      	beq.n	8005d8c <UART_SetConfig+0x374>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	2b05      	cmp	r3, #5
 8005d38:	d026      	beq.n	8005d88 <UART_SetConfig+0x370>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	2b06      	cmp	r3, #6
 8005d40:	d020      	beq.n	8005d84 <UART_SetConfig+0x36c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	2b07      	cmp	r3, #7
 8005d48:	d01a      	beq.n	8005d80 <UART_SetConfig+0x368>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d014      	beq.n	8005d7c <UART_SetConfig+0x364>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	2b09      	cmp	r3, #9
 8005d58:	d00e      	beq.n	8005d78 <UART_SetConfig+0x360>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	2b0a      	cmp	r3, #10
 8005d60:	d008      	beq.n	8005d74 <UART_SetConfig+0x35c>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	2b0b      	cmp	r3, #11
 8005d68:	d102      	bne.n	8005d70 <UART_SetConfig+0x358>
 8005d6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d6e:	e016      	b.n	8005d9e <UART_SetConfig+0x386>
 8005d70:	2301      	movs	r3, #1
 8005d72:	e014      	b.n	8005d9e <UART_SetConfig+0x386>
 8005d74:	2380      	movs	r3, #128	; 0x80
 8005d76:	e012      	b.n	8005d9e <UART_SetConfig+0x386>
 8005d78:	2340      	movs	r3, #64	; 0x40
 8005d7a:	e010      	b.n	8005d9e <UART_SetConfig+0x386>
 8005d7c:	2320      	movs	r3, #32
 8005d7e:	e00e      	b.n	8005d9e <UART_SetConfig+0x386>
 8005d80:	2310      	movs	r3, #16
 8005d82:	e00c      	b.n	8005d9e <UART_SetConfig+0x386>
 8005d84:	230c      	movs	r3, #12
 8005d86:	e00a      	b.n	8005d9e <UART_SetConfig+0x386>
 8005d88:	230a      	movs	r3, #10
 8005d8a:	e008      	b.n	8005d9e <UART_SetConfig+0x386>
 8005d8c:	2308      	movs	r3, #8
 8005d8e:	e006      	b.n	8005d9e <UART_SetConfig+0x386>
 8005d90:	2306      	movs	r3, #6
 8005d92:	e004      	b.n	8005d9e <UART_SetConfig+0x386>
 8005d94:	2304      	movs	r3, #4
 8005d96:	e002      	b.n	8005d9e <UART_SetConfig+0x386>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e000      	b.n	8005d9e <UART_SetConfig+0x386>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da2:	617b      	str	r3, [r7, #20]
        break;
 8005da4:	e0f6      	b.n	8005f94 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d044      	beq.n	8005e38 <UART_SetConfig+0x420>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d03e      	beq.n	8005e34 <UART_SetConfig+0x41c>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d038      	beq.n	8005e30 <UART_SetConfig+0x418>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d032      	beq.n	8005e2c <UART_SetConfig+0x414>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d02c      	beq.n	8005e28 <UART_SetConfig+0x410>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd2:	2b05      	cmp	r3, #5
 8005dd4:	d026      	beq.n	8005e24 <UART_SetConfig+0x40c>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	2b06      	cmp	r3, #6
 8005ddc:	d020      	beq.n	8005e20 <UART_SetConfig+0x408>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	2b07      	cmp	r3, #7
 8005de4:	d01a      	beq.n	8005e1c <UART_SetConfig+0x404>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d014      	beq.n	8005e18 <UART_SetConfig+0x400>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	2b09      	cmp	r3, #9
 8005df4:	d00e      	beq.n	8005e14 <UART_SetConfig+0x3fc>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfa:	2b0a      	cmp	r3, #10
 8005dfc:	d008      	beq.n	8005e10 <UART_SetConfig+0x3f8>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	2b0b      	cmp	r3, #11
 8005e04:	d102      	bne.n	8005e0c <UART_SetConfig+0x3f4>
 8005e06:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005e0a:	e016      	b.n	8005e3a <UART_SetConfig+0x422>
 8005e0c:	4ba1      	ldr	r3, [pc, #644]	; (8006094 <UART_SetConfig+0x67c>)
 8005e0e:	e014      	b.n	8005e3a <UART_SetConfig+0x422>
 8005e10:	4ba1      	ldr	r3, [pc, #644]	; (8006098 <UART_SetConfig+0x680>)
 8005e12:	e012      	b.n	8005e3a <UART_SetConfig+0x422>
 8005e14:	4ba1      	ldr	r3, [pc, #644]	; (800609c <UART_SetConfig+0x684>)
 8005e16:	e010      	b.n	8005e3a <UART_SetConfig+0x422>
 8005e18:	4ba1      	ldr	r3, [pc, #644]	; (80060a0 <UART_SetConfig+0x688>)
 8005e1a:	e00e      	b.n	8005e3a <UART_SetConfig+0x422>
 8005e1c:	4ba1      	ldr	r3, [pc, #644]	; (80060a4 <UART_SetConfig+0x68c>)
 8005e1e:	e00c      	b.n	8005e3a <UART_SetConfig+0x422>
 8005e20:	4ba1      	ldr	r3, [pc, #644]	; (80060a8 <UART_SetConfig+0x690>)
 8005e22:	e00a      	b.n	8005e3a <UART_SetConfig+0x422>
 8005e24:	4ba1      	ldr	r3, [pc, #644]	; (80060ac <UART_SetConfig+0x694>)
 8005e26:	e008      	b.n	8005e3a <UART_SetConfig+0x422>
 8005e28:	4ba1      	ldr	r3, [pc, #644]	; (80060b0 <UART_SetConfig+0x698>)
 8005e2a:	e006      	b.n	8005e3a <UART_SetConfig+0x422>
 8005e2c:	4ba1      	ldr	r3, [pc, #644]	; (80060b4 <UART_SetConfig+0x69c>)
 8005e2e:	e004      	b.n	8005e3a <UART_SetConfig+0x422>
 8005e30:	4ba1      	ldr	r3, [pc, #644]	; (80060b8 <UART_SetConfig+0x6a0>)
 8005e32:	e002      	b.n	8005e3a <UART_SetConfig+0x422>
 8005e34:	4ba1      	ldr	r3, [pc, #644]	; (80060bc <UART_SetConfig+0x6a4>)
 8005e36:	e000      	b.n	8005e3a <UART_SetConfig+0x422>
 8005e38:	4b96      	ldr	r3, [pc, #600]	; (8006094 <UART_SetConfig+0x67c>)
 8005e3a:	617b      	str	r3, [r7, #20]
        break;
 8005e3c:	e0aa      	b.n	8005f94 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005e3e:	f7fe fce7 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8005e42:	4602      	mov	r2, r0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d044      	beq.n	8005ed6 <UART_SetConfig+0x4be>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d03e      	beq.n	8005ed2 <UART_SetConfig+0x4ba>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d038      	beq.n	8005ece <UART_SetConfig+0x4b6>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	d032      	beq.n	8005eca <UART_SetConfig+0x4b2>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d02c      	beq.n	8005ec6 <UART_SetConfig+0x4ae>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b05      	cmp	r3, #5
 8005e72:	d026      	beq.n	8005ec2 <UART_SetConfig+0x4aa>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	2b06      	cmp	r3, #6
 8005e7a:	d020      	beq.n	8005ebe <UART_SetConfig+0x4a6>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b07      	cmp	r3, #7
 8005e82:	d01a      	beq.n	8005eba <UART_SetConfig+0x4a2>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d014      	beq.n	8005eb6 <UART_SetConfig+0x49e>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b09      	cmp	r3, #9
 8005e92:	d00e      	beq.n	8005eb2 <UART_SetConfig+0x49a>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	2b0a      	cmp	r3, #10
 8005e9a:	d008      	beq.n	8005eae <UART_SetConfig+0x496>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	2b0b      	cmp	r3, #11
 8005ea2:	d102      	bne.n	8005eaa <UART_SetConfig+0x492>
 8005ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ea8:	e016      	b.n	8005ed8 <UART_SetConfig+0x4c0>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e014      	b.n	8005ed8 <UART_SetConfig+0x4c0>
 8005eae:	2380      	movs	r3, #128	; 0x80
 8005eb0:	e012      	b.n	8005ed8 <UART_SetConfig+0x4c0>
 8005eb2:	2340      	movs	r3, #64	; 0x40
 8005eb4:	e010      	b.n	8005ed8 <UART_SetConfig+0x4c0>
 8005eb6:	2320      	movs	r3, #32
 8005eb8:	e00e      	b.n	8005ed8 <UART_SetConfig+0x4c0>
 8005eba:	2310      	movs	r3, #16
 8005ebc:	e00c      	b.n	8005ed8 <UART_SetConfig+0x4c0>
 8005ebe:	230c      	movs	r3, #12
 8005ec0:	e00a      	b.n	8005ed8 <UART_SetConfig+0x4c0>
 8005ec2:	230a      	movs	r3, #10
 8005ec4:	e008      	b.n	8005ed8 <UART_SetConfig+0x4c0>
 8005ec6:	2308      	movs	r3, #8
 8005ec8:	e006      	b.n	8005ed8 <UART_SetConfig+0x4c0>
 8005eca:	2306      	movs	r3, #6
 8005ecc:	e004      	b.n	8005ed8 <UART_SetConfig+0x4c0>
 8005ece:	2304      	movs	r3, #4
 8005ed0:	e002      	b.n	8005ed8 <UART_SetConfig+0x4c0>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	e000      	b.n	8005ed8 <UART_SetConfig+0x4c0>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005edc:	617b      	str	r3, [r7, #20]
        break;
 8005ede:	e059      	b.n	8005f94 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d04e      	beq.n	8005f86 <UART_SetConfig+0x56e>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d047      	beq.n	8005f80 <UART_SetConfig+0x568>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d040      	beq.n	8005f7a <UART_SetConfig+0x562>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	2b03      	cmp	r3, #3
 8005efe:	d039      	beq.n	8005f74 <UART_SetConfig+0x55c>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d032      	beq.n	8005f6e <UART_SetConfig+0x556>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	2b05      	cmp	r3, #5
 8005f0e:	d02b      	beq.n	8005f68 <UART_SetConfig+0x550>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	2b06      	cmp	r3, #6
 8005f16:	d024      	beq.n	8005f62 <UART_SetConfig+0x54a>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	2b07      	cmp	r3, #7
 8005f1e:	d01d      	beq.n	8005f5c <UART_SetConfig+0x544>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d016      	beq.n	8005f56 <UART_SetConfig+0x53e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	2b09      	cmp	r3, #9
 8005f2e:	d00f      	beq.n	8005f50 <UART_SetConfig+0x538>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	2b0a      	cmp	r3, #10
 8005f36:	d008      	beq.n	8005f4a <UART_SetConfig+0x532>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	2b0b      	cmp	r3, #11
 8005f3e:	d101      	bne.n	8005f44 <UART_SetConfig+0x52c>
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	e022      	b.n	8005f8a <UART_SetConfig+0x572>
 8005f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f48:	e01f      	b.n	8005f8a <UART_SetConfig+0x572>
 8005f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f4e:	e01c      	b.n	8005f8a <UART_SetConfig+0x572>
 8005f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f54:	e019      	b.n	8005f8a <UART_SetConfig+0x572>
 8005f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f5a:	e016      	b.n	8005f8a <UART_SetConfig+0x572>
 8005f5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005f60:	e013      	b.n	8005f8a <UART_SetConfig+0x572>
 8005f62:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005f66:	e010      	b.n	8005f8a <UART_SetConfig+0x572>
 8005f68:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005f6c:	e00d      	b.n	8005f8a <UART_SetConfig+0x572>
 8005f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f72:	e00a      	b.n	8005f8a <UART_SetConfig+0x572>
 8005f74:	f241 5355 	movw	r3, #5461	; 0x1555
 8005f78:	e007      	b.n	8005f8a <UART_SetConfig+0x572>
 8005f7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f7e:	e004      	b.n	8005f8a <UART_SetConfig+0x572>
 8005f80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f84:	e001      	b.n	8005f8a <UART_SetConfig+0x572>
 8005f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f8a:	617b      	str	r3, [r7, #20]
        break;
 8005f8c:	e002      	b.n	8005f94 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	76fb      	strb	r3, [r7, #27]
        break;
 8005f92:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 86cd 	beq.w	8006d36 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	4413      	add	r3, r2
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d305      	bcc.n	8005fb8 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d903      	bls.n	8005fc0 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	76fb      	strb	r3, [r7, #27]
 8005fbc:	f000 bebb 	b.w	8006d36 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 8005fc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	f200 828d 	bhi.w	80064e4 <UART_SetConfig+0xacc>
 8005fca:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <UART_SetConfig+0x5b8>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08005ff5 	.word	0x08005ff5
 8005fd4:	080064e5 	.word	0x080064e5
 8005fd8:	0800615f 	.word	0x0800615f
 8005fdc:	080064e5 	.word	0x080064e5
 8005fe0:	08006255 	.word	0x08006255
 8005fe4:	080064e5 	.word	0x080064e5
 8005fe8:	080064e5 	.word	0x080064e5
 8005fec:	080064e5 	.word	0x080064e5
 8005ff0:	08006393 	.word	0x08006393
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8005ff4:	f7fe fc7a 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8005ff8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f04f 0100 	mov.w	r1, #0
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	2b00      	cmp	r3, #0
 8006008:	d07d      	beq.n	8006106 <UART_SetConfig+0x6ee>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	2b01      	cmp	r3, #1
 8006010:	d074      	beq.n	80060fc <UART_SetConfig+0x6e4>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006016:	2b02      	cmp	r3, #2
 8006018:	d06b      	beq.n	80060f2 <UART_SetConfig+0x6da>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601e:	2b03      	cmp	r3, #3
 8006020:	d062      	beq.n	80060e8 <UART_SetConfig+0x6d0>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	2b04      	cmp	r3, #4
 8006028:	d059      	beq.n	80060de <UART_SetConfig+0x6c6>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	2b05      	cmp	r3, #5
 8006030:	d050      	beq.n	80060d4 <UART_SetConfig+0x6bc>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	2b06      	cmp	r3, #6
 8006038:	d047      	beq.n	80060ca <UART_SetConfig+0x6b2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	2b07      	cmp	r3, #7
 8006040:	d03e      	beq.n	80060c0 <UART_SetConfig+0x6a8>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b08      	cmp	r3, #8
 8006048:	d01f      	beq.n	800608a <UART_SetConfig+0x672>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	2b09      	cmp	r3, #9
 8006050:	d016      	beq.n	8006080 <UART_SetConfig+0x668>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	2b0a      	cmp	r3, #10
 8006058:	d00d      	beq.n	8006076 <UART_SetConfig+0x65e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	2b0b      	cmp	r3, #11
 8006060:	d104      	bne.n	800606c <UART_SetConfig+0x654>
 8006062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006066:	f04f 0400 	mov.w	r4, #0
 800606a:	e050      	b.n	800610e <UART_SetConfig+0x6f6>
 800606c:	f04f 0301 	mov.w	r3, #1
 8006070:	f04f 0400 	mov.w	r4, #0
 8006074:	e04b      	b.n	800610e <UART_SetConfig+0x6f6>
 8006076:	f04f 0380 	mov.w	r3, #128	; 0x80
 800607a:	f04f 0400 	mov.w	r4, #0
 800607e:	e046      	b.n	800610e <UART_SetConfig+0x6f6>
 8006080:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006084:	f04f 0400 	mov.w	r4, #0
 8006088:	e041      	b.n	800610e <UART_SetConfig+0x6f6>
 800608a:	f04f 0320 	mov.w	r3, #32
 800608e:	f04f 0400 	mov.w	r4, #0
 8006092:	e03c      	b.n	800610e <UART_SetConfig+0x6f6>
 8006094:	00f42400 	.word	0x00f42400
 8006098:	0001e848 	.word	0x0001e848
 800609c:	0003d090 	.word	0x0003d090
 80060a0:	0007a120 	.word	0x0007a120
 80060a4:	000f4240 	.word	0x000f4240
 80060a8:	00145855 	.word	0x00145855
 80060ac:	00186a00 	.word	0x00186a00
 80060b0:	001e8480 	.word	0x001e8480
 80060b4:	0028b0aa 	.word	0x0028b0aa
 80060b8:	003d0900 	.word	0x003d0900
 80060bc:	007a1200 	.word	0x007a1200
 80060c0:	f04f 0310 	mov.w	r3, #16
 80060c4:	f04f 0400 	mov.w	r4, #0
 80060c8:	e021      	b.n	800610e <UART_SetConfig+0x6f6>
 80060ca:	f04f 030c 	mov.w	r3, #12
 80060ce:	f04f 0400 	mov.w	r4, #0
 80060d2:	e01c      	b.n	800610e <UART_SetConfig+0x6f6>
 80060d4:	f04f 030a 	mov.w	r3, #10
 80060d8:	f04f 0400 	mov.w	r4, #0
 80060dc:	e017      	b.n	800610e <UART_SetConfig+0x6f6>
 80060de:	f04f 0308 	mov.w	r3, #8
 80060e2:	f04f 0400 	mov.w	r4, #0
 80060e6:	e012      	b.n	800610e <UART_SetConfig+0x6f6>
 80060e8:	f04f 0306 	mov.w	r3, #6
 80060ec:	f04f 0400 	mov.w	r4, #0
 80060f0:	e00d      	b.n	800610e <UART_SetConfig+0x6f6>
 80060f2:	f04f 0304 	mov.w	r3, #4
 80060f6:	f04f 0400 	mov.w	r4, #0
 80060fa:	e008      	b.n	800610e <UART_SetConfig+0x6f6>
 80060fc:	f04f 0302 	mov.w	r3, #2
 8006100:	f04f 0400 	mov.w	r4, #0
 8006104:	e003      	b.n	800610e <UART_SetConfig+0x6f6>
 8006106:	f04f 0301 	mov.w	r3, #1
 800610a:	f04f 0400 	mov.w	r4, #0
 800610e:	461a      	mov	r2, r3
 8006110:	4623      	mov	r3, r4
 8006112:	f7fa fde1 	bl	8000cd8 <__aeabi_uldivmod>
 8006116:	4603      	mov	r3, r0
 8006118:	460c      	mov	r4, r1
 800611a:	4619      	mov	r1, r3
 800611c:	4622      	mov	r2, r4
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	f04f 0400 	mov.w	r4, #0
 8006126:	0214      	lsls	r4, r2, #8
 8006128:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800612c:	020b      	lsls	r3, r1, #8
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6852      	ldr	r2, [r2, #4]
 8006132:	0852      	lsrs	r2, r2, #1
 8006134:	4611      	mov	r1, r2
 8006136:	f04f 0200 	mov.w	r2, #0
 800613a:	eb13 0b01 	adds.w	fp, r3, r1
 800613e:	eb44 0c02 	adc.w	ip, r4, r2
 8006142:	4658      	mov	r0, fp
 8006144:	4661      	mov	r1, ip
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f04f 0400 	mov.w	r4, #0
 800614e:	461a      	mov	r2, r3
 8006150:	4623      	mov	r3, r4
 8006152:	f7fa fdc1 	bl	8000cd8 <__aeabi_uldivmod>
 8006156:	4603      	mov	r3, r0
 8006158:	460c      	mov	r4, r1
 800615a:	61fb      	str	r3, [r7, #28]
            break;
 800615c:	e1c5      	b.n	80064ea <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	2b00      	cmp	r3, #0
 8006164:	d05b      	beq.n	800621e <UART_SetConfig+0x806>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	2b01      	cmp	r3, #1
 800616c:	d053      	beq.n	8006216 <UART_SetConfig+0x7fe>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006172:	2b02      	cmp	r3, #2
 8006174:	d04b      	beq.n	800620e <UART_SetConfig+0x7f6>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	2b03      	cmp	r3, #3
 800617c:	d043      	beq.n	8006206 <UART_SetConfig+0x7ee>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	2b04      	cmp	r3, #4
 8006184:	d03b      	beq.n	80061fe <UART_SetConfig+0x7e6>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	2b05      	cmp	r3, #5
 800618c:	d033      	beq.n	80061f6 <UART_SetConfig+0x7de>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	2b06      	cmp	r3, #6
 8006194:	d02b      	beq.n	80061ee <UART_SetConfig+0x7d6>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	2b07      	cmp	r3, #7
 800619c:	d023      	beq.n	80061e6 <UART_SetConfig+0x7ce>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d01b      	beq.n	80061de <UART_SetConfig+0x7c6>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	2b09      	cmp	r3, #9
 80061ac:	d013      	beq.n	80061d6 <UART_SetConfig+0x7be>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	2b0a      	cmp	r3, #10
 80061b4:	d00b      	beq.n	80061ce <UART_SetConfig+0x7b6>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	2b0b      	cmp	r3, #11
 80061bc:	d103      	bne.n	80061c6 <UART_SetConfig+0x7ae>
 80061be:	4bae      	ldr	r3, [pc, #696]	; (8006478 <UART_SetConfig+0xa60>)
 80061c0:	f04f 0400 	mov.w	r4, #0
 80061c4:	e02e      	b.n	8006224 <UART_SetConfig+0x80c>
 80061c6:	4bad      	ldr	r3, [pc, #692]	; (800647c <UART_SetConfig+0xa64>)
 80061c8:	f04f 0400 	mov.w	r4, #0
 80061cc:	e02a      	b.n	8006224 <UART_SetConfig+0x80c>
 80061ce:	4bac      	ldr	r3, [pc, #688]	; (8006480 <UART_SetConfig+0xa68>)
 80061d0:	f04f 0400 	mov.w	r4, #0
 80061d4:	e026      	b.n	8006224 <UART_SetConfig+0x80c>
 80061d6:	4bab      	ldr	r3, [pc, #684]	; (8006484 <UART_SetConfig+0xa6c>)
 80061d8:	f04f 0400 	mov.w	r4, #0
 80061dc:	e022      	b.n	8006224 <UART_SetConfig+0x80c>
 80061de:	4baa      	ldr	r3, [pc, #680]	; (8006488 <UART_SetConfig+0xa70>)
 80061e0:	f04f 0400 	mov.w	r4, #0
 80061e4:	e01e      	b.n	8006224 <UART_SetConfig+0x80c>
 80061e6:	4ba9      	ldr	r3, [pc, #676]	; (800648c <UART_SetConfig+0xa74>)
 80061e8:	f04f 0400 	mov.w	r4, #0
 80061ec:	e01a      	b.n	8006224 <UART_SetConfig+0x80c>
 80061ee:	a49e      	add	r4, pc, #632	; (adr r4, 8006468 <UART_SetConfig+0xa50>)
 80061f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80061f4:	e016      	b.n	8006224 <UART_SetConfig+0x80c>
 80061f6:	4ba6      	ldr	r3, [pc, #664]	; (8006490 <UART_SetConfig+0xa78>)
 80061f8:	f04f 0400 	mov.w	r4, #0
 80061fc:	e012      	b.n	8006224 <UART_SetConfig+0x80c>
 80061fe:	4ba5      	ldr	r3, [pc, #660]	; (8006494 <UART_SetConfig+0xa7c>)
 8006200:	f04f 0400 	mov.w	r4, #0
 8006204:	e00e      	b.n	8006224 <UART_SetConfig+0x80c>
 8006206:	a49a      	add	r4, pc, #616	; (adr r4, 8006470 <UART_SetConfig+0xa58>)
 8006208:	e9d4 3400 	ldrd	r3, r4, [r4]
 800620c:	e00a      	b.n	8006224 <UART_SetConfig+0x80c>
 800620e:	4ba2      	ldr	r3, [pc, #648]	; (8006498 <UART_SetConfig+0xa80>)
 8006210:	f04f 0400 	mov.w	r4, #0
 8006214:	e006      	b.n	8006224 <UART_SetConfig+0x80c>
 8006216:	4ba1      	ldr	r3, [pc, #644]	; (800649c <UART_SetConfig+0xa84>)
 8006218:	f04f 0400 	mov.w	r4, #0
 800621c:	e002      	b.n	8006224 <UART_SetConfig+0x80c>
 800621e:	4b97      	ldr	r3, [pc, #604]	; (800647c <UART_SetConfig+0xa64>)
 8006220:	f04f 0400 	mov.w	r4, #0
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6852      	ldr	r2, [r2, #4]
 8006228:	0852      	lsrs	r2, r2, #1
 800622a:	4611      	mov	r1, r2
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	eb13 0b01 	adds.w	fp, r3, r1
 8006234:	eb44 0c02 	adc.w	ip, r4, r2
 8006238:	4658      	mov	r0, fp
 800623a:	4661      	mov	r1, ip
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f04f 0400 	mov.w	r4, #0
 8006244:	461a      	mov	r2, r3
 8006246:	4623      	mov	r3, r4
 8006248:	f7fa fd46 	bl	8000cd8 <__aeabi_uldivmod>
 800624c:	4603      	mov	r3, r0
 800624e:	460c      	mov	r4, r1
 8006250:	61fb      	str	r3, [r7, #28]
            break;
 8006252:	e14a      	b.n	80064ea <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8006254:	f7fe fadc 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8006258:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	4618      	mov	r0, r3
 800625e:	f04f 0100 	mov.w	r1, #0
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	d067      	beq.n	800633a <UART_SetConfig+0x922>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	2b01      	cmp	r3, #1
 8006270:	d05e      	beq.n	8006330 <UART_SetConfig+0x918>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	2b02      	cmp	r3, #2
 8006278:	d055      	beq.n	8006326 <UART_SetConfig+0x90e>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	2b03      	cmp	r3, #3
 8006280:	d04c      	beq.n	800631c <UART_SetConfig+0x904>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	2b04      	cmp	r3, #4
 8006288:	d043      	beq.n	8006312 <UART_SetConfig+0x8fa>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	2b05      	cmp	r3, #5
 8006290:	d03a      	beq.n	8006308 <UART_SetConfig+0x8f0>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	2b06      	cmp	r3, #6
 8006298:	d031      	beq.n	80062fe <UART_SetConfig+0x8e6>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	2b07      	cmp	r3, #7
 80062a0:	d028      	beq.n	80062f4 <UART_SetConfig+0x8dc>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d01f      	beq.n	80062ea <UART_SetConfig+0x8d2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	2b09      	cmp	r3, #9
 80062b0:	d016      	beq.n	80062e0 <UART_SetConfig+0x8c8>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	2b0a      	cmp	r3, #10
 80062b8:	d00d      	beq.n	80062d6 <UART_SetConfig+0x8be>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	2b0b      	cmp	r3, #11
 80062c0:	d104      	bne.n	80062cc <UART_SetConfig+0x8b4>
 80062c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062c6:	f04f 0400 	mov.w	r4, #0
 80062ca:	e03a      	b.n	8006342 <UART_SetConfig+0x92a>
 80062cc:	f04f 0301 	mov.w	r3, #1
 80062d0:	f04f 0400 	mov.w	r4, #0
 80062d4:	e035      	b.n	8006342 <UART_SetConfig+0x92a>
 80062d6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80062da:	f04f 0400 	mov.w	r4, #0
 80062de:	e030      	b.n	8006342 <UART_SetConfig+0x92a>
 80062e0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80062e4:	f04f 0400 	mov.w	r4, #0
 80062e8:	e02b      	b.n	8006342 <UART_SetConfig+0x92a>
 80062ea:	f04f 0320 	mov.w	r3, #32
 80062ee:	f04f 0400 	mov.w	r4, #0
 80062f2:	e026      	b.n	8006342 <UART_SetConfig+0x92a>
 80062f4:	f04f 0310 	mov.w	r3, #16
 80062f8:	f04f 0400 	mov.w	r4, #0
 80062fc:	e021      	b.n	8006342 <UART_SetConfig+0x92a>
 80062fe:	f04f 030c 	mov.w	r3, #12
 8006302:	f04f 0400 	mov.w	r4, #0
 8006306:	e01c      	b.n	8006342 <UART_SetConfig+0x92a>
 8006308:	f04f 030a 	mov.w	r3, #10
 800630c:	f04f 0400 	mov.w	r4, #0
 8006310:	e017      	b.n	8006342 <UART_SetConfig+0x92a>
 8006312:	f04f 0308 	mov.w	r3, #8
 8006316:	f04f 0400 	mov.w	r4, #0
 800631a:	e012      	b.n	8006342 <UART_SetConfig+0x92a>
 800631c:	f04f 0306 	mov.w	r3, #6
 8006320:	f04f 0400 	mov.w	r4, #0
 8006324:	e00d      	b.n	8006342 <UART_SetConfig+0x92a>
 8006326:	f04f 0304 	mov.w	r3, #4
 800632a:	f04f 0400 	mov.w	r4, #0
 800632e:	e008      	b.n	8006342 <UART_SetConfig+0x92a>
 8006330:	f04f 0302 	mov.w	r3, #2
 8006334:	f04f 0400 	mov.w	r4, #0
 8006338:	e003      	b.n	8006342 <UART_SetConfig+0x92a>
 800633a:	f04f 0301 	mov.w	r3, #1
 800633e:	f04f 0400 	mov.w	r4, #0
 8006342:	461a      	mov	r2, r3
 8006344:	4623      	mov	r3, r4
 8006346:	f7fa fcc7 	bl	8000cd8 <__aeabi_uldivmod>
 800634a:	4603      	mov	r3, r0
 800634c:	460c      	mov	r4, r1
 800634e:	4619      	mov	r1, r3
 8006350:	4622      	mov	r2, r4
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	f04f 0400 	mov.w	r4, #0
 800635a:	0214      	lsls	r4, r2, #8
 800635c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006360:	020b      	lsls	r3, r1, #8
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6852      	ldr	r2, [r2, #4]
 8006366:	0852      	lsrs	r2, r2, #1
 8006368:	4611      	mov	r1, r2
 800636a:	f04f 0200 	mov.w	r2, #0
 800636e:	eb13 0b01 	adds.w	fp, r3, r1
 8006372:	eb44 0c02 	adc.w	ip, r4, r2
 8006376:	4658      	mov	r0, fp
 8006378:	4661      	mov	r1, ip
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f04f 0400 	mov.w	r4, #0
 8006382:	461a      	mov	r2, r3
 8006384:	4623      	mov	r3, r4
 8006386:	f7fa fca7 	bl	8000cd8 <__aeabi_uldivmod>
 800638a:	4603      	mov	r3, r0
 800638c:	460c      	mov	r4, r1
 800638e:	61fb      	str	r3, [r7, #28]
            break;
 8006390:	e0ab      	b.n	80064ea <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 8088 	beq.w	80064ac <UART_SetConfig+0xa94>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d05b      	beq.n	800645c <UART_SetConfig+0xa44>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d052      	beq.n	8006452 <UART_SetConfig+0xa3a>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	2b03      	cmp	r3, #3
 80063b2:	d04a      	beq.n	800644a <UART_SetConfig+0xa32>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d041      	beq.n	8006440 <UART_SetConfig+0xa28>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	2b05      	cmp	r3, #5
 80063c2:	d039      	beq.n	8006438 <UART_SetConfig+0xa20>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	2b06      	cmp	r3, #6
 80063ca:	d031      	beq.n	8006430 <UART_SetConfig+0xa18>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	2b07      	cmp	r3, #7
 80063d2:	d028      	beq.n	8006426 <UART_SetConfig+0xa0e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d01f      	beq.n	800641c <UART_SetConfig+0xa04>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	2b09      	cmp	r3, #9
 80063e2:	d016      	beq.n	8006412 <UART_SetConfig+0x9fa>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	2b0a      	cmp	r3, #10
 80063ea:	d00d      	beq.n	8006408 <UART_SetConfig+0x9f0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	2b0b      	cmp	r3, #11
 80063f2:	d104      	bne.n	80063fe <UART_SetConfig+0x9e6>
 80063f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063f8:	f04f 0400 	mov.w	r4, #0
 80063fc:	e05a      	b.n	80064b4 <UART_SetConfig+0xa9c>
 80063fe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006402:	f04f 0400 	mov.w	r4, #0
 8006406:	e055      	b.n	80064b4 <UART_SetConfig+0xa9c>
 8006408:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800640c:	f04f 0400 	mov.w	r4, #0
 8006410:	e050      	b.n	80064b4 <UART_SetConfig+0xa9c>
 8006412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006416:	f04f 0400 	mov.w	r4, #0
 800641a:	e04b      	b.n	80064b4 <UART_SetConfig+0xa9c>
 800641c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006420:	f04f 0400 	mov.w	r4, #0
 8006424:	e046      	b.n	80064b4 <UART_SetConfig+0xa9c>
 8006426:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800642a:	f04f 0400 	mov.w	r4, #0
 800642e:	e041      	b.n	80064b4 <UART_SetConfig+0xa9c>
 8006430:	4b1b      	ldr	r3, [pc, #108]	; (80064a0 <UART_SetConfig+0xa88>)
 8006432:	f04f 0400 	mov.w	r4, #0
 8006436:	e03d      	b.n	80064b4 <UART_SetConfig+0xa9c>
 8006438:	4b1a      	ldr	r3, [pc, #104]	; (80064a4 <UART_SetConfig+0xa8c>)
 800643a:	f04f 0400 	mov.w	r4, #0
 800643e:	e039      	b.n	80064b4 <UART_SetConfig+0xa9c>
 8006440:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006444:	f04f 0400 	mov.w	r4, #0
 8006448:	e034      	b.n	80064b4 <UART_SetConfig+0xa9c>
 800644a:	4b17      	ldr	r3, [pc, #92]	; (80064a8 <UART_SetConfig+0xa90>)
 800644c:	f04f 0400 	mov.w	r4, #0
 8006450:	e030      	b.n	80064b4 <UART_SetConfig+0xa9c>
 8006452:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006456:	f04f 0400 	mov.w	r4, #0
 800645a:	e02b      	b.n	80064b4 <UART_SetConfig+0xa9c>
 800645c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006460:	f04f 0400 	mov.w	r4, #0
 8006464:	e026      	b.n	80064b4 <UART_SetConfig+0xa9c>
 8006466:	bf00      	nop
 8006468:	14585500 	.word	0x14585500
 800646c:	00000000 	.word	0x00000000
 8006470:	28b0aa00 	.word	0x28b0aa00
 8006474:	00000000 	.word	0x00000000
 8006478:	00f42400 	.word	0x00f42400
 800647c:	f4240000 	.word	0xf4240000
 8006480:	01e84800 	.word	0x01e84800
 8006484:	03d09000 	.word	0x03d09000
 8006488:	07a12000 	.word	0x07a12000
 800648c:	0f424000 	.word	0x0f424000
 8006490:	186a0000 	.word	0x186a0000
 8006494:	1e848000 	.word	0x1e848000
 8006498:	3d090000 	.word	0x3d090000
 800649c:	7a120000 	.word	0x7a120000
 80064a0:	000aaa00 	.word	0x000aaa00
 80064a4:	000ccc00 	.word	0x000ccc00
 80064a8:	00155500 	.word	0x00155500
 80064ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80064b0:	f04f 0400 	mov.w	r4, #0
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6852      	ldr	r2, [r2, #4]
 80064b8:	0852      	lsrs	r2, r2, #1
 80064ba:	4611      	mov	r1, r2
 80064bc:	f04f 0200 	mov.w	r2, #0
 80064c0:	eb13 0b01 	adds.w	fp, r3, r1
 80064c4:	eb44 0c02 	adc.w	ip, r4, r2
 80064c8:	4658      	mov	r0, fp
 80064ca:	4661      	mov	r1, ip
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f04f 0400 	mov.w	r4, #0
 80064d4:	461a      	mov	r2, r3
 80064d6:	4623      	mov	r3, r4
 80064d8:	f7fa fbfe 	bl	8000cd8 <__aeabi_uldivmod>
 80064dc:	4603      	mov	r3, r0
 80064de:	460c      	mov	r4, r1
 80064e0:	61fb      	str	r3, [r7, #28]
            break;
 80064e2:	e002      	b.n	80064ea <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	76fb      	strb	r3, [r7, #27]
            break;
 80064e8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f0:	d309      	bcc.n	8006506 <UART_SetConfig+0xaee>
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064f8:	d205      	bcs.n	8006506 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	60da      	str	r2, [r3, #12]
 8006502:	f000 bc18 	b.w	8006d36 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	76fb      	strb	r3, [r7, #27]
 800650a:	f000 bc14 	b.w	8006d36 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006516:	f040 8204 	bne.w	8006922 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 800651a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800651e:	2b08      	cmp	r3, #8
 8006520:	f200 81df 	bhi.w	80068e2 <UART_SetConfig+0xeca>
 8006524:	a201      	add	r2, pc, #4	; (adr r2, 800652c <UART_SetConfig+0xb14>)
 8006526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652a:	bf00      	nop
 800652c:	08006551 	.word	0x08006551
 8006530:	08006609 	.word	0x08006609
 8006534:	080066c1 	.word	0x080066c1
 8006538:	080068e3 	.word	0x080068e3
 800653c:	08006769 	.word	0x08006769
 8006540:	080068e3 	.word	0x080068e3
 8006544:	080068e3 	.word	0x080068e3
 8006548:	080068e3 	.word	0x080068e3
 800654c:	08006821 	.word	0x08006821
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006550:	f7fe f9cc 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8006554:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	2b00      	cmp	r3, #0
 800655c:	d044      	beq.n	80065e8 <UART_SetConfig+0xbd0>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	2b01      	cmp	r3, #1
 8006564:	d03e      	beq.n	80065e4 <UART_SetConfig+0xbcc>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	2b02      	cmp	r3, #2
 800656c:	d038      	beq.n	80065e0 <UART_SetConfig+0xbc8>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	2b03      	cmp	r3, #3
 8006574:	d032      	beq.n	80065dc <UART_SetConfig+0xbc4>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	2b04      	cmp	r3, #4
 800657c:	d02c      	beq.n	80065d8 <UART_SetConfig+0xbc0>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006582:	2b05      	cmp	r3, #5
 8006584:	d026      	beq.n	80065d4 <UART_SetConfig+0xbbc>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	2b06      	cmp	r3, #6
 800658c:	d020      	beq.n	80065d0 <UART_SetConfig+0xbb8>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	2b07      	cmp	r3, #7
 8006594:	d01a      	beq.n	80065cc <UART_SetConfig+0xbb4>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659a:	2b08      	cmp	r3, #8
 800659c:	d014      	beq.n	80065c8 <UART_SetConfig+0xbb0>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	2b09      	cmp	r3, #9
 80065a4:	d00e      	beq.n	80065c4 <UART_SetConfig+0xbac>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	2b0a      	cmp	r3, #10
 80065ac:	d008      	beq.n	80065c0 <UART_SetConfig+0xba8>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	2b0b      	cmp	r3, #11
 80065b4:	d102      	bne.n	80065bc <UART_SetConfig+0xba4>
 80065b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065ba:	e016      	b.n	80065ea <UART_SetConfig+0xbd2>
 80065bc:	2301      	movs	r3, #1
 80065be:	e014      	b.n	80065ea <UART_SetConfig+0xbd2>
 80065c0:	2380      	movs	r3, #128	; 0x80
 80065c2:	e012      	b.n	80065ea <UART_SetConfig+0xbd2>
 80065c4:	2340      	movs	r3, #64	; 0x40
 80065c6:	e010      	b.n	80065ea <UART_SetConfig+0xbd2>
 80065c8:	2320      	movs	r3, #32
 80065ca:	e00e      	b.n	80065ea <UART_SetConfig+0xbd2>
 80065cc:	2310      	movs	r3, #16
 80065ce:	e00c      	b.n	80065ea <UART_SetConfig+0xbd2>
 80065d0:	230c      	movs	r3, #12
 80065d2:	e00a      	b.n	80065ea <UART_SetConfig+0xbd2>
 80065d4:	230a      	movs	r3, #10
 80065d6:	e008      	b.n	80065ea <UART_SetConfig+0xbd2>
 80065d8:	2308      	movs	r3, #8
 80065da:	e006      	b.n	80065ea <UART_SetConfig+0xbd2>
 80065dc:	2306      	movs	r3, #6
 80065de:	e004      	b.n	80065ea <UART_SetConfig+0xbd2>
 80065e0:	2304      	movs	r3, #4
 80065e2:	e002      	b.n	80065ea <UART_SetConfig+0xbd2>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e000      	b.n	80065ea <UART_SetConfig+0xbd2>
 80065e8:	2301      	movs	r3, #1
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f0:	005a      	lsls	r2, r3, #1
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	085b      	lsrs	r3, r3, #1
 80065f8:	441a      	add	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006602:	b29b      	uxth	r3, r3
 8006604:	61fb      	str	r3, [r7, #28]
        break;
 8006606:	e16f      	b.n	80068e8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006608:	f7fe f986 	bl	8004918 <HAL_RCC_GetPCLK2Freq>
 800660c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	2b00      	cmp	r3, #0
 8006614:	d044      	beq.n	80066a0 <UART_SetConfig+0xc88>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	2b01      	cmp	r3, #1
 800661c:	d03e      	beq.n	800669c <UART_SetConfig+0xc84>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	2b02      	cmp	r3, #2
 8006624:	d038      	beq.n	8006698 <UART_SetConfig+0xc80>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	2b03      	cmp	r3, #3
 800662c:	d032      	beq.n	8006694 <UART_SetConfig+0xc7c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	2b04      	cmp	r3, #4
 8006634:	d02c      	beq.n	8006690 <UART_SetConfig+0xc78>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	2b05      	cmp	r3, #5
 800663c:	d026      	beq.n	800668c <UART_SetConfig+0xc74>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	2b06      	cmp	r3, #6
 8006644:	d020      	beq.n	8006688 <UART_SetConfig+0xc70>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	2b07      	cmp	r3, #7
 800664c:	d01a      	beq.n	8006684 <UART_SetConfig+0xc6c>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	2b08      	cmp	r3, #8
 8006654:	d014      	beq.n	8006680 <UART_SetConfig+0xc68>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	2b09      	cmp	r3, #9
 800665c:	d00e      	beq.n	800667c <UART_SetConfig+0xc64>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	2b0a      	cmp	r3, #10
 8006664:	d008      	beq.n	8006678 <UART_SetConfig+0xc60>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	2b0b      	cmp	r3, #11
 800666c:	d102      	bne.n	8006674 <UART_SetConfig+0xc5c>
 800666e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006672:	e016      	b.n	80066a2 <UART_SetConfig+0xc8a>
 8006674:	2301      	movs	r3, #1
 8006676:	e014      	b.n	80066a2 <UART_SetConfig+0xc8a>
 8006678:	2380      	movs	r3, #128	; 0x80
 800667a:	e012      	b.n	80066a2 <UART_SetConfig+0xc8a>
 800667c:	2340      	movs	r3, #64	; 0x40
 800667e:	e010      	b.n	80066a2 <UART_SetConfig+0xc8a>
 8006680:	2320      	movs	r3, #32
 8006682:	e00e      	b.n	80066a2 <UART_SetConfig+0xc8a>
 8006684:	2310      	movs	r3, #16
 8006686:	e00c      	b.n	80066a2 <UART_SetConfig+0xc8a>
 8006688:	230c      	movs	r3, #12
 800668a:	e00a      	b.n	80066a2 <UART_SetConfig+0xc8a>
 800668c:	230a      	movs	r3, #10
 800668e:	e008      	b.n	80066a2 <UART_SetConfig+0xc8a>
 8006690:	2308      	movs	r3, #8
 8006692:	e006      	b.n	80066a2 <UART_SetConfig+0xc8a>
 8006694:	2306      	movs	r3, #6
 8006696:	e004      	b.n	80066a2 <UART_SetConfig+0xc8a>
 8006698:	2304      	movs	r3, #4
 800669a:	e002      	b.n	80066a2 <UART_SetConfig+0xc8a>
 800669c:	2302      	movs	r3, #2
 800669e:	e000      	b.n	80066a2 <UART_SetConfig+0xc8a>
 80066a0:	2301      	movs	r3, #1
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a8:	005a      	lsls	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	085b      	lsrs	r3, r3, #1
 80066b0:	441a      	add	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	61fb      	str	r3, [r7, #28]
        break;
 80066be:	e113      	b.n	80068e8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d043      	beq.n	8006750 <UART_SetConfig+0xd38>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d03d      	beq.n	800674c <UART_SetConfig+0xd34>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d037      	beq.n	8006748 <UART_SetConfig+0xd30>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	2b03      	cmp	r3, #3
 80066de:	d031      	beq.n	8006744 <UART_SetConfig+0xd2c>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d02b      	beq.n	8006740 <UART_SetConfig+0xd28>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	2b05      	cmp	r3, #5
 80066ee:	d025      	beq.n	800673c <UART_SetConfig+0xd24>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	2b06      	cmp	r3, #6
 80066f6:	d01f      	beq.n	8006738 <UART_SetConfig+0xd20>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	2b07      	cmp	r3, #7
 80066fe:	d019      	beq.n	8006734 <UART_SetConfig+0xd1c>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006704:	2b08      	cmp	r3, #8
 8006706:	d013      	beq.n	8006730 <UART_SetConfig+0xd18>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	2b09      	cmp	r3, #9
 800670e:	d00d      	beq.n	800672c <UART_SetConfig+0xd14>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	2b0a      	cmp	r3, #10
 8006716:	d007      	beq.n	8006728 <UART_SetConfig+0xd10>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	2b0b      	cmp	r3, #11
 800671e:	d101      	bne.n	8006724 <UART_SetConfig+0xd0c>
 8006720:	4b8d      	ldr	r3, [pc, #564]	; (8006958 <UART_SetConfig+0xf40>)
 8006722:	e016      	b.n	8006752 <UART_SetConfig+0xd3a>
 8006724:	4b8d      	ldr	r3, [pc, #564]	; (800695c <UART_SetConfig+0xf44>)
 8006726:	e014      	b.n	8006752 <UART_SetConfig+0xd3a>
 8006728:	4b8d      	ldr	r3, [pc, #564]	; (8006960 <UART_SetConfig+0xf48>)
 800672a:	e012      	b.n	8006752 <UART_SetConfig+0xd3a>
 800672c:	4b8d      	ldr	r3, [pc, #564]	; (8006964 <UART_SetConfig+0xf4c>)
 800672e:	e010      	b.n	8006752 <UART_SetConfig+0xd3a>
 8006730:	4b8d      	ldr	r3, [pc, #564]	; (8006968 <UART_SetConfig+0xf50>)
 8006732:	e00e      	b.n	8006752 <UART_SetConfig+0xd3a>
 8006734:	4b8d      	ldr	r3, [pc, #564]	; (800696c <UART_SetConfig+0xf54>)
 8006736:	e00c      	b.n	8006752 <UART_SetConfig+0xd3a>
 8006738:	4b8d      	ldr	r3, [pc, #564]	; (8006970 <UART_SetConfig+0xf58>)
 800673a:	e00a      	b.n	8006752 <UART_SetConfig+0xd3a>
 800673c:	4b8d      	ldr	r3, [pc, #564]	; (8006974 <UART_SetConfig+0xf5c>)
 800673e:	e008      	b.n	8006752 <UART_SetConfig+0xd3a>
 8006740:	4b8d      	ldr	r3, [pc, #564]	; (8006978 <UART_SetConfig+0xf60>)
 8006742:	e006      	b.n	8006752 <UART_SetConfig+0xd3a>
 8006744:	4b8d      	ldr	r3, [pc, #564]	; (800697c <UART_SetConfig+0xf64>)
 8006746:	e004      	b.n	8006752 <UART_SetConfig+0xd3a>
 8006748:	4b8d      	ldr	r3, [pc, #564]	; (8006980 <UART_SetConfig+0xf68>)
 800674a:	e002      	b.n	8006752 <UART_SetConfig+0xd3a>
 800674c:	4b8d      	ldr	r3, [pc, #564]	; (8006984 <UART_SetConfig+0xf6c>)
 800674e:	e000      	b.n	8006752 <UART_SetConfig+0xd3a>
 8006750:	4b82      	ldr	r3, [pc, #520]	; (800695c <UART_SetConfig+0xf44>)
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	6852      	ldr	r2, [r2, #4]
 8006756:	0852      	lsrs	r2, r2, #1
 8006758:	441a      	add	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006762:	b29b      	uxth	r3, r3
 8006764:	61fb      	str	r3, [r7, #28]
        break;
 8006766:	e0bf      	b.n	80068e8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006768:	f7fe f852 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 800676c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	2b00      	cmp	r3, #0
 8006774:	d044      	beq.n	8006800 <UART_SetConfig+0xde8>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677a:	2b01      	cmp	r3, #1
 800677c:	d03e      	beq.n	80067fc <UART_SetConfig+0xde4>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	2b02      	cmp	r3, #2
 8006784:	d038      	beq.n	80067f8 <UART_SetConfig+0xde0>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678a:	2b03      	cmp	r3, #3
 800678c:	d032      	beq.n	80067f4 <UART_SetConfig+0xddc>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	2b04      	cmp	r3, #4
 8006794:	d02c      	beq.n	80067f0 <UART_SetConfig+0xdd8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	2b05      	cmp	r3, #5
 800679c:	d026      	beq.n	80067ec <UART_SetConfig+0xdd4>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	2b06      	cmp	r3, #6
 80067a4:	d020      	beq.n	80067e8 <UART_SetConfig+0xdd0>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	2b07      	cmp	r3, #7
 80067ac:	d01a      	beq.n	80067e4 <UART_SetConfig+0xdcc>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d014      	beq.n	80067e0 <UART_SetConfig+0xdc8>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	2b09      	cmp	r3, #9
 80067bc:	d00e      	beq.n	80067dc <UART_SetConfig+0xdc4>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	2b0a      	cmp	r3, #10
 80067c4:	d008      	beq.n	80067d8 <UART_SetConfig+0xdc0>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	2b0b      	cmp	r3, #11
 80067cc:	d102      	bne.n	80067d4 <UART_SetConfig+0xdbc>
 80067ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067d2:	e016      	b.n	8006802 <UART_SetConfig+0xdea>
 80067d4:	2301      	movs	r3, #1
 80067d6:	e014      	b.n	8006802 <UART_SetConfig+0xdea>
 80067d8:	2380      	movs	r3, #128	; 0x80
 80067da:	e012      	b.n	8006802 <UART_SetConfig+0xdea>
 80067dc:	2340      	movs	r3, #64	; 0x40
 80067de:	e010      	b.n	8006802 <UART_SetConfig+0xdea>
 80067e0:	2320      	movs	r3, #32
 80067e2:	e00e      	b.n	8006802 <UART_SetConfig+0xdea>
 80067e4:	2310      	movs	r3, #16
 80067e6:	e00c      	b.n	8006802 <UART_SetConfig+0xdea>
 80067e8:	230c      	movs	r3, #12
 80067ea:	e00a      	b.n	8006802 <UART_SetConfig+0xdea>
 80067ec:	230a      	movs	r3, #10
 80067ee:	e008      	b.n	8006802 <UART_SetConfig+0xdea>
 80067f0:	2308      	movs	r3, #8
 80067f2:	e006      	b.n	8006802 <UART_SetConfig+0xdea>
 80067f4:	2306      	movs	r3, #6
 80067f6:	e004      	b.n	8006802 <UART_SetConfig+0xdea>
 80067f8:	2304      	movs	r3, #4
 80067fa:	e002      	b.n	8006802 <UART_SetConfig+0xdea>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e000      	b.n	8006802 <UART_SetConfig+0xdea>
 8006800:	2301      	movs	r3, #1
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	fbb2 f3f3 	udiv	r3, r2, r3
 8006808:	005a      	lsls	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	441a      	add	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	fbb2 f3f3 	udiv	r3, r2, r3
 800681a:	b29b      	uxth	r3, r3
 800681c:	61fb      	str	r3, [r7, #28]
        break;
 800681e:	e063      	b.n	80068e8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	2b00      	cmp	r3, #0
 8006826:	d04f      	beq.n	80068c8 <UART_SetConfig+0xeb0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	2b01      	cmp	r3, #1
 800682e:	d048      	beq.n	80068c2 <UART_SetConfig+0xeaa>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	2b02      	cmp	r3, #2
 8006836:	d041      	beq.n	80068bc <UART_SetConfig+0xea4>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683c:	2b03      	cmp	r3, #3
 800683e:	d03a      	beq.n	80068b6 <UART_SetConfig+0xe9e>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006844:	2b04      	cmp	r3, #4
 8006846:	d033      	beq.n	80068b0 <UART_SetConfig+0xe98>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	2b05      	cmp	r3, #5
 800684e:	d02c      	beq.n	80068aa <UART_SetConfig+0xe92>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	2b06      	cmp	r3, #6
 8006856:	d025      	beq.n	80068a4 <UART_SetConfig+0xe8c>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	2b07      	cmp	r3, #7
 800685e:	d01e      	beq.n	800689e <UART_SetConfig+0xe86>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	2b08      	cmp	r3, #8
 8006866:	d017      	beq.n	8006898 <UART_SetConfig+0xe80>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	2b09      	cmp	r3, #9
 800686e:	d010      	beq.n	8006892 <UART_SetConfig+0xe7a>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	2b0a      	cmp	r3, #10
 8006876:	d009      	beq.n	800688c <UART_SetConfig+0xe74>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	2b0b      	cmp	r3, #11
 800687e:	d102      	bne.n	8006886 <UART_SetConfig+0xe6e>
 8006880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006884:	e022      	b.n	80068cc <UART_SetConfig+0xeb4>
 8006886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800688a:	e01f      	b.n	80068cc <UART_SetConfig+0xeb4>
 800688c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006890:	e01c      	b.n	80068cc <UART_SetConfig+0xeb4>
 8006892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006896:	e019      	b.n	80068cc <UART_SetConfig+0xeb4>
 8006898:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800689c:	e016      	b.n	80068cc <UART_SetConfig+0xeb4>
 800689e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068a2:	e013      	b.n	80068cc <UART_SetConfig+0xeb4>
 80068a4:	f241 5354 	movw	r3, #5460	; 0x1554
 80068a8:	e010      	b.n	80068cc <UART_SetConfig+0xeb4>
 80068aa:	f641 1398 	movw	r3, #6552	; 0x1998
 80068ae:	e00d      	b.n	80068cc <UART_SetConfig+0xeb4>
 80068b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068b4:	e00a      	b.n	80068cc <UART_SetConfig+0xeb4>
 80068b6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80068ba:	e007      	b.n	80068cc <UART_SetConfig+0xeb4>
 80068bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068c0:	e004      	b.n	80068cc <UART_SetConfig+0xeb4>
 80068c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068c6:	e001      	b.n	80068cc <UART_SetConfig+0xeb4>
 80068c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6852      	ldr	r2, [r2, #4]
 80068d0:	0852      	lsrs	r2, r2, #1
 80068d2:	441a      	add	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068dc:	b29b      	uxth	r3, r3
 80068de:	61fb      	str	r3, [r7, #28]
        break;
 80068e0:	e002      	b.n	80068e8 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	76fb      	strb	r3, [r7, #27]
        break;
 80068e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	2b0f      	cmp	r3, #15
 80068ec:	d916      	bls.n	800691c <UART_SetConfig+0xf04>
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f4:	d212      	bcs.n	800691c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f023 030f 	bic.w	r3, r3, #15
 80068fe:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	085b      	lsrs	r3, r3, #1
 8006904:	b29b      	uxth	r3, r3
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	b29a      	uxth	r2, r3
 800690c:	89fb      	ldrh	r3, [r7, #14]
 800690e:	4313      	orrs	r3, r2
 8006910:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	89fa      	ldrh	r2, [r7, #14]
 8006918:	60da      	str	r2, [r3, #12]
 800691a:	e20c      	b.n	8006d36 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	76fb      	strb	r3, [r7, #27]
 8006920:	e209      	b.n	8006d36 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8006922:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006926:	2b08      	cmp	r3, #8
 8006928:	f200 81f4 	bhi.w	8006d14 <UART_SetConfig+0x12fc>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0xf1c>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006989 	.word	0x08006989
 8006938:	08006a3f 	.word	0x08006a3f
 800693c:	08006af5 	.word	0x08006af5
 8006940:	08006d15 	.word	0x08006d15
 8006944:	08006b9f 	.word	0x08006b9f
 8006948:	08006d15 	.word	0x08006d15
 800694c:	08006d15 	.word	0x08006d15
 8006950:	08006d15 	.word	0x08006d15
 8006954:	08006c55 	.word	0x08006c55
 8006958:	0001e848 	.word	0x0001e848
 800695c:	01e84800 	.word	0x01e84800
 8006960:	0003d090 	.word	0x0003d090
 8006964:	0007a120 	.word	0x0007a120
 8006968:	000f4240 	.word	0x000f4240
 800696c:	001e8480 	.word	0x001e8480
 8006970:	0028b0aa 	.word	0x0028b0aa
 8006974:	0030d400 	.word	0x0030d400
 8006978:	003d0900 	.word	0x003d0900
 800697c:	00516154 	.word	0x00516154
 8006980:	007a1200 	.word	0x007a1200
 8006984:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006988:	f7fd ffb0 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 800698c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006992:	2b00      	cmp	r3, #0
 8006994:	d044      	beq.n	8006a20 <UART_SetConfig+0x1008>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699a:	2b01      	cmp	r3, #1
 800699c:	d03e      	beq.n	8006a1c <UART_SetConfig+0x1004>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d038      	beq.n	8006a18 <UART_SetConfig+0x1000>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d032      	beq.n	8006a14 <UART_SetConfig+0xffc>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d02c      	beq.n	8006a10 <UART_SetConfig+0xff8>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ba:	2b05      	cmp	r3, #5
 80069bc:	d026      	beq.n	8006a0c <UART_SetConfig+0xff4>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	2b06      	cmp	r3, #6
 80069c4:	d020      	beq.n	8006a08 <UART_SetConfig+0xff0>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	2b07      	cmp	r3, #7
 80069cc:	d01a      	beq.n	8006a04 <UART_SetConfig+0xfec>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d014      	beq.n	8006a00 <UART_SetConfig+0xfe8>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069da:	2b09      	cmp	r3, #9
 80069dc:	d00e      	beq.n	80069fc <UART_SetConfig+0xfe4>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	2b0a      	cmp	r3, #10
 80069e4:	d008      	beq.n	80069f8 <UART_SetConfig+0xfe0>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	2b0b      	cmp	r3, #11
 80069ec:	d102      	bne.n	80069f4 <UART_SetConfig+0xfdc>
 80069ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069f2:	e016      	b.n	8006a22 <UART_SetConfig+0x100a>
 80069f4:	2301      	movs	r3, #1
 80069f6:	e014      	b.n	8006a22 <UART_SetConfig+0x100a>
 80069f8:	2380      	movs	r3, #128	; 0x80
 80069fa:	e012      	b.n	8006a22 <UART_SetConfig+0x100a>
 80069fc:	2340      	movs	r3, #64	; 0x40
 80069fe:	e010      	b.n	8006a22 <UART_SetConfig+0x100a>
 8006a00:	2320      	movs	r3, #32
 8006a02:	e00e      	b.n	8006a22 <UART_SetConfig+0x100a>
 8006a04:	2310      	movs	r3, #16
 8006a06:	e00c      	b.n	8006a22 <UART_SetConfig+0x100a>
 8006a08:	230c      	movs	r3, #12
 8006a0a:	e00a      	b.n	8006a22 <UART_SetConfig+0x100a>
 8006a0c:	230a      	movs	r3, #10
 8006a0e:	e008      	b.n	8006a22 <UART_SetConfig+0x100a>
 8006a10:	2308      	movs	r3, #8
 8006a12:	e006      	b.n	8006a22 <UART_SetConfig+0x100a>
 8006a14:	2306      	movs	r3, #6
 8006a16:	e004      	b.n	8006a22 <UART_SetConfig+0x100a>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	e002      	b.n	8006a22 <UART_SetConfig+0x100a>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e000      	b.n	8006a22 <UART_SetConfig+0x100a>
 8006a20:	2301      	movs	r3, #1
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	085b      	lsrs	r3, r3, #1
 8006a2e:	441a      	add	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	61fb      	str	r3, [r7, #28]
        break;
 8006a3c:	e16d      	b.n	8006d1a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a3e:	f7fd ff6b 	bl	8004918 <HAL_RCC_GetPCLK2Freq>
 8006a42:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d044      	beq.n	8006ad6 <UART_SetConfig+0x10be>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d03e      	beq.n	8006ad2 <UART_SetConfig+0x10ba>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d038      	beq.n	8006ace <UART_SetConfig+0x10b6>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	d032      	beq.n	8006aca <UART_SetConfig+0x10b2>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d02c      	beq.n	8006ac6 <UART_SetConfig+0x10ae>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	2b05      	cmp	r3, #5
 8006a72:	d026      	beq.n	8006ac2 <UART_SetConfig+0x10aa>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	2b06      	cmp	r3, #6
 8006a7a:	d020      	beq.n	8006abe <UART_SetConfig+0x10a6>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	2b07      	cmp	r3, #7
 8006a82:	d01a      	beq.n	8006aba <UART_SetConfig+0x10a2>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d014      	beq.n	8006ab6 <UART_SetConfig+0x109e>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	2b09      	cmp	r3, #9
 8006a92:	d00e      	beq.n	8006ab2 <UART_SetConfig+0x109a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a98:	2b0a      	cmp	r3, #10
 8006a9a:	d008      	beq.n	8006aae <UART_SetConfig+0x1096>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	2b0b      	cmp	r3, #11
 8006aa2:	d102      	bne.n	8006aaa <UART_SetConfig+0x1092>
 8006aa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006aa8:	e016      	b.n	8006ad8 <UART_SetConfig+0x10c0>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e014      	b.n	8006ad8 <UART_SetConfig+0x10c0>
 8006aae:	2380      	movs	r3, #128	; 0x80
 8006ab0:	e012      	b.n	8006ad8 <UART_SetConfig+0x10c0>
 8006ab2:	2340      	movs	r3, #64	; 0x40
 8006ab4:	e010      	b.n	8006ad8 <UART_SetConfig+0x10c0>
 8006ab6:	2320      	movs	r3, #32
 8006ab8:	e00e      	b.n	8006ad8 <UART_SetConfig+0x10c0>
 8006aba:	2310      	movs	r3, #16
 8006abc:	e00c      	b.n	8006ad8 <UART_SetConfig+0x10c0>
 8006abe:	230c      	movs	r3, #12
 8006ac0:	e00a      	b.n	8006ad8 <UART_SetConfig+0x10c0>
 8006ac2:	230a      	movs	r3, #10
 8006ac4:	e008      	b.n	8006ad8 <UART_SetConfig+0x10c0>
 8006ac6:	2308      	movs	r3, #8
 8006ac8:	e006      	b.n	8006ad8 <UART_SetConfig+0x10c0>
 8006aca:	2306      	movs	r3, #6
 8006acc:	e004      	b.n	8006ad8 <UART_SetConfig+0x10c0>
 8006ace:	2304      	movs	r3, #4
 8006ad0:	e002      	b.n	8006ad8 <UART_SetConfig+0x10c0>
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	e000      	b.n	8006ad8 <UART_SetConfig+0x10c0>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	085b      	lsrs	r3, r3, #1
 8006ae4:	441a      	add	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	61fb      	str	r3, [r7, #28]
        break;
 8006af2:	e112      	b.n	8006d1a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d044      	beq.n	8006b86 <UART_SetConfig+0x116e>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d03e      	beq.n	8006b82 <UART_SetConfig+0x116a>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d038      	beq.n	8006b7e <UART_SetConfig+0x1166>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d032      	beq.n	8006b7a <UART_SetConfig+0x1162>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d02c      	beq.n	8006b76 <UART_SetConfig+0x115e>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	2b05      	cmp	r3, #5
 8006b22:	d026      	beq.n	8006b72 <UART_SetConfig+0x115a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	2b06      	cmp	r3, #6
 8006b2a:	d020      	beq.n	8006b6e <UART_SetConfig+0x1156>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	2b07      	cmp	r3, #7
 8006b32:	d01a      	beq.n	8006b6a <UART_SetConfig+0x1152>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d014      	beq.n	8006b66 <UART_SetConfig+0x114e>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	2b09      	cmp	r3, #9
 8006b42:	d00e      	beq.n	8006b62 <UART_SetConfig+0x114a>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	2b0a      	cmp	r3, #10
 8006b4a:	d008      	beq.n	8006b5e <UART_SetConfig+0x1146>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	2b0b      	cmp	r3, #11
 8006b52:	d102      	bne.n	8006b5a <UART_SetConfig+0x1142>
 8006b54:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006b58:	e016      	b.n	8006b88 <UART_SetConfig+0x1170>
 8006b5a:	4b81      	ldr	r3, [pc, #516]	; (8006d60 <UART_SetConfig+0x1348>)
 8006b5c:	e014      	b.n	8006b88 <UART_SetConfig+0x1170>
 8006b5e:	4b81      	ldr	r3, [pc, #516]	; (8006d64 <UART_SetConfig+0x134c>)
 8006b60:	e012      	b.n	8006b88 <UART_SetConfig+0x1170>
 8006b62:	4b81      	ldr	r3, [pc, #516]	; (8006d68 <UART_SetConfig+0x1350>)
 8006b64:	e010      	b.n	8006b88 <UART_SetConfig+0x1170>
 8006b66:	4b81      	ldr	r3, [pc, #516]	; (8006d6c <UART_SetConfig+0x1354>)
 8006b68:	e00e      	b.n	8006b88 <UART_SetConfig+0x1170>
 8006b6a:	4b81      	ldr	r3, [pc, #516]	; (8006d70 <UART_SetConfig+0x1358>)
 8006b6c:	e00c      	b.n	8006b88 <UART_SetConfig+0x1170>
 8006b6e:	4b81      	ldr	r3, [pc, #516]	; (8006d74 <UART_SetConfig+0x135c>)
 8006b70:	e00a      	b.n	8006b88 <UART_SetConfig+0x1170>
 8006b72:	4b81      	ldr	r3, [pc, #516]	; (8006d78 <UART_SetConfig+0x1360>)
 8006b74:	e008      	b.n	8006b88 <UART_SetConfig+0x1170>
 8006b76:	4b81      	ldr	r3, [pc, #516]	; (8006d7c <UART_SetConfig+0x1364>)
 8006b78:	e006      	b.n	8006b88 <UART_SetConfig+0x1170>
 8006b7a:	4b81      	ldr	r3, [pc, #516]	; (8006d80 <UART_SetConfig+0x1368>)
 8006b7c:	e004      	b.n	8006b88 <UART_SetConfig+0x1170>
 8006b7e:	4b81      	ldr	r3, [pc, #516]	; (8006d84 <UART_SetConfig+0x136c>)
 8006b80:	e002      	b.n	8006b88 <UART_SetConfig+0x1170>
 8006b82:	4b81      	ldr	r3, [pc, #516]	; (8006d88 <UART_SetConfig+0x1370>)
 8006b84:	e000      	b.n	8006b88 <UART_SetConfig+0x1170>
 8006b86:	4b76      	ldr	r3, [pc, #472]	; (8006d60 <UART_SetConfig+0x1348>)
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6852      	ldr	r2, [r2, #4]
 8006b8c:	0852      	lsrs	r2, r2, #1
 8006b8e:	441a      	add	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	61fb      	str	r3, [r7, #28]
        break;
 8006b9c:	e0bd      	b.n	8006d1a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b9e:	f7fd fe37 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8006ba2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d044      	beq.n	8006c36 <UART_SetConfig+0x121e>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d03e      	beq.n	8006c32 <UART_SetConfig+0x121a>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d038      	beq.n	8006c2e <UART_SetConfig+0x1216>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d032      	beq.n	8006c2a <UART_SetConfig+0x1212>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d02c      	beq.n	8006c26 <UART_SetConfig+0x120e>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	2b05      	cmp	r3, #5
 8006bd2:	d026      	beq.n	8006c22 <UART_SetConfig+0x120a>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	2b06      	cmp	r3, #6
 8006bda:	d020      	beq.n	8006c1e <UART_SetConfig+0x1206>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	2b07      	cmp	r3, #7
 8006be2:	d01a      	beq.n	8006c1a <UART_SetConfig+0x1202>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d014      	beq.n	8006c16 <UART_SetConfig+0x11fe>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	2b09      	cmp	r3, #9
 8006bf2:	d00e      	beq.n	8006c12 <UART_SetConfig+0x11fa>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	2b0a      	cmp	r3, #10
 8006bfa:	d008      	beq.n	8006c0e <UART_SetConfig+0x11f6>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	2b0b      	cmp	r3, #11
 8006c02:	d102      	bne.n	8006c0a <UART_SetConfig+0x11f2>
 8006c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c08:	e016      	b.n	8006c38 <UART_SetConfig+0x1220>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e014      	b.n	8006c38 <UART_SetConfig+0x1220>
 8006c0e:	2380      	movs	r3, #128	; 0x80
 8006c10:	e012      	b.n	8006c38 <UART_SetConfig+0x1220>
 8006c12:	2340      	movs	r3, #64	; 0x40
 8006c14:	e010      	b.n	8006c38 <UART_SetConfig+0x1220>
 8006c16:	2320      	movs	r3, #32
 8006c18:	e00e      	b.n	8006c38 <UART_SetConfig+0x1220>
 8006c1a:	2310      	movs	r3, #16
 8006c1c:	e00c      	b.n	8006c38 <UART_SetConfig+0x1220>
 8006c1e:	230c      	movs	r3, #12
 8006c20:	e00a      	b.n	8006c38 <UART_SetConfig+0x1220>
 8006c22:	230a      	movs	r3, #10
 8006c24:	e008      	b.n	8006c38 <UART_SetConfig+0x1220>
 8006c26:	2308      	movs	r3, #8
 8006c28:	e006      	b.n	8006c38 <UART_SetConfig+0x1220>
 8006c2a:	2306      	movs	r3, #6
 8006c2c:	e004      	b.n	8006c38 <UART_SetConfig+0x1220>
 8006c2e:	2304      	movs	r3, #4
 8006c30:	e002      	b.n	8006c38 <UART_SetConfig+0x1220>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e000      	b.n	8006c38 <UART_SetConfig+0x1220>
 8006c36:	2301      	movs	r3, #1
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	085b      	lsrs	r3, r3, #1
 8006c44:	441a      	add	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	61fb      	str	r3, [r7, #28]
        break;
 8006c52:	e062      	b.n	8006d1a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d04e      	beq.n	8006cfa <UART_SetConfig+0x12e2>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d047      	beq.n	8006cf4 <UART_SetConfig+0x12dc>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d040      	beq.n	8006cee <UART_SetConfig+0x12d6>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	d039      	beq.n	8006ce8 <UART_SetConfig+0x12d0>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d032      	beq.n	8006ce2 <UART_SetConfig+0x12ca>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c80:	2b05      	cmp	r3, #5
 8006c82:	d02b      	beq.n	8006cdc <UART_SetConfig+0x12c4>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	2b06      	cmp	r3, #6
 8006c8a:	d024      	beq.n	8006cd6 <UART_SetConfig+0x12be>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	2b07      	cmp	r3, #7
 8006c92:	d01d      	beq.n	8006cd0 <UART_SetConfig+0x12b8>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d016      	beq.n	8006cca <UART_SetConfig+0x12b2>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	2b09      	cmp	r3, #9
 8006ca2:	d00f      	beq.n	8006cc4 <UART_SetConfig+0x12ac>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	2b0a      	cmp	r3, #10
 8006caa:	d008      	beq.n	8006cbe <UART_SetConfig+0x12a6>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	2b0b      	cmp	r3, #11
 8006cb2:	d101      	bne.n	8006cb8 <UART_SetConfig+0x12a0>
 8006cb4:	2380      	movs	r3, #128	; 0x80
 8006cb6:	e022      	b.n	8006cfe <UART_SetConfig+0x12e6>
 8006cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cbc:	e01f      	b.n	8006cfe <UART_SetConfig+0x12e6>
 8006cbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cc2:	e01c      	b.n	8006cfe <UART_SetConfig+0x12e6>
 8006cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cc8:	e019      	b.n	8006cfe <UART_SetConfig+0x12e6>
 8006cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cce:	e016      	b.n	8006cfe <UART_SetConfig+0x12e6>
 8006cd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006cd4:	e013      	b.n	8006cfe <UART_SetConfig+0x12e6>
 8006cd6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006cda:	e010      	b.n	8006cfe <UART_SetConfig+0x12e6>
 8006cdc:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006ce0:	e00d      	b.n	8006cfe <UART_SetConfig+0x12e6>
 8006ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ce6:	e00a      	b.n	8006cfe <UART_SetConfig+0x12e6>
 8006ce8:	f241 5355 	movw	r3, #5461	; 0x1555
 8006cec:	e007      	b.n	8006cfe <UART_SetConfig+0x12e6>
 8006cee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cf2:	e004      	b.n	8006cfe <UART_SetConfig+0x12e6>
 8006cf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cf8:	e001      	b.n	8006cfe <UART_SetConfig+0x12e6>
 8006cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	6852      	ldr	r2, [r2, #4]
 8006d02:	0852      	lsrs	r2, r2, #1
 8006d04:	441a      	add	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	61fb      	str	r3, [r7, #28]
        break;
 8006d12:	e002      	b.n	8006d1a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	76fb      	strb	r3, [r7, #27]
        break;
 8006d18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	2b0f      	cmp	r3, #15
 8006d1e:	d908      	bls.n	8006d32 <UART_SetConfig+0x131a>
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d26:	d204      	bcs.n	8006d32 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	60da      	str	r2, [r3, #12]
 8006d30:	e001      	b.n	8006d36 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006d52:	7efb      	ldrb	r3, [r7, #27]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3728      	adds	r7, #40	; 0x28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006d5e:	bf00      	nop
 8006d60:	00f42400 	.word	0x00f42400
 8006d64:	0001e848 	.word	0x0001e848
 8006d68:	0003d090 	.word	0x0003d090
 8006d6c:	0007a120 	.word	0x0007a120
 8006d70:	000f4240 	.word	0x000f4240
 8006d74:	00145855 	.word	0x00145855
 8006d78:	00186a00 	.word	0x00186a00
 8006d7c:	001e8480 	.word	0x001e8480
 8006d80:	0028b0aa 	.word	0x0028b0aa
 8006d84:	003d0900 	.word	0x003d0900
 8006d88:	007a1200 	.word	0x007a1200

08006d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00a      	beq.n	8006dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00a      	beq.n	8006dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00a      	beq.n	8006e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	f003 0320 	and.w	r3, r3, #32
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00a      	beq.n	8006e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e8a:	d10a      	bne.n	8006ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006ee0:	f7fa fe68 	bl	8001bb4 <HAL_GetTick>
 8006ee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d10e      	bne.n	8006f12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f82c 	bl	8006f60 <UART_WaitOnFlagUntilTimeout>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e022      	b.n	8006f58 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	d10e      	bne.n	8006f3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f816 	bl	8006f60 <UART_WaitOnFlagUntilTimeout>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e00c      	b.n	8006f58 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2220      	movs	r2, #32
 8006f4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f70:	e02c      	b.n	8006fcc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f78:	d028      	beq.n	8006fcc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f7a:	f7fa fe1b 	bl	8001bb4 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d302      	bcc.n	8006f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d11d      	bne.n	8006fcc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f9e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689a      	ldr	r2, [r3, #8]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0201 	bic.w	r2, r2, #1
 8006fae:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e00f      	b.n	8006fec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69da      	ldr	r2, [r3, #28]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	bf0c      	ite	eq
 8006fdc:	2301      	moveq	r3, #1
 8006fde:	2300      	movne	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d0c3      	beq.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007002:	2b01      	cmp	r3, #1
 8007004:	d101      	bne.n	800700a <HAL_UARTEx_DisableFifoMode+0x16>
 8007006:	2302      	movs	r3, #2
 8007008:	e027      	b.n	800705a <HAL_UARTEx_DisableFifoMode+0x66>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2224      	movs	r2, #36	; 0x24
 8007016:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0201 	bic.w	r2, r2, #1
 8007030:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007038:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2220      	movs	r2, #32
 800704c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007076:	2b01      	cmp	r3, #1
 8007078:	d101      	bne.n	800707e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800707a:	2302      	movs	r3, #2
 800707c:	e02d      	b.n	80070da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2224      	movs	r2, #36	; 0x24
 800708a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f850 	bl	8007160 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e02d      	b.n	8007156 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2224      	movs	r2, #36	; 0x24
 8007106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0201 	bic.w	r2, r2, #1
 8007120:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f812 	bl	8007160 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b089      	sub	sp, #36	; 0x24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007168:	4a2f      	ldr	r2, [pc, #188]	; (8007228 <UARTEx_SetNbDataToProcess+0xc8>)
 800716a:	f107 0314 	add.w	r3, r7, #20
 800716e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007172:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007176:	4a2d      	ldr	r2, [pc, #180]	; (800722c <UARTEx_SetNbDataToProcess+0xcc>)
 8007178:	f107 030c 	add.w	r3, r7, #12
 800717c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007180:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007188:	2b00      	cmp	r3, #0
 800718a:	d108      	bne.n	800719e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800719c:	e03d      	b.n	800721a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800719e:	2308      	movs	r3, #8
 80071a0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80071a2:	2308      	movs	r3, #8
 80071a4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	0e5b      	lsrs	r3, r3, #25
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	f003 0307 	and.w	r3, r3, #7
 80071b4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	0f5b      	lsrs	r3, r3, #29
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	f003 0307 	and.w	r3, r3, #7
 80071c4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80071c6:	7fbb      	ldrb	r3, [r7, #30]
 80071c8:	7f3a      	ldrb	r2, [r7, #28]
 80071ca:	f107 0120 	add.w	r1, r7, #32
 80071ce:	440a      	add	r2, r1
 80071d0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80071d4:	fb02 f303 	mul.w	r3, r2, r3
 80071d8:	7f3a      	ldrb	r2, [r7, #28]
 80071da:	f107 0120 	add.w	r1, r7, #32
 80071de:	440a      	add	r2, r1
 80071e0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80071e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80071f0:	7ffb      	ldrb	r3, [r7, #31]
 80071f2:	7f7a      	ldrb	r2, [r7, #29]
 80071f4:	f107 0120 	add.w	r1, r7, #32
 80071f8:	440a      	add	r2, r1
 80071fa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80071fe:	fb02 f303 	mul.w	r3, r2, r3
 8007202:	7f7a      	ldrb	r2, [r7, #29]
 8007204:	f107 0120 	add.w	r1, r7, #32
 8007208:	440a      	add	r2, r1
 800720a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800720e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007212:	b29a      	uxth	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800721a:	bf00      	nop
 800721c:	3724      	adds	r7, #36	; 0x24
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	0800ad30 	.word	0x0800ad30
 800722c:	0800ad38 	.word	0x0800ad38

08007230 <__errno>:
 8007230:	4b01      	ldr	r3, [pc, #4]	; (8007238 <__errno+0x8>)
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	2000000c 	.word	0x2000000c

0800723c <__libc_init_array>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	4e0d      	ldr	r6, [pc, #52]	; (8007274 <__libc_init_array+0x38>)
 8007240:	4c0d      	ldr	r4, [pc, #52]	; (8007278 <__libc_init_array+0x3c>)
 8007242:	1ba4      	subs	r4, r4, r6
 8007244:	10a4      	asrs	r4, r4, #2
 8007246:	2500      	movs	r5, #0
 8007248:	42a5      	cmp	r5, r4
 800724a:	d109      	bne.n	8007260 <__libc_init_array+0x24>
 800724c:	4e0b      	ldr	r6, [pc, #44]	; (800727c <__libc_init_array+0x40>)
 800724e:	4c0c      	ldr	r4, [pc, #48]	; (8007280 <__libc_init_array+0x44>)
 8007250:	f003 fd58 	bl	800ad04 <_init>
 8007254:	1ba4      	subs	r4, r4, r6
 8007256:	10a4      	asrs	r4, r4, #2
 8007258:	2500      	movs	r5, #0
 800725a:	42a5      	cmp	r5, r4
 800725c:	d105      	bne.n	800726a <__libc_init_array+0x2e>
 800725e:	bd70      	pop	{r4, r5, r6, pc}
 8007260:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007264:	4798      	blx	r3
 8007266:	3501      	adds	r5, #1
 8007268:	e7ee      	b.n	8007248 <__libc_init_array+0xc>
 800726a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800726e:	4798      	blx	r3
 8007270:	3501      	adds	r5, #1
 8007272:	e7f2      	b.n	800725a <__libc_init_array+0x1e>
 8007274:	0800b018 	.word	0x0800b018
 8007278:	0800b018 	.word	0x0800b018
 800727c:	0800b018 	.word	0x0800b018
 8007280:	0800b01c 	.word	0x0800b01c

08007284 <memset>:
 8007284:	4402      	add	r2, r0
 8007286:	4603      	mov	r3, r0
 8007288:	4293      	cmp	r3, r2
 800728a:	d100      	bne.n	800728e <memset+0xa>
 800728c:	4770      	bx	lr
 800728e:	f803 1b01 	strb.w	r1, [r3], #1
 8007292:	e7f9      	b.n	8007288 <memset+0x4>

08007294 <__cvt>:
 8007294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007298:	ec55 4b10 	vmov	r4, r5, d0
 800729c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800729e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072a2:	2d00      	cmp	r5, #0
 80072a4:	460e      	mov	r6, r1
 80072a6:	4691      	mov	r9, r2
 80072a8:	4619      	mov	r1, r3
 80072aa:	bfb8      	it	lt
 80072ac:	4622      	movlt	r2, r4
 80072ae:	462b      	mov	r3, r5
 80072b0:	f027 0720 	bic.w	r7, r7, #32
 80072b4:	bfbb      	ittet	lt
 80072b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072ba:	461d      	movlt	r5, r3
 80072bc:	2300      	movge	r3, #0
 80072be:	232d      	movlt	r3, #45	; 0x2d
 80072c0:	bfb8      	it	lt
 80072c2:	4614      	movlt	r4, r2
 80072c4:	2f46      	cmp	r7, #70	; 0x46
 80072c6:	700b      	strb	r3, [r1, #0]
 80072c8:	d004      	beq.n	80072d4 <__cvt+0x40>
 80072ca:	2f45      	cmp	r7, #69	; 0x45
 80072cc:	d100      	bne.n	80072d0 <__cvt+0x3c>
 80072ce:	3601      	adds	r6, #1
 80072d0:	2102      	movs	r1, #2
 80072d2:	e000      	b.n	80072d6 <__cvt+0x42>
 80072d4:	2103      	movs	r1, #3
 80072d6:	ab03      	add	r3, sp, #12
 80072d8:	9301      	str	r3, [sp, #4]
 80072da:	ab02      	add	r3, sp, #8
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	4632      	mov	r2, r6
 80072e0:	4653      	mov	r3, sl
 80072e2:	ec45 4b10 	vmov	d0, r4, r5
 80072e6:	f001 fd77 	bl	8008dd8 <_dtoa_r>
 80072ea:	2f47      	cmp	r7, #71	; 0x47
 80072ec:	4680      	mov	r8, r0
 80072ee:	d102      	bne.n	80072f6 <__cvt+0x62>
 80072f0:	f019 0f01 	tst.w	r9, #1
 80072f4:	d026      	beq.n	8007344 <__cvt+0xb0>
 80072f6:	2f46      	cmp	r7, #70	; 0x46
 80072f8:	eb08 0906 	add.w	r9, r8, r6
 80072fc:	d111      	bne.n	8007322 <__cvt+0x8e>
 80072fe:	f898 3000 	ldrb.w	r3, [r8]
 8007302:	2b30      	cmp	r3, #48	; 0x30
 8007304:	d10a      	bne.n	800731c <__cvt+0x88>
 8007306:	2200      	movs	r2, #0
 8007308:	2300      	movs	r3, #0
 800730a:	4620      	mov	r0, r4
 800730c:	4629      	mov	r1, r5
 800730e:	f7f9 fc03 	bl	8000b18 <__aeabi_dcmpeq>
 8007312:	b918      	cbnz	r0, 800731c <__cvt+0x88>
 8007314:	f1c6 0601 	rsb	r6, r6, #1
 8007318:	f8ca 6000 	str.w	r6, [sl]
 800731c:	f8da 3000 	ldr.w	r3, [sl]
 8007320:	4499      	add	r9, r3
 8007322:	2200      	movs	r2, #0
 8007324:	2300      	movs	r3, #0
 8007326:	4620      	mov	r0, r4
 8007328:	4629      	mov	r1, r5
 800732a:	f7f9 fbf5 	bl	8000b18 <__aeabi_dcmpeq>
 800732e:	b938      	cbnz	r0, 8007340 <__cvt+0xac>
 8007330:	2230      	movs	r2, #48	; 0x30
 8007332:	9b03      	ldr	r3, [sp, #12]
 8007334:	454b      	cmp	r3, r9
 8007336:	d205      	bcs.n	8007344 <__cvt+0xb0>
 8007338:	1c59      	adds	r1, r3, #1
 800733a:	9103      	str	r1, [sp, #12]
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	e7f8      	b.n	8007332 <__cvt+0x9e>
 8007340:	f8cd 900c 	str.w	r9, [sp, #12]
 8007344:	9b03      	ldr	r3, [sp, #12]
 8007346:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007348:	eba3 0308 	sub.w	r3, r3, r8
 800734c:	4640      	mov	r0, r8
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	b004      	add	sp, #16
 8007352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007356 <__exponent>:
 8007356:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007358:	2900      	cmp	r1, #0
 800735a:	4604      	mov	r4, r0
 800735c:	bfba      	itte	lt
 800735e:	4249      	neglt	r1, r1
 8007360:	232d      	movlt	r3, #45	; 0x2d
 8007362:	232b      	movge	r3, #43	; 0x2b
 8007364:	2909      	cmp	r1, #9
 8007366:	f804 2b02 	strb.w	r2, [r4], #2
 800736a:	7043      	strb	r3, [r0, #1]
 800736c:	dd20      	ble.n	80073b0 <__exponent+0x5a>
 800736e:	f10d 0307 	add.w	r3, sp, #7
 8007372:	461f      	mov	r7, r3
 8007374:	260a      	movs	r6, #10
 8007376:	fb91 f5f6 	sdiv	r5, r1, r6
 800737a:	fb06 1115 	mls	r1, r6, r5, r1
 800737e:	3130      	adds	r1, #48	; 0x30
 8007380:	2d09      	cmp	r5, #9
 8007382:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007386:	f103 32ff 	add.w	r2, r3, #4294967295
 800738a:	4629      	mov	r1, r5
 800738c:	dc09      	bgt.n	80073a2 <__exponent+0x4c>
 800738e:	3130      	adds	r1, #48	; 0x30
 8007390:	3b02      	subs	r3, #2
 8007392:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007396:	42bb      	cmp	r3, r7
 8007398:	4622      	mov	r2, r4
 800739a:	d304      	bcc.n	80073a6 <__exponent+0x50>
 800739c:	1a10      	subs	r0, r2, r0
 800739e:	b003      	add	sp, #12
 80073a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a2:	4613      	mov	r3, r2
 80073a4:	e7e7      	b.n	8007376 <__exponent+0x20>
 80073a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073aa:	f804 2b01 	strb.w	r2, [r4], #1
 80073ae:	e7f2      	b.n	8007396 <__exponent+0x40>
 80073b0:	2330      	movs	r3, #48	; 0x30
 80073b2:	4419      	add	r1, r3
 80073b4:	7083      	strb	r3, [r0, #2]
 80073b6:	1d02      	adds	r2, r0, #4
 80073b8:	70c1      	strb	r1, [r0, #3]
 80073ba:	e7ef      	b.n	800739c <__exponent+0x46>

080073bc <_printf_float>:
 80073bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c0:	b08d      	sub	sp, #52	; 0x34
 80073c2:	460c      	mov	r4, r1
 80073c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80073c8:	4616      	mov	r6, r2
 80073ca:	461f      	mov	r7, r3
 80073cc:	4605      	mov	r5, r0
 80073ce:	f002 fde7 	bl	8009fa0 <_localeconv_r>
 80073d2:	6803      	ldr	r3, [r0, #0]
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7f8 ff22 	bl	8000220 <strlen>
 80073dc:	2300      	movs	r3, #0
 80073de:	930a      	str	r3, [sp, #40]	; 0x28
 80073e0:	f8d8 3000 	ldr.w	r3, [r8]
 80073e4:	9005      	str	r0, [sp, #20]
 80073e6:	3307      	adds	r3, #7
 80073e8:	f023 0307 	bic.w	r3, r3, #7
 80073ec:	f103 0208 	add.w	r2, r3, #8
 80073f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80073f4:	f8d4 b000 	ldr.w	fp, [r4]
 80073f8:	f8c8 2000 	str.w	r2, [r8]
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007404:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007408:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800740c:	9307      	str	r3, [sp, #28]
 800740e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007412:	f04f 32ff 	mov.w	r2, #4294967295
 8007416:	4ba7      	ldr	r3, [pc, #668]	; (80076b4 <_printf_float+0x2f8>)
 8007418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800741c:	f7f9 fbae 	bl	8000b7c <__aeabi_dcmpun>
 8007420:	bb70      	cbnz	r0, 8007480 <_printf_float+0xc4>
 8007422:	f04f 32ff 	mov.w	r2, #4294967295
 8007426:	4ba3      	ldr	r3, [pc, #652]	; (80076b4 <_printf_float+0x2f8>)
 8007428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800742c:	f7f9 fb88 	bl	8000b40 <__aeabi_dcmple>
 8007430:	bb30      	cbnz	r0, 8007480 <_printf_float+0xc4>
 8007432:	2200      	movs	r2, #0
 8007434:	2300      	movs	r3, #0
 8007436:	4640      	mov	r0, r8
 8007438:	4649      	mov	r1, r9
 800743a:	f7f9 fb77 	bl	8000b2c <__aeabi_dcmplt>
 800743e:	b110      	cbz	r0, 8007446 <_printf_float+0x8a>
 8007440:	232d      	movs	r3, #45	; 0x2d
 8007442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007446:	4a9c      	ldr	r2, [pc, #624]	; (80076b8 <_printf_float+0x2fc>)
 8007448:	4b9c      	ldr	r3, [pc, #624]	; (80076bc <_printf_float+0x300>)
 800744a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800744e:	bf8c      	ite	hi
 8007450:	4690      	movhi	r8, r2
 8007452:	4698      	movls	r8, r3
 8007454:	2303      	movs	r3, #3
 8007456:	f02b 0204 	bic.w	r2, fp, #4
 800745a:	6123      	str	r3, [r4, #16]
 800745c:	6022      	str	r2, [r4, #0]
 800745e:	f04f 0900 	mov.w	r9, #0
 8007462:	9700      	str	r7, [sp, #0]
 8007464:	4633      	mov	r3, r6
 8007466:	aa0b      	add	r2, sp, #44	; 0x2c
 8007468:	4621      	mov	r1, r4
 800746a:	4628      	mov	r0, r5
 800746c:	f000 f9e6 	bl	800783c <_printf_common>
 8007470:	3001      	adds	r0, #1
 8007472:	f040 808d 	bne.w	8007590 <_printf_float+0x1d4>
 8007476:	f04f 30ff 	mov.w	r0, #4294967295
 800747a:	b00d      	add	sp, #52	; 0x34
 800747c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007480:	4642      	mov	r2, r8
 8007482:	464b      	mov	r3, r9
 8007484:	4640      	mov	r0, r8
 8007486:	4649      	mov	r1, r9
 8007488:	f7f9 fb78 	bl	8000b7c <__aeabi_dcmpun>
 800748c:	b110      	cbz	r0, 8007494 <_printf_float+0xd8>
 800748e:	4a8c      	ldr	r2, [pc, #560]	; (80076c0 <_printf_float+0x304>)
 8007490:	4b8c      	ldr	r3, [pc, #560]	; (80076c4 <_printf_float+0x308>)
 8007492:	e7da      	b.n	800744a <_printf_float+0x8e>
 8007494:	6861      	ldr	r1, [r4, #4]
 8007496:	1c4b      	adds	r3, r1, #1
 8007498:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800749c:	a80a      	add	r0, sp, #40	; 0x28
 800749e:	d13e      	bne.n	800751e <_printf_float+0x162>
 80074a0:	2306      	movs	r3, #6
 80074a2:	6063      	str	r3, [r4, #4]
 80074a4:	2300      	movs	r3, #0
 80074a6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80074aa:	ab09      	add	r3, sp, #36	; 0x24
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	ec49 8b10 	vmov	d0, r8, r9
 80074b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80074b6:	6022      	str	r2, [r4, #0]
 80074b8:	f8cd a004 	str.w	sl, [sp, #4]
 80074bc:	6861      	ldr	r1, [r4, #4]
 80074be:	4628      	mov	r0, r5
 80074c0:	f7ff fee8 	bl	8007294 <__cvt>
 80074c4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80074c8:	2b47      	cmp	r3, #71	; 0x47
 80074ca:	4680      	mov	r8, r0
 80074cc:	d109      	bne.n	80074e2 <_printf_float+0x126>
 80074ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d0:	1cd8      	adds	r0, r3, #3
 80074d2:	db02      	blt.n	80074da <_printf_float+0x11e>
 80074d4:	6862      	ldr	r2, [r4, #4]
 80074d6:	4293      	cmp	r3, r2
 80074d8:	dd47      	ble.n	800756a <_printf_float+0x1ae>
 80074da:	f1aa 0a02 	sub.w	sl, sl, #2
 80074de:	fa5f fa8a 	uxtb.w	sl, sl
 80074e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80074e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074e8:	d824      	bhi.n	8007534 <_printf_float+0x178>
 80074ea:	3901      	subs	r1, #1
 80074ec:	4652      	mov	r2, sl
 80074ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80074f2:	9109      	str	r1, [sp, #36]	; 0x24
 80074f4:	f7ff ff2f 	bl	8007356 <__exponent>
 80074f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074fa:	1813      	adds	r3, r2, r0
 80074fc:	2a01      	cmp	r2, #1
 80074fe:	4681      	mov	r9, r0
 8007500:	6123      	str	r3, [r4, #16]
 8007502:	dc02      	bgt.n	800750a <_printf_float+0x14e>
 8007504:	6822      	ldr	r2, [r4, #0]
 8007506:	07d1      	lsls	r1, r2, #31
 8007508:	d501      	bpl.n	800750e <_printf_float+0x152>
 800750a:	3301      	adds	r3, #1
 800750c:	6123      	str	r3, [r4, #16]
 800750e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0a5      	beq.n	8007462 <_printf_float+0xa6>
 8007516:	232d      	movs	r3, #45	; 0x2d
 8007518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800751c:	e7a1      	b.n	8007462 <_printf_float+0xa6>
 800751e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007522:	f000 8177 	beq.w	8007814 <_printf_float+0x458>
 8007526:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800752a:	d1bb      	bne.n	80074a4 <_printf_float+0xe8>
 800752c:	2900      	cmp	r1, #0
 800752e:	d1b9      	bne.n	80074a4 <_printf_float+0xe8>
 8007530:	2301      	movs	r3, #1
 8007532:	e7b6      	b.n	80074a2 <_printf_float+0xe6>
 8007534:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007538:	d119      	bne.n	800756e <_printf_float+0x1b2>
 800753a:	2900      	cmp	r1, #0
 800753c:	6863      	ldr	r3, [r4, #4]
 800753e:	dd0c      	ble.n	800755a <_printf_float+0x19e>
 8007540:	6121      	str	r1, [r4, #16]
 8007542:	b913      	cbnz	r3, 800754a <_printf_float+0x18e>
 8007544:	6822      	ldr	r2, [r4, #0]
 8007546:	07d2      	lsls	r2, r2, #31
 8007548:	d502      	bpl.n	8007550 <_printf_float+0x194>
 800754a:	3301      	adds	r3, #1
 800754c:	440b      	add	r3, r1
 800754e:	6123      	str	r3, [r4, #16]
 8007550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007552:	65a3      	str	r3, [r4, #88]	; 0x58
 8007554:	f04f 0900 	mov.w	r9, #0
 8007558:	e7d9      	b.n	800750e <_printf_float+0x152>
 800755a:	b913      	cbnz	r3, 8007562 <_printf_float+0x1a6>
 800755c:	6822      	ldr	r2, [r4, #0]
 800755e:	07d0      	lsls	r0, r2, #31
 8007560:	d501      	bpl.n	8007566 <_printf_float+0x1aa>
 8007562:	3302      	adds	r3, #2
 8007564:	e7f3      	b.n	800754e <_printf_float+0x192>
 8007566:	2301      	movs	r3, #1
 8007568:	e7f1      	b.n	800754e <_printf_float+0x192>
 800756a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800756e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007572:	4293      	cmp	r3, r2
 8007574:	db05      	blt.n	8007582 <_printf_float+0x1c6>
 8007576:	6822      	ldr	r2, [r4, #0]
 8007578:	6123      	str	r3, [r4, #16]
 800757a:	07d1      	lsls	r1, r2, #31
 800757c:	d5e8      	bpl.n	8007550 <_printf_float+0x194>
 800757e:	3301      	adds	r3, #1
 8007580:	e7e5      	b.n	800754e <_printf_float+0x192>
 8007582:	2b00      	cmp	r3, #0
 8007584:	bfd4      	ite	le
 8007586:	f1c3 0302 	rsble	r3, r3, #2
 800758a:	2301      	movgt	r3, #1
 800758c:	4413      	add	r3, r2
 800758e:	e7de      	b.n	800754e <_printf_float+0x192>
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	055a      	lsls	r2, r3, #21
 8007594:	d407      	bmi.n	80075a6 <_printf_float+0x1ea>
 8007596:	6923      	ldr	r3, [r4, #16]
 8007598:	4642      	mov	r2, r8
 800759a:	4631      	mov	r1, r6
 800759c:	4628      	mov	r0, r5
 800759e:	47b8      	blx	r7
 80075a0:	3001      	adds	r0, #1
 80075a2:	d12b      	bne.n	80075fc <_printf_float+0x240>
 80075a4:	e767      	b.n	8007476 <_printf_float+0xba>
 80075a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80075aa:	f240 80dc 	bls.w	8007766 <_printf_float+0x3aa>
 80075ae:	2200      	movs	r2, #0
 80075b0:	2300      	movs	r3, #0
 80075b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075b6:	f7f9 faaf 	bl	8000b18 <__aeabi_dcmpeq>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d033      	beq.n	8007626 <_printf_float+0x26a>
 80075be:	2301      	movs	r3, #1
 80075c0:	4a41      	ldr	r2, [pc, #260]	; (80076c8 <_printf_float+0x30c>)
 80075c2:	4631      	mov	r1, r6
 80075c4:	4628      	mov	r0, r5
 80075c6:	47b8      	blx	r7
 80075c8:	3001      	adds	r0, #1
 80075ca:	f43f af54 	beq.w	8007476 <_printf_float+0xba>
 80075ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075d2:	429a      	cmp	r2, r3
 80075d4:	db02      	blt.n	80075dc <_printf_float+0x220>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	07d8      	lsls	r0, r3, #31
 80075da:	d50f      	bpl.n	80075fc <_printf_float+0x240>
 80075dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075e0:	4631      	mov	r1, r6
 80075e2:	4628      	mov	r0, r5
 80075e4:	47b8      	blx	r7
 80075e6:	3001      	adds	r0, #1
 80075e8:	f43f af45 	beq.w	8007476 <_printf_float+0xba>
 80075ec:	f04f 0800 	mov.w	r8, #0
 80075f0:	f104 091a 	add.w	r9, r4, #26
 80075f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f6:	3b01      	subs	r3, #1
 80075f8:	4543      	cmp	r3, r8
 80075fa:	dc09      	bgt.n	8007610 <_printf_float+0x254>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	079b      	lsls	r3, r3, #30
 8007600:	f100 8103 	bmi.w	800780a <_printf_float+0x44e>
 8007604:	68e0      	ldr	r0, [r4, #12]
 8007606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007608:	4298      	cmp	r0, r3
 800760a:	bfb8      	it	lt
 800760c:	4618      	movlt	r0, r3
 800760e:	e734      	b.n	800747a <_printf_float+0xbe>
 8007610:	2301      	movs	r3, #1
 8007612:	464a      	mov	r2, r9
 8007614:	4631      	mov	r1, r6
 8007616:	4628      	mov	r0, r5
 8007618:	47b8      	blx	r7
 800761a:	3001      	adds	r0, #1
 800761c:	f43f af2b 	beq.w	8007476 <_printf_float+0xba>
 8007620:	f108 0801 	add.w	r8, r8, #1
 8007624:	e7e6      	b.n	80075f4 <_printf_float+0x238>
 8007626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007628:	2b00      	cmp	r3, #0
 800762a:	dc2b      	bgt.n	8007684 <_printf_float+0x2c8>
 800762c:	2301      	movs	r3, #1
 800762e:	4a26      	ldr	r2, [pc, #152]	; (80076c8 <_printf_float+0x30c>)
 8007630:	4631      	mov	r1, r6
 8007632:	4628      	mov	r0, r5
 8007634:	47b8      	blx	r7
 8007636:	3001      	adds	r0, #1
 8007638:	f43f af1d 	beq.w	8007476 <_printf_float+0xba>
 800763c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800763e:	b923      	cbnz	r3, 800764a <_printf_float+0x28e>
 8007640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007642:	b913      	cbnz	r3, 800764a <_printf_float+0x28e>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	07d9      	lsls	r1, r3, #31
 8007648:	d5d8      	bpl.n	80075fc <_printf_float+0x240>
 800764a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800764e:	4631      	mov	r1, r6
 8007650:	4628      	mov	r0, r5
 8007652:	47b8      	blx	r7
 8007654:	3001      	adds	r0, #1
 8007656:	f43f af0e 	beq.w	8007476 <_printf_float+0xba>
 800765a:	f04f 0900 	mov.w	r9, #0
 800765e:	f104 0a1a 	add.w	sl, r4, #26
 8007662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007664:	425b      	negs	r3, r3
 8007666:	454b      	cmp	r3, r9
 8007668:	dc01      	bgt.n	800766e <_printf_float+0x2b2>
 800766a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800766c:	e794      	b.n	8007598 <_printf_float+0x1dc>
 800766e:	2301      	movs	r3, #1
 8007670:	4652      	mov	r2, sl
 8007672:	4631      	mov	r1, r6
 8007674:	4628      	mov	r0, r5
 8007676:	47b8      	blx	r7
 8007678:	3001      	adds	r0, #1
 800767a:	f43f aefc 	beq.w	8007476 <_printf_float+0xba>
 800767e:	f109 0901 	add.w	r9, r9, #1
 8007682:	e7ee      	b.n	8007662 <_printf_float+0x2a6>
 8007684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007688:	429a      	cmp	r2, r3
 800768a:	bfa8      	it	ge
 800768c:	461a      	movge	r2, r3
 800768e:	2a00      	cmp	r2, #0
 8007690:	4691      	mov	r9, r2
 8007692:	dd07      	ble.n	80076a4 <_printf_float+0x2e8>
 8007694:	4613      	mov	r3, r2
 8007696:	4631      	mov	r1, r6
 8007698:	4642      	mov	r2, r8
 800769a:	4628      	mov	r0, r5
 800769c:	47b8      	blx	r7
 800769e:	3001      	adds	r0, #1
 80076a0:	f43f aee9 	beq.w	8007476 <_printf_float+0xba>
 80076a4:	f104 031a 	add.w	r3, r4, #26
 80076a8:	f04f 0b00 	mov.w	fp, #0
 80076ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076b0:	9306      	str	r3, [sp, #24]
 80076b2:	e015      	b.n	80076e0 <_printf_float+0x324>
 80076b4:	7fefffff 	.word	0x7fefffff
 80076b8:	0800ad5c 	.word	0x0800ad5c
 80076bc:	0800ad58 	.word	0x0800ad58
 80076c0:	0800ad64 	.word	0x0800ad64
 80076c4:	0800ad60 	.word	0x0800ad60
 80076c8:	0800ad68 	.word	0x0800ad68
 80076cc:	2301      	movs	r3, #1
 80076ce:	9a06      	ldr	r2, [sp, #24]
 80076d0:	4631      	mov	r1, r6
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	f43f aecd 	beq.w	8007476 <_printf_float+0xba>
 80076dc:	f10b 0b01 	add.w	fp, fp, #1
 80076e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80076e4:	ebaa 0309 	sub.w	r3, sl, r9
 80076e8:	455b      	cmp	r3, fp
 80076ea:	dcef      	bgt.n	80076cc <_printf_float+0x310>
 80076ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076f0:	429a      	cmp	r2, r3
 80076f2:	44d0      	add	r8, sl
 80076f4:	db15      	blt.n	8007722 <_printf_float+0x366>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	07da      	lsls	r2, r3, #31
 80076fa:	d412      	bmi.n	8007722 <_printf_float+0x366>
 80076fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007700:	eba3 020a 	sub.w	r2, r3, sl
 8007704:	eba3 0a01 	sub.w	sl, r3, r1
 8007708:	4592      	cmp	sl, r2
 800770a:	bfa8      	it	ge
 800770c:	4692      	movge	sl, r2
 800770e:	f1ba 0f00 	cmp.w	sl, #0
 8007712:	dc0e      	bgt.n	8007732 <_printf_float+0x376>
 8007714:	f04f 0800 	mov.w	r8, #0
 8007718:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800771c:	f104 091a 	add.w	r9, r4, #26
 8007720:	e019      	b.n	8007756 <_printf_float+0x39a>
 8007722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007726:	4631      	mov	r1, r6
 8007728:	4628      	mov	r0, r5
 800772a:	47b8      	blx	r7
 800772c:	3001      	adds	r0, #1
 800772e:	d1e5      	bne.n	80076fc <_printf_float+0x340>
 8007730:	e6a1      	b.n	8007476 <_printf_float+0xba>
 8007732:	4653      	mov	r3, sl
 8007734:	4642      	mov	r2, r8
 8007736:	4631      	mov	r1, r6
 8007738:	4628      	mov	r0, r5
 800773a:	47b8      	blx	r7
 800773c:	3001      	adds	r0, #1
 800773e:	d1e9      	bne.n	8007714 <_printf_float+0x358>
 8007740:	e699      	b.n	8007476 <_printf_float+0xba>
 8007742:	2301      	movs	r3, #1
 8007744:	464a      	mov	r2, r9
 8007746:	4631      	mov	r1, r6
 8007748:	4628      	mov	r0, r5
 800774a:	47b8      	blx	r7
 800774c:	3001      	adds	r0, #1
 800774e:	f43f ae92 	beq.w	8007476 <_printf_float+0xba>
 8007752:	f108 0801 	add.w	r8, r8, #1
 8007756:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800775a:	1a9b      	subs	r3, r3, r2
 800775c:	eba3 030a 	sub.w	r3, r3, sl
 8007760:	4543      	cmp	r3, r8
 8007762:	dcee      	bgt.n	8007742 <_printf_float+0x386>
 8007764:	e74a      	b.n	80075fc <_printf_float+0x240>
 8007766:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007768:	2a01      	cmp	r2, #1
 800776a:	dc01      	bgt.n	8007770 <_printf_float+0x3b4>
 800776c:	07db      	lsls	r3, r3, #31
 800776e:	d53a      	bpl.n	80077e6 <_printf_float+0x42a>
 8007770:	2301      	movs	r3, #1
 8007772:	4642      	mov	r2, r8
 8007774:	4631      	mov	r1, r6
 8007776:	4628      	mov	r0, r5
 8007778:	47b8      	blx	r7
 800777a:	3001      	adds	r0, #1
 800777c:	f43f ae7b 	beq.w	8007476 <_printf_float+0xba>
 8007780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007784:	4631      	mov	r1, r6
 8007786:	4628      	mov	r0, r5
 8007788:	47b8      	blx	r7
 800778a:	3001      	adds	r0, #1
 800778c:	f108 0801 	add.w	r8, r8, #1
 8007790:	f43f ae71 	beq.w	8007476 <_printf_float+0xba>
 8007794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007796:	2200      	movs	r2, #0
 8007798:	f103 3aff 	add.w	sl, r3, #4294967295
 800779c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077a0:	2300      	movs	r3, #0
 80077a2:	f7f9 f9b9 	bl	8000b18 <__aeabi_dcmpeq>
 80077a6:	b9c8      	cbnz	r0, 80077dc <_printf_float+0x420>
 80077a8:	4653      	mov	r3, sl
 80077aa:	4642      	mov	r2, r8
 80077ac:	4631      	mov	r1, r6
 80077ae:	4628      	mov	r0, r5
 80077b0:	47b8      	blx	r7
 80077b2:	3001      	adds	r0, #1
 80077b4:	d10e      	bne.n	80077d4 <_printf_float+0x418>
 80077b6:	e65e      	b.n	8007476 <_printf_float+0xba>
 80077b8:	2301      	movs	r3, #1
 80077ba:	4652      	mov	r2, sl
 80077bc:	4631      	mov	r1, r6
 80077be:	4628      	mov	r0, r5
 80077c0:	47b8      	blx	r7
 80077c2:	3001      	adds	r0, #1
 80077c4:	f43f ae57 	beq.w	8007476 <_printf_float+0xba>
 80077c8:	f108 0801 	add.w	r8, r8, #1
 80077cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ce:	3b01      	subs	r3, #1
 80077d0:	4543      	cmp	r3, r8
 80077d2:	dcf1      	bgt.n	80077b8 <_printf_float+0x3fc>
 80077d4:	464b      	mov	r3, r9
 80077d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077da:	e6de      	b.n	800759a <_printf_float+0x1de>
 80077dc:	f04f 0800 	mov.w	r8, #0
 80077e0:	f104 0a1a 	add.w	sl, r4, #26
 80077e4:	e7f2      	b.n	80077cc <_printf_float+0x410>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e7df      	b.n	80077aa <_printf_float+0x3ee>
 80077ea:	2301      	movs	r3, #1
 80077ec:	464a      	mov	r2, r9
 80077ee:	4631      	mov	r1, r6
 80077f0:	4628      	mov	r0, r5
 80077f2:	47b8      	blx	r7
 80077f4:	3001      	adds	r0, #1
 80077f6:	f43f ae3e 	beq.w	8007476 <_printf_float+0xba>
 80077fa:	f108 0801 	add.w	r8, r8, #1
 80077fe:	68e3      	ldr	r3, [r4, #12]
 8007800:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007802:	1a9b      	subs	r3, r3, r2
 8007804:	4543      	cmp	r3, r8
 8007806:	dcf0      	bgt.n	80077ea <_printf_float+0x42e>
 8007808:	e6fc      	b.n	8007604 <_printf_float+0x248>
 800780a:	f04f 0800 	mov.w	r8, #0
 800780e:	f104 0919 	add.w	r9, r4, #25
 8007812:	e7f4      	b.n	80077fe <_printf_float+0x442>
 8007814:	2900      	cmp	r1, #0
 8007816:	f43f ae8b 	beq.w	8007530 <_printf_float+0x174>
 800781a:	2300      	movs	r3, #0
 800781c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007820:	ab09      	add	r3, sp, #36	; 0x24
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	ec49 8b10 	vmov	d0, r8, r9
 8007828:	6022      	str	r2, [r4, #0]
 800782a:	f8cd a004 	str.w	sl, [sp, #4]
 800782e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007832:	4628      	mov	r0, r5
 8007834:	f7ff fd2e 	bl	8007294 <__cvt>
 8007838:	4680      	mov	r8, r0
 800783a:	e648      	b.n	80074ce <_printf_float+0x112>

0800783c <_printf_common>:
 800783c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007840:	4691      	mov	r9, r2
 8007842:	461f      	mov	r7, r3
 8007844:	688a      	ldr	r2, [r1, #8]
 8007846:	690b      	ldr	r3, [r1, #16]
 8007848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800784c:	4293      	cmp	r3, r2
 800784e:	bfb8      	it	lt
 8007850:	4613      	movlt	r3, r2
 8007852:	f8c9 3000 	str.w	r3, [r9]
 8007856:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800785a:	4606      	mov	r6, r0
 800785c:	460c      	mov	r4, r1
 800785e:	b112      	cbz	r2, 8007866 <_printf_common+0x2a>
 8007860:	3301      	adds	r3, #1
 8007862:	f8c9 3000 	str.w	r3, [r9]
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	0699      	lsls	r1, r3, #26
 800786a:	bf42      	ittt	mi
 800786c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007870:	3302      	addmi	r3, #2
 8007872:	f8c9 3000 	strmi.w	r3, [r9]
 8007876:	6825      	ldr	r5, [r4, #0]
 8007878:	f015 0506 	ands.w	r5, r5, #6
 800787c:	d107      	bne.n	800788e <_printf_common+0x52>
 800787e:	f104 0a19 	add.w	sl, r4, #25
 8007882:	68e3      	ldr	r3, [r4, #12]
 8007884:	f8d9 2000 	ldr.w	r2, [r9]
 8007888:	1a9b      	subs	r3, r3, r2
 800788a:	42ab      	cmp	r3, r5
 800788c:	dc28      	bgt.n	80078e0 <_printf_common+0xa4>
 800788e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007892:	6822      	ldr	r2, [r4, #0]
 8007894:	3300      	adds	r3, #0
 8007896:	bf18      	it	ne
 8007898:	2301      	movne	r3, #1
 800789a:	0692      	lsls	r2, r2, #26
 800789c:	d42d      	bmi.n	80078fa <_printf_common+0xbe>
 800789e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078a2:	4639      	mov	r1, r7
 80078a4:	4630      	mov	r0, r6
 80078a6:	47c0      	blx	r8
 80078a8:	3001      	adds	r0, #1
 80078aa:	d020      	beq.n	80078ee <_printf_common+0xb2>
 80078ac:	6823      	ldr	r3, [r4, #0]
 80078ae:	68e5      	ldr	r5, [r4, #12]
 80078b0:	f8d9 2000 	ldr.w	r2, [r9]
 80078b4:	f003 0306 	and.w	r3, r3, #6
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	bf08      	it	eq
 80078bc:	1aad      	subeq	r5, r5, r2
 80078be:	68a3      	ldr	r3, [r4, #8]
 80078c0:	6922      	ldr	r2, [r4, #16]
 80078c2:	bf0c      	ite	eq
 80078c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078c8:	2500      	movne	r5, #0
 80078ca:	4293      	cmp	r3, r2
 80078cc:	bfc4      	itt	gt
 80078ce:	1a9b      	subgt	r3, r3, r2
 80078d0:	18ed      	addgt	r5, r5, r3
 80078d2:	f04f 0900 	mov.w	r9, #0
 80078d6:	341a      	adds	r4, #26
 80078d8:	454d      	cmp	r5, r9
 80078da:	d11a      	bne.n	8007912 <_printf_common+0xd6>
 80078dc:	2000      	movs	r0, #0
 80078de:	e008      	b.n	80078f2 <_printf_common+0xb6>
 80078e0:	2301      	movs	r3, #1
 80078e2:	4652      	mov	r2, sl
 80078e4:	4639      	mov	r1, r7
 80078e6:	4630      	mov	r0, r6
 80078e8:	47c0      	blx	r8
 80078ea:	3001      	adds	r0, #1
 80078ec:	d103      	bne.n	80078f6 <_printf_common+0xba>
 80078ee:	f04f 30ff 	mov.w	r0, #4294967295
 80078f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078f6:	3501      	adds	r5, #1
 80078f8:	e7c3      	b.n	8007882 <_printf_common+0x46>
 80078fa:	18e1      	adds	r1, r4, r3
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	2030      	movs	r0, #48	; 0x30
 8007900:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007904:	4422      	add	r2, r4
 8007906:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800790a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800790e:	3302      	adds	r3, #2
 8007910:	e7c5      	b.n	800789e <_printf_common+0x62>
 8007912:	2301      	movs	r3, #1
 8007914:	4622      	mov	r2, r4
 8007916:	4639      	mov	r1, r7
 8007918:	4630      	mov	r0, r6
 800791a:	47c0      	blx	r8
 800791c:	3001      	adds	r0, #1
 800791e:	d0e6      	beq.n	80078ee <_printf_common+0xb2>
 8007920:	f109 0901 	add.w	r9, r9, #1
 8007924:	e7d8      	b.n	80078d8 <_printf_common+0x9c>
	...

08007928 <_printf_i>:
 8007928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800792c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007930:	460c      	mov	r4, r1
 8007932:	7e09      	ldrb	r1, [r1, #24]
 8007934:	b085      	sub	sp, #20
 8007936:	296e      	cmp	r1, #110	; 0x6e
 8007938:	4617      	mov	r7, r2
 800793a:	4606      	mov	r6, r0
 800793c:	4698      	mov	r8, r3
 800793e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007940:	f000 80b3 	beq.w	8007aaa <_printf_i+0x182>
 8007944:	d822      	bhi.n	800798c <_printf_i+0x64>
 8007946:	2963      	cmp	r1, #99	; 0x63
 8007948:	d036      	beq.n	80079b8 <_printf_i+0x90>
 800794a:	d80a      	bhi.n	8007962 <_printf_i+0x3a>
 800794c:	2900      	cmp	r1, #0
 800794e:	f000 80b9 	beq.w	8007ac4 <_printf_i+0x19c>
 8007952:	2958      	cmp	r1, #88	; 0x58
 8007954:	f000 8083 	beq.w	8007a5e <_printf_i+0x136>
 8007958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800795c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007960:	e032      	b.n	80079c8 <_printf_i+0xa0>
 8007962:	2964      	cmp	r1, #100	; 0x64
 8007964:	d001      	beq.n	800796a <_printf_i+0x42>
 8007966:	2969      	cmp	r1, #105	; 0x69
 8007968:	d1f6      	bne.n	8007958 <_printf_i+0x30>
 800796a:	6820      	ldr	r0, [r4, #0]
 800796c:	6813      	ldr	r3, [r2, #0]
 800796e:	0605      	lsls	r5, r0, #24
 8007970:	f103 0104 	add.w	r1, r3, #4
 8007974:	d52a      	bpl.n	80079cc <_printf_i+0xa4>
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6011      	str	r1, [r2, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	da03      	bge.n	8007986 <_printf_i+0x5e>
 800797e:	222d      	movs	r2, #45	; 0x2d
 8007980:	425b      	negs	r3, r3
 8007982:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007986:	486f      	ldr	r0, [pc, #444]	; (8007b44 <_printf_i+0x21c>)
 8007988:	220a      	movs	r2, #10
 800798a:	e039      	b.n	8007a00 <_printf_i+0xd8>
 800798c:	2973      	cmp	r1, #115	; 0x73
 800798e:	f000 809d 	beq.w	8007acc <_printf_i+0x1a4>
 8007992:	d808      	bhi.n	80079a6 <_printf_i+0x7e>
 8007994:	296f      	cmp	r1, #111	; 0x6f
 8007996:	d020      	beq.n	80079da <_printf_i+0xb2>
 8007998:	2970      	cmp	r1, #112	; 0x70
 800799a:	d1dd      	bne.n	8007958 <_printf_i+0x30>
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	f043 0320 	orr.w	r3, r3, #32
 80079a2:	6023      	str	r3, [r4, #0]
 80079a4:	e003      	b.n	80079ae <_printf_i+0x86>
 80079a6:	2975      	cmp	r1, #117	; 0x75
 80079a8:	d017      	beq.n	80079da <_printf_i+0xb2>
 80079aa:	2978      	cmp	r1, #120	; 0x78
 80079ac:	d1d4      	bne.n	8007958 <_printf_i+0x30>
 80079ae:	2378      	movs	r3, #120	; 0x78
 80079b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079b4:	4864      	ldr	r0, [pc, #400]	; (8007b48 <_printf_i+0x220>)
 80079b6:	e055      	b.n	8007a64 <_printf_i+0x13c>
 80079b8:	6813      	ldr	r3, [r2, #0]
 80079ba:	1d19      	adds	r1, r3, #4
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6011      	str	r1, [r2, #0]
 80079c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079c8:	2301      	movs	r3, #1
 80079ca:	e08c      	b.n	8007ae6 <_printf_i+0x1be>
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6011      	str	r1, [r2, #0]
 80079d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80079d4:	bf18      	it	ne
 80079d6:	b21b      	sxthne	r3, r3
 80079d8:	e7cf      	b.n	800797a <_printf_i+0x52>
 80079da:	6813      	ldr	r3, [r2, #0]
 80079dc:	6825      	ldr	r5, [r4, #0]
 80079de:	1d18      	adds	r0, r3, #4
 80079e0:	6010      	str	r0, [r2, #0]
 80079e2:	0628      	lsls	r0, r5, #24
 80079e4:	d501      	bpl.n	80079ea <_printf_i+0xc2>
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	e002      	b.n	80079f0 <_printf_i+0xc8>
 80079ea:	0668      	lsls	r0, r5, #25
 80079ec:	d5fb      	bpl.n	80079e6 <_printf_i+0xbe>
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	4854      	ldr	r0, [pc, #336]	; (8007b44 <_printf_i+0x21c>)
 80079f2:	296f      	cmp	r1, #111	; 0x6f
 80079f4:	bf14      	ite	ne
 80079f6:	220a      	movne	r2, #10
 80079f8:	2208      	moveq	r2, #8
 80079fa:	2100      	movs	r1, #0
 80079fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a00:	6865      	ldr	r5, [r4, #4]
 8007a02:	60a5      	str	r5, [r4, #8]
 8007a04:	2d00      	cmp	r5, #0
 8007a06:	f2c0 8095 	blt.w	8007b34 <_printf_i+0x20c>
 8007a0a:	6821      	ldr	r1, [r4, #0]
 8007a0c:	f021 0104 	bic.w	r1, r1, #4
 8007a10:	6021      	str	r1, [r4, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d13d      	bne.n	8007a92 <_printf_i+0x16a>
 8007a16:	2d00      	cmp	r5, #0
 8007a18:	f040 808e 	bne.w	8007b38 <_printf_i+0x210>
 8007a1c:	4665      	mov	r5, ip
 8007a1e:	2a08      	cmp	r2, #8
 8007a20:	d10b      	bne.n	8007a3a <_printf_i+0x112>
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	07db      	lsls	r3, r3, #31
 8007a26:	d508      	bpl.n	8007a3a <_printf_i+0x112>
 8007a28:	6923      	ldr	r3, [r4, #16]
 8007a2a:	6862      	ldr	r2, [r4, #4]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	bfde      	ittt	le
 8007a30:	2330      	movle	r3, #48	; 0x30
 8007a32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a3a:	ebac 0305 	sub.w	r3, ip, r5
 8007a3e:	6123      	str	r3, [r4, #16]
 8007a40:	f8cd 8000 	str.w	r8, [sp]
 8007a44:	463b      	mov	r3, r7
 8007a46:	aa03      	add	r2, sp, #12
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	f7ff fef6 	bl	800783c <_printf_common>
 8007a50:	3001      	adds	r0, #1
 8007a52:	d14d      	bne.n	8007af0 <_printf_i+0x1c8>
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295
 8007a58:	b005      	add	sp, #20
 8007a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a5e:	4839      	ldr	r0, [pc, #228]	; (8007b44 <_printf_i+0x21c>)
 8007a60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007a64:	6813      	ldr	r3, [r2, #0]
 8007a66:	6821      	ldr	r1, [r4, #0]
 8007a68:	1d1d      	adds	r5, r3, #4
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6015      	str	r5, [r2, #0]
 8007a6e:	060a      	lsls	r2, r1, #24
 8007a70:	d50b      	bpl.n	8007a8a <_printf_i+0x162>
 8007a72:	07ca      	lsls	r2, r1, #31
 8007a74:	bf44      	itt	mi
 8007a76:	f041 0120 	orrmi.w	r1, r1, #32
 8007a7a:	6021      	strmi	r1, [r4, #0]
 8007a7c:	b91b      	cbnz	r3, 8007a86 <_printf_i+0x15e>
 8007a7e:	6822      	ldr	r2, [r4, #0]
 8007a80:	f022 0220 	bic.w	r2, r2, #32
 8007a84:	6022      	str	r2, [r4, #0]
 8007a86:	2210      	movs	r2, #16
 8007a88:	e7b7      	b.n	80079fa <_printf_i+0xd2>
 8007a8a:	064d      	lsls	r5, r1, #25
 8007a8c:	bf48      	it	mi
 8007a8e:	b29b      	uxthmi	r3, r3
 8007a90:	e7ef      	b.n	8007a72 <_printf_i+0x14a>
 8007a92:	4665      	mov	r5, ip
 8007a94:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a98:	fb02 3311 	mls	r3, r2, r1, r3
 8007a9c:	5cc3      	ldrb	r3, [r0, r3]
 8007a9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	2900      	cmp	r1, #0
 8007aa6:	d1f5      	bne.n	8007a94 <_printf_i+0x16c>
 8007aa8:	e7b9      	b.n	8007a1e <_printf_i+0xf6>
 8007aaa:	6813      	ldr	r3, [r2, #0]
 8007aac:	6825      	ldr	r5, [r4, #0]
 8007aae:	6961      	ldr	r1, [r4, #20]
 8007ab0:	1d18      	adds	r0, r3, #4
 8007ab2:	6010      	str	r0, [r2, #0]
 8007ab4:	0628      	lsls	r0, r5, #24
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	d501      	bpl.n	8007abe <_printf_i+0x196>
 8007aba:	6019      	str	r1, [r3, #0]
 8007abc:	e002      	b.n	8007ac4 <_printf_i+0x19c>
 8007abe:	066a      	lsls	r2, r5, #25
 8007ac0:	d5fb      	bpl.n	8007aba <_printf_i+0x192>
 8007ac2:	8019      	strh	r1, [r3, #0]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	6123      	str	r3, [r4, #16]
 8007ac8:	4665      	mov	r5, ip
 8007aca:	e7b9      	b.n	8007a40 <_printf_i+0x118>
 8007acc:	6813      	ldr	r3, [r2, #0]
 8007ace:	1d19      	adds	r1, r3, #4
 8007ad0:	6011      	str	r1, [r2, #0]
 8007ad2:	681d      	ldr	r5, [r3, #0]
 8007ad4:	6862      	ldr	r2, [r4, #4]
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	4628      	mov	r0, r5
 8007ada:	f7f8 fba9 	bl	8000230 <memchr>
 8007ade:	b108      	cbz	r0, 8007ae4 <_printf_i+0x1bc>
 8007ae0:	1b40      	subs	r0, r0, r5
 8007ae2:	6060      	str	r0, [r4, #4]
 8007ae4:	6863      	ldr	r3, [r4, #4]
 8007ae6:	6123      	str	r3, [r4, #16]
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007aee:	e7a7      	b.n	8007a40 <_printf_i+0x118>
 8007af0:	6923      	ldr	r3, [r4, #16]
 8007af2:	462a      	mov	r2, r5
 8007af4:	4639      	mov	r1, r7
 8007af6:	4630      	mov	r0, r6
 8007af8:	47c0      	blx	r8
 8007afa:	3001      	adds	r0, #1
 8007afc:	d0aa      	beq.n	8007a54 <_printf_i+0x12c>
 8007afe:	6823      	ldr	r3, [r4, #0]
 8007b00:	079b      	lsls	r3, r3, #30
 8007b02:	d413      	bmi.n	8007b2c <_printf_i+0x204>
 8007b04:	68e0      	ldr	r0, [r4, #12]
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	4298      	cmp	r0, r3
 8007b0a:	bfb8      	it	lt
 8007b0c:	4618      	movlt	r0, r3
 8007b0e:	e7a3      	b.n	8007a58 <_printf_i+0x130>
 8007b10:	2301      	movs	r3, #1
 8007b12:	464a      	mov	r2, r9
 8007b14:	4639      	mov	r1, r7
 8007b16:	4630      	mov	r0, r6
 8007b18:	47c0      	blx	r8
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	d09a      	beq.n	8007a54 <_printf_i+0x12c>
 8007b1e:	3501      	adds	r5, #1
 8007b20:	68e3      	ldr	r3, [r4, #12]
 8007b22:	9a03      	ldr	r2, [sp, #12]
 8007b24:	1a9b      	subs	r3, r3, r2
 8007b26:	42ab      	cmp	r3, r5
 8007b28:	dcf2      	bgt.n	8007b10 <_printf_i+0x1e8>
 8007b2a:	e7eb      	b.n	8007b04 <_printf_i+0x1dc>
 8007b2c:	2500      	movs	r5, #0
 8007b2e:	f104 0919 	add.w	r9, r4, #25
 8007b32:	e7f5      	b.n	8007b20 <_printf_i+0x1f8>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d1ac      	bne.n	8007a92 <_printf_i+0x16a>
 8007b38:	7803      	ldrb	r3, [r0, #0]
 8007b3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b42:	e76c      	b.n	8007a1e <_printf_i+0xf6>
 8007b44:	0800ad6a 	.word	0x0800ad6a
 8007b48:	0800ad7b 	.word	0x0800ad7b

08007b4c <_scanf_float>:
 8007b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b50:	469a      	mov	sl, r3
 8007b52:	688b      	ldr	r3, [r1, #8]
 8007b54:	4616      	mov	r6, r2
 8007b56:	1e5a      	subs	r2, r3, #1
 8007b58:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007b5c:	b087      	sub	sp, #28
 8007b5e:	bf83      	ittte	hi
 8007b60:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007b64:	189b      	addhi	r3, r3, r2
 8007b66:	9301      	strhi	r3, [sp, #4]
 8007b68:	2300      	movls	r3, #0
 8007b6a:	bf86      	itte	hi
 8007b6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007b70:	608b      	strhi	r3, [r1, #8]
 8007b72:	9301      	strls	r3, [sp, #4]
 8007b74:	680b      	ldr	r3, [r1, #0]
 8007b76:	4688      	mov	r8, r1
 8007b78:	f04f 0b00 	mov.w	fp, #0
 8007b7c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007b80:	f848 3b1c 	str.w	r3, [r8], #28
 8007b84:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007b88:	4607      	mov	r7, r0
 8007b8a:	460c      	mov	r4, r1
 8007b8c:	4645      	mov	r5, r8
 8007b8e:	465a      	mov	r2, fp
 8007b90:	46d9      	mov	r9, fp
 8007b92:	f8cd b008 	str.w	fp, [sp, #8]
 8007b96:	68a1      	ldr	r1, [r4, #8]
 8007b98:	b181      	cbz	r1, 8007bbc <_scanf_float+0x70>
 8007b9a:	6833      	ldr	r3, [r6, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b49      	cmp	r3, #73	; 0x49
 8007ba0:	d071      	beq.n	8007c86 <_scanf_float+0x13a>
 8007ba2:	d84d      	bhi.n	8007c40 <_scanf_float+0xf4>
 8007ba4:	2b39      	cmp	r3, #57	; 0x39
 8007ba6:	d840      	bhi.n	8007c2a <_scanf_float+0xde>
 8007ba8:	2b31      	cmp	r3, #49	; 0x31
 8007baa:	f080 8088 	bcs.w	8007cbe <_scanf_float+0x172>
 8007bae:	2b2d      	cmp	r3, #45	; 0x2d
 8007bb0:	f000 8090 	beq.w	8007cd4 <_scanf_float+0x188>
 8007bb4:	d815      	bhi.n	8007be2 <_scanf_float+0x96>
 8007bb6:	2b2b      	cmp	r3, #43	; 0x2b
 8007bb8:	f000 808c 	beq.w	8007cd4 <_scanf_float+0x188>
 8007bbc:	f1b9 0f00 	cmp.w	r9, #0
 8007bc0:	d003      	beq.n	8007bca <_scanf_float+0x7e>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	3a01      	subs	r2, #1
 8007bcc:	2a01      	cmp	r2, #1
 8007bce:	f200 80ea 	bhi.w	8007da6 <_scanf_float+0x25a>
 8007bd2:	4545      	cmp	r5, r8
 8007bd4:	f200 80dc 	bhi.w	8007d90 <_scanf_float+0x244>
 8007bd8:	2601      	movs	r6, #1
 8007bda:	4630      	mov	r0, r6
 8007bdc:	b007      	add	sp, #28
 8007bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be2:	2b2e      	cmp	r3, #46	; 0x2e
 8007be4:	f000 809f 	beq.w	8007d26 <_scanf_float+0x1da>
 8007be8:	2b30      	cmp	r3, #48	; 0x30
 8007bea:	d1e7      	bne.n	8007bbc <_scanf_float+0x70>
 8007bec:	6820      	ldr	r0, [r4, #0]
 8007bee:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007bf2:	d064      	beq.n	8007cbe <_scanf_float+0x172>
 8007bf4:	9b01      	ldr	r3, [sp, #4]
 8007bf6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007bfa:	6020      	str	r0, [r4, #0]
 8007bfc:	f109 0901 	add.w	r9, r9, #1
 8007c00:	b11b      	cbz	r3, 8007c0a <_scanf_float+0xbe>
 8007c02:	3b01      	subs	r3, #1
 8007c04:	3101      	adds	r1, #1
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	60a1      	str	r1, [r4, #8]
 8007c0a:	68a3      	ldr	r3, [r4, #8]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	60a3      	str	r3, [r4, #8]
 8007c10:	6923      	ldr	r3, [r4, #16]
 8007c12:	3301      	adds	r3, #1
 8007c14:	6123      	str	r3, [r4, #16]
 8007c16:	6873      	ldr	r3, [r6, #4]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	6073      	str	r3, [r6, #4]
 8007c1e:	f340 80ac 	ble.w	8007d7a <_scanf_float+0x22e>
 8007c22:	6833      	ldr	r3, [r6, #0]
 8007c24:	3301      	adds	r3, #1
 8007c26:	6033      	str	r3, [r6, #0]
 8007c28:	e7b5      	b.n	8007b96 <_scanf_float+0x4a>
 8007c2a:	2b45      	cmp	r3, #69	; 0x45
 8007c2c:	f000 8085 	beq.w	8007d3a <_scanf_float+0x1ee>
 8007c30:	2b46      	cmp	r3, #70	; 0x46
 8007c32:	d06a      	beq.n	8007d0a <_scanf_float+0x1be>
 8007c34:	2b41      	cmp	r3, #65	; 0x41
 8007c36:	d1c1      	bne.n	8007bbc <_scanf_float+0x70>
 8007c38:	2a01      	cmp	r2, #1
 8007c3a:	d1bf      	bne.n	8007bbc <_scanf_float+0x70>
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	e046      	b.n	8007cce <_scanf_float+0x182>
 8007c40:	2b65      	cmp	r3, #101	; 0x65
 8007c42:	d07a      	beq.n	8007d3a <_scanf_float+0x1ee>
 8007c44:	d818      	bhi.n	8007c78 <_scanf_float+0x12c>
 8007c46:	2b54      	cmp	r3, #84	; 0x54
 8007c48:	d066      	beq.n	8007d18 <_scanf_float+0x1cc>
 8007c4a:	d811      	bhi.n	8007c70 <_scanf_float+0x124>
 8007c4c:	2b4e      	cmp	r3, #78	; 0x4e
 8007c4e:	d1b5      	bne.n	8007bbc <_scanf_float+0x70>
 8007c50:	2a00      	cmp	r2, #0
 8007c52:	d146      	bne.n	8007ce2 <_scanf_float+0x196>
 8007c54:	f1b9 0f00 	cmp.w	r9, #0
 8007c58:	d145      	bne.n	8007ce6 <_scanf_float+0x19a>
 8007c5a:	6821      	ldr	r1, [r4, #0]
 8007c5c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007c60:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007c64:	d13f      	bne.n	8007ce6 <_scanf_float+0x19a>
 8007c66:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007c6a:	6021      	str	r1, [r4, #0]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	e02e      	b.n	8007cce <_scanf_float+0x182>
 8007c70:	2b59      	cmp	r3, #89	; 0x59
 8007c72:	d01e      	beq.n	8007cb2 <_scanf_float+0x166>
 8007c74:	2b61      	cmp	r3, #97	; 0x61
 8007c76:	e7de      	b.n	8007c36 <_scanf_float+0xea>
 8007c78:	2b6e      	cmp	r3, #110	; 0x6e
 8007c7a:	d0e9      	beq.n	8007c50 <_scanf_float+0x104>
 8007c7c:	d815      	bhi.n	8007caa <_scanf_float+0x15e>
 8007c7e:	2b66      	cmp	r3, #102	; 0x66
 8007c80:	d043      	beq.n	8007d0a <_scanf_float+0x1be>
 8007c82:	2b69      	cmp	r3, #105	; 0x69
 8007c84:	d19a      	bne.n	8007bbc <_scanf_float+0x70>
 8007c86:	f1bb 0f00 	cmp.w	fp, #0
 8007c8a:	d138      	bne.n	8007cfe <_scanf_float+0x1b2>
 8007c8c:	f1b9 0f00 	cmp.w	r9, #0
 8007c90:	d197      	bne.n	8007bc2 <_scanf_float+0x76>
 8007c92:	6821      	ldr	r1, [r4, #0]
 8007c94:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007c98:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007c9c:	d195      	bne.n	8007bca <_scanf_float+0x7e>
 8007c9e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007ca2:	6021      	str	r1, [r4, #0]
 8007ca4:	f04f 0b01 	mov.w	fp, #1
 8007ca8:	e011      	b.n	8007cce <_scanf_float+0x182>
 8007caa:	2b74      	cmp	r3, #116	; 0x74
 8007cac:	d034      	beq.n	8007d18 <_scanf_float+0x1cc>
 8007cae:	2b79      	cmp	r3, #121	; 0x79
 8007cb0:	d184      	bne.n	8007bbc <_scanf_float+0x70>
 8007cb2:	f1bb 0f07 	cmp.w	fp, #7
 8007cb6:	d181      	bne.n	8007bbc <_scanf_float+0x70>
 8007cb8:	f04f 0b08 	mov.w	fp, #8
 8007cbc:	e007      	b.n	8007cce <_scanf_float+0x182>
 8007cbe:	eb12 0f0b 	cmn.w	r2, fp
 8007cc2:	f47f af7b 	bne.w	8007bbc <_scanf_float+0x70>
 8007cc6:	6821      	ldr	r1, [r4, #0]
 8007cc8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007ccc:	6021      	str	r1, [r4, #0]
 8007cce:	702b      	strb	r3, [r5, #0]
 8007cd0:	3501      	adds	r5, #1
 8007cd2:	e79a      	b.n	8007c0a <_scanf_float+0xbe>
 8007cd4:	6821      	ldr	r1, [r4, #0]
 8007cd6:	0608      	lsls	r0, r1, #24
 8007cd8:	f57f af70 	bpl.w	8007bbc <_scanf_float+0x70>
 8007cdc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007ce0:	e7f4      	b.n	8007ccc <_scanf_float+0x180>
 8007ce2:	2a02      	cmp	r2, #2
 8007ce4:	d047      	beq.n	8007d76 <_scanf_float+0x22a>
 8007ce6:	f1bb 0f01 	cmp.w	fp, #1
 8007cea:	d003      	beq.n	8007cf4 <_scanf_float+0x1a8>
 8007cec:	f1bb 0f04 	cmp.w	fp, #4
 8007cf0:	f47f af64 	bne.w	8007bbc <_scanf_float+0x70>
 8007cf4:	f10b 0b01 	add.w	fp, fp, #1
 8007cf8:	fa5f fb8b 	uxtb.w	fp, fp
 8007cfc:	e7e7      	b.n	8007cce <_scanf_float+0x182>
 8007cfe:	f1bb 0f03 	cmp.w	fp, #3
 8007d02:	d0f7      	beq.n	8007cf4 <_scanf_float+0x1a8>
 8007d04:	f1bb 0f05 	cmp.w	fp, #5
 8007d08:	e7f2      	b.n	8007cf0 <_scanf_float+0x1a4>
 8007d0a:	f1bb 0f02 	cmp.w	fp, #2
 8007d0e:	f47f af55 	bne.w	8007bbc <_scanf_float+0x70>
 8007d12:	f04f 0b03 	mov.w	fp, #3
 8007d16:	e7da      	b.n	8007cce <_scanf_float+0x182>
 8007d18:	f1bb 0f06 	cmp.w	fp, #6
 8007d1c:	f47f af4e 	bne.w	8007bbc <_scanf_float+0x70>
 8007d20:	f04f 0b07 	mov.w	fp, #7
 8007d24:	e7d3      	b.n	8007cce <_scanf_float+0x182>
 8007d26:	6821      	ldr	r1, [r4, #0]
 8007d28:	0588      	lsls	r0, r1, #22
 8007d2a:	f57f af47 	bpl.w	8007bbc <_scanf_float+0x70>
 8007d2e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007d32:	6021      	str	r1, [r4, #0]
 8007d34:	f8cd 9008 	str.w	r9, [sp, #8]
 8007d38:	e7c9      	b.n	8007cce <_scanf_float+0x182>
 8007d3a:	6821      	ldr	r1, [r4, #0]
 8007d3c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007d40:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007d44:	d006      	beq.n	8007d54 <_scanf_float+0x208>
 8007d46:	0548      	lsls	r0, r1, #21
 8007d48:	f57f af38 	bpl.w	8007bbc <_scanf_float+0x70>
 8007d4c:	f1b9 0f00 	cmp.w	r9, #0
 8007d50:	f43f af3b 	beq.w	8007bca <_scanf_float+0x7e>
 8007d54:	0588      	lsls	r0, r1, #22
 8007d56:	bf58      	it	pl
 8007d58:	9802      	ldrpl	r0, [sp, #8]
 8007d5a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007d5e:	bf58      	it	pl
 8007d60:	eba9 0000 	subpl.w	r0, r9, r0
 8007d64:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007d68:	bf58      	it	pl
 8007d6a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8007d6e:	6021      	str	r1, [r4, #0]
 8007d70:	f04f 0900 	mov.w	r9, #0
 8007d74:	e7ab      	b.n	8007cce <_scanf_float+0x182>
 8007d76:	2203      	movs	r2, #3
 8007d78:	e7a9      	b.n	8007cce <_scanf_float+0x182>
 8007d7a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007d7e:	9205      	str	r2, [sp, #20]
 8007d80:	4631      	mov	r1, r6
 8007d82:	4638      	mov	r0, r7
 8007d84:	4798      	blx	r3
 8007d86:	9a05      	ldr	r2, [sp, #20]
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	f43f af04 	beq.w	8007b96 <_scanf_float+0x4a>
 8007d8e:	e715      	b.n	8007bbc <_scanf_float+0x70>
 8007d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007d98:	4632      	mov	r2, r6
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	4798      	blx	r3
 8007d9e:	6923      	ldr	r3, [r4, #16]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	6123      	str	r3, [r4, #16]
 8007da4:	e715      	b.n	8007bd2 <_scanf_float+0x86>
 8007da6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007daa:	2b06      	cmp	r3, #6
 8007dac:	d80a      	bhi.n	8007dc4 <_scanf_float+0x278>
 8007dae:	f1bb 0f02 	cmp.w	fp, #2
 8007db2:	d968      	bls.n	8007e86 <_scanf_float+0x33a>
 8007db4:	f1ab 0b03 	sub.w	fp, fp, #3
 8007db8:	fa5f fb8b 	uxtb.w	fp, fp
 8007dbc:	eba5 0b0b 	sub.w	fp, r5, fp
 8007dc0:	455d      	cmp	r5, fp
 8007dc2:	d14b      	bne.n	8007e5c <_scanf_float+0x310>
 8007dc4:	6823      	ldr	r3, [r4, #0]
 8007dc6:	05da      	lsls	r2, r3, #23
 8007dc8:	d51f      	bpl.n	8007e0a <_scanf_float+0x2be>
 8007dca:	055b      	lsls	r3, r3, #21
 8007dcc:	d468      	bmi.n	8007ea0 <_scanf_float+0x354>
 8007dce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007dd2:	6923      	ldr	r3, [r4, #16]
 8007dd4:	2965      	cmp	r1, #101	; 0x65
 8007dd6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007dda:	f105 3bff 	add.w	fp, r5, #4294967295
 8007dde:	6123      	str	r3, [r4, #16]
 8007de0:	d00d      	beq.n	8007dfe <_scanf_float+0x2b2>
 8007de2:	2945      	cmp	r1, #69	; 0x45
 8007de4:	d00b      	beq.n	8007dfe <_scanf_float+0x2b2>
 8007de6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dea:	4632      	mov	r2, r6
 8007dec:	4638      	mov	r0, r7
 8007dee:	4798      	blx	r3
 8007df0:	6923      	ldr	r3, [r4, #16]
 8007df2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	f1a5 0b02 	sub.w	fp, r5, #2
 8007dfc:	6123      	str	r3, [r4, #16]
 8007dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e02:	4632      	mov	r2, r6
 8007e04:	4638      	mov	r0, r7
 8007e06:	4798      	blx	r3
 8007e08:	465d      	mov	r5, fp
 8007e0a:	6826      	ldr	r6, [r4, #0]
 8007e0c:	f016 0610 	ands.w	r6, r6, #16
 8007e10:	d17a      	bne.n	8007f08 <_scanf_float+0x3bc>
 8007e12:	702e      	strb	r6, [r5, #0]
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e1e:	d142      	bne.n	8007ea6 <_scanf_float+0x35a>
 8007e20:	9b02      	ldr	r3, [sp, #8]
 8007e22:	eba9 0303 	sub.w	r3, r9, r3
 8007e26:	425a      	negs	r2, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d149      	bne.n	8007ec0 <_scanf_float+0x374>
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	4641      	mov	r1, r8
 8007e30:	4638      	mov	r0, r7
 8007e32:	f000 fea5 	bl	8008b80 <_strtod_r>
 8007e36:	6825      	ldr	r5, [r4, #0]
 8007e38:	f8da 3000 	ldr.w	r3, [sl]
 8007e3c:	f015 0f02 	tst.w	r5, #2
 8007e40:	f103 0204 	add.w	r2, r3, #4
 8007e44:	ec59 8b10 	vmov	r8, r9, d0
 8007e48:	f8ca 2000 	str.w	r2, [sl]
 8007e4c:	d043      	beq.n	8007ed6 <_scanf_float+0x38a>
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	e9c3 8900 	strd	r8, r9, [r3]
 8007e54:	68e3      	ldr	r3, [r4, #12]
 8007e56:	3301      	adds	r3, #1
 8007e58:	60e3      	str	r3, [r4, #12]
 8007e5a:	e6be      	b.n	8007bda <_scanf_float+0x8e>
 8007e5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e60:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007e64:	4632      	mov	r2, r6
 8007e66:	4638      	mov	r0, r7
 8007e68:	4798      	blx	r3
 8007e6a:	6923      	ldr	r3, [r4, #16]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	6123      	str	r3, [r4, #16]
 8007e70:	e7a6      	b.n	8007dc0 <_scanf_float+0x274>
 8007e72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e76:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007e7a:	4632      	mov	r2, r6
 8007e7c:	4638      	mov	r0, r7
 8007e7e:	4798      	blx	r3
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	6123      	str	r3, [r4, #16]
 8007e86:	4545      	cmp	r5, r8
 8007e88:	d8f3      	bhi.n	8007e72 <_scanf_float+0x326>
 8007e8a:	e6a5      	b.n	8007bd8 <_scanf_float+0x8c>
 8007e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007e94:	4632      	mov	r2, r6
 8007e96:	4638      	mov	r0, r7
 8007e98:	4798      	blx	r3
 8007e9a:	6923      	ldr	r3, [r4, #16]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	6123      	str	r3, [r4, #16]
 8007ea0:	4545      	cmp	r5, r8
 8007ea2:	d8f3      	bhi.n	8007e8c <_scanf_float+0x340>
 8007ea4:	e698      	b.n	8007bd8 <_scanf_float+0x8c>
 8007ea6:	9b03      	ldr	r3, [sp, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d0bf      	beq.n	8007e2c <_scanf_float+0x2e0>
 8007eac:	9904      	ldr	r1, [sp, #16]
 8007eae:	230a      	movs	r3, #10
 8007eb0:	4632      	mov	r2, r6
 8007eb2:	3101      	adds	r1, #1
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	f000 feef 	bl	8008c98 <_strtol_r>
 8007eba:	9b03      	ldr	r3, [sp, #12]
 8007ebc:	9d04      	ldr	r5, [sp, #16]
 8007ebe:	1ac2      	subs	r2, r0, r3
 8007ec0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007ec4:	429d      	cmp	r5, r3
 8007ec6:	bf28      	it	cs
 8007ec8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007ecc:	490f      	ldr	r1, [pc, #60]	; (8007f0c <_scanf_float+0x3c0>)
 8007ece:	4628      	mov	r0, r5
 8007ed0:	f000 f824 	bl	8007f1c <siprintf>
 8007ed4:	e7aa      	b.n	8007e2c <_scanf_float+0x2e0>
 8007ed6:	f015 0504 	ands.w	r5, r5, #4
 8007eda:	d1b8      	bne.n	8007e4e <_scanf_float+0x302>
 8007edc:	681f      	ldr	r7, [r3, #0]
 8007ede:	ee10 2a10 	vmov	r2, s0
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	ee10 0a10 	vmov	r0, s0
 8007ee8:	4649      	mov	r1, r9
 8007eea:	f7f8 fe47 	bl	8000b7c <__aeabi_dcmpun>
 8007eee:	b128      	cbz	r0, 8007efc <_scanf_float+0x3b0>
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f000 f80d 	bl	8007f10 <nanf>
 8007ef6:	ed87 0a00 	vstr	s0, [r7]
 8007efa:	e7ab      	b.n	8007e54 <_scanf_float+0x308>
 8007efc:	4640      	mov	r0, r8
 8007efe:	4649      	mov	r1, r9
 8007f00:	f7f8 fe9a 	bl	8000c38 <__aeabi_d2f>
 8007f04:	6038      	str	r0, [r7, #0]
 8007f06:	e7a5      	b.n	8007e54 <_scanf_float+0x308>
 8007f08:	2600      	movs	r6, #0
 8007f0a:	e666      	b.n	8007bda <_scanf_float+0x8e>
 8007f0c:	0800ad8c 	.word	0x0800ad8c

08007f10 <nanf>:
 8007f10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007f18 <nanf+0x8>
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	7fc00000 	.word	0x7fc00000

08007f1c <siprintf>:
 8007f1c:	b40e      	push	{r1, r2, r3}
 8007f1e:	b500      	push	{lr}
 8007f20:	b09c      	sub	sp, #112	; 0x70
 8007f22:	ab1d      	add	r3, sp, #116	; 0x74
 8007f24:	9002      	str	r0, [sp, #8]
 8007f26:	9006      	str	r0, [sp, #24]
 8007f28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f2c:	4809      	ldr	r0, [pc, #36]	; (8007f54 <siprintf+0x38>)
 8007f2e:	9107      	str	r1, [sp, #28]
 8007f30:	9104      	str	r1, [sp, #16]
 8007f32:	4909      	ldr	r1, [pc, #36]	; (8007f58 <siprintf+0x3c>)
 8007f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f38:	9105      	str	r1, [sp, #20]
 8007f3a:	6800      	ldr	r0, [r0, #0]
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	a902      	add	r1, sp, #8
 8007f40:	f002 fd70 	bl	800aa24 <_svfiprintf_r>
 8007f44:	9b02      	ldr	r3, [sp, #8]
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]
 8007f4a:	b01c      	add	sp, #112	; 0x70
 8007f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f50:	b003      	add	sp, #12
 8007f52:	4770      	bx	lr
 8007f54:	2000000c 	.word	0x2000000c
 8007f58:	ffff0208 	.word	0xffff0208

08007f5c <sulp>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	4604      	mov	r4, r0
 8007f60:	460d      	mov	r5, r1
 8007f62:	ec45 4b10 	vmov	d0, r4, r5
 8007f66:	4616      	mov	r6, r2
 8007f68:	f002 fb18 	bl	800a59c <__ulp>
 8007f6c:	ec51 0b10 	vmov	r0, r1, d0
 8007f70:	b17e      	cbz	r6, 8007f92 <sulp+0x36>
 8007f72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007f76:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	dd09      	ble.n	8007f92 <sulp+0x36>
 8007f7e:	051b      	lsls	r3, r3, #20
 8007f80:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007f84:	2400      	movs	r4, #0
 8007f86:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007f8a:	4622      	mov	r2, r4
 8007f8c:	462b      	mov	r3, r5
 8007f8e:	f7f8 fb5b 	bl	8000648 <__aeabi_dmul>
 8007f92:	bd70      	pop	{r4, r5, r6, pc}
 8007f94:	0000      	movs	r0, r0
	...

08007f98 <_strtod_l>:
 8007f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	461f      	mov	r7, r3
 8007f9e:	b0a1      	sub	sp, #132	; 0x84
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4681      	mov	r9, r0
 8007fa4:	4638      	mov	r0, r7
 8007fa6:	460e      	mov	r6, r1
 8007fa8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007faa:	931c      	str	r3, [sp, #112]	; 0x70
 8007fac:	f001 fff5 	bl	8009f9a <__localeconv_l>
 8007fb0:	4680      	mov	r8, r0
 8007fb2:	6800      	ldr	r0, [r0, #0]
 8007fb4:	f7f8 f934 	bl	8000220 <strlen>
 8007fb8:	f04f 0a00 	mov.w	sl, #0
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	f04f 0b00 	mov.w	fp, #0
 8007fc2:	961b      	str	r6, [sp, #108]	; 0x6c
 8007fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fc6:	781a      	ldrb	r2, [r3, #0]
 8007fc8:	2a0d      	cmp	r2, #13
 8007fca:	d832      	bhi.n	8008032 <_strtod_l+0x9a>
 8007fcc:	2a09      	cmp	r2, #9
 8007fce:	d236      	bcs.n	800803e <_strtod_l+0xa6>
 8007fd0:	2a00      	cmp	r2, #0
 8007fd2:	d03e      	beq.n	8008052 <_strtod_l+0xba>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	930d      	str	r3, [sp, #52]	; 0x34
 8007fd8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007fda:	782b      	ldrb	r3, [r5, #0]
 8007fdc:	2b30      	cmp	r3, #48	; 0x30
 8007fde:	f040 80ac 	bne.w	800813a <_strtod_l+0x1a2>
 8007fe2:	786b      	ldrb	r3, [r5, #1]
 8007fe4:	2b58      	cmp	r3, #88	; 0x58
 8007fe6:	d001      	beq.n	8007fec <_strtod_l+0x54>
 8007fe8:	2b78      	cmp	r3, #120	; 0x78
 8007fea:	d167      	bne.n	80080bc <_strtod_l+0x124>
 8007fec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fee:	9301      	str	r3, [sp, #4]
 8007ff0:	ab1c      	add	r3, sp, #112	; 0x70
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	9702      	str	r7, [sp, #8]
 8007ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8007ff8:	4a88      	ldr	r2, [pc, #544]	; (800821c <_strtod_l+0x284>)
 8007ffa:	a91b      	add	r1, sp, #108	; 0x6c
 8007ffc:	4648      	mov	r0, r9
 8007ffe:	f001 fcf2 	bl	80099e6 <__gethex>
 8008002:	f010 0407 	ands.w	r4, r0, #7
 8008006:	4606      	mov	r6, r0
 8008008:	d005      	beq.n	8008016 <_strtod_l+0x7e>
 800800a:	2c06      	cmp	r4, #6
 800800c:	d12b      	bne.n	8008066 <_strtod_l+0xce>
 800800e:	3501      	adds	r5, #1
 8008010:	2300      	movs	r3, #0
 8008012:	951b      	str	r5, [sp, #108]	; 0x6c
 8008014:	930d      	str	r3, [sp, #52]	; 0x34
 8008016:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008018:	2b00      	cmp	r3, #0
 800801a:	f040 859a 	bne.w	8008b52 <_strtod_l+0xbba>
 800801e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008020:	b1e3      	cbz	r3, 800805c <_strtod_l+0xc4>
 8008022:	4652      	mov	r2, sl
 8008024:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008028:	ec43 2b10 	vmov	d0, r2, r3
 800802c:	b021      	add	sp, #132	; 0x84
 800802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008032:	2a2b      	cmp	r2, #43	; 0x2b
 8008034:	d015      	beq.n	8008062 <_strtod_l+0xca>
 8008036:	2a2d      	cmp	r2, #45	; 0x2d
 8008038:	d004      	beq.n	8008044 <_strtod_l+0xac>
 800803a:	2a20      	cmp	r2, #32
 800803c:	d1ca      	bne.n	8007fd4 <_strtod_l+0x3c>
 800803e:	3301      	adds	r3, #1
 8008040:	931b      	str	r3, [sp, #108]	; 0x6c
 8008042:	e7bf      	b.n	8007fc4 <_strtod_l+0x2c>
 8008044:	2201      	movs	r2, #1
 8008046:	920d      	str	r2, [sp, #52]	; 0x34
 8008048:	1c5a      	adds	r2, r3, #1
 800804a:	921b      	str	r2, [sp, #108]	; 0x6c
 800804c:	785b      	ldrb	r3, [r3, #1]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1c2      	bne.n	8007fd8 <_strtod_l+0x40>
 8008052:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008054:	961b      	str	r6, [sp, #108]	; 0x6c
 8008056:	2b00      	cmp	r3, #0
 8008058:	f040 8579 	bne.w	8008b4e <_strtod_l+0xbb6>
 800805c:	4652      	mov	r2, sl
 800805e:	465b      	mov	r3, fp
 8008060:	e7e2      	b.n	8008028 <_strtod_l+0x90>
 8008062:	2200      	movs	r2, #0
 8008064:	e7ef      	b.n	8008046 <_strtod_l+0xae>
 8008066:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008068:	b13a      	cbz	r2, 800807a <_strtod_l+0xe2>
 800806a:	2135      	movs	r1, #53	; 0x35
 800806c:	a81e      	add	r0, sp, #120	; 0x78
 800806e:	f002 fb8d 	bl	800a78c <__copybits>
 8008072:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008074:	4648      	mov	r0, r9
 8008076:	f001 fffa 	bl	800a06e <_Bfree>
 800807a:	3c01      	subs	r4, #1
 800807c:	2c04      	cmp	r4, #4
 800807e:	d806      	bhi.n	800808e <_strtod_l+0xf6>
 8008080:	e8df f004 	tbb	[pc, r4]
 8008084:	1714030a 	.word	0x1714030a
 8008088:	0a          	.byte	0x0a
 8008089:	00          	.byte	0x00
 800808a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800808e:	0730      	lsls	r0, r6, #28
 8008090:	d5c1      	bpl.n	8008016 <_strtod_l+0x7e>
 8008092:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008096:	e7be      	b.n	8008016 <_strtod_l+0x7e>
 8008098:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800809c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800809e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80080a2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80080a6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80080aa:	e7f0      	b.n	800808e <_strtod_l+0xf6>
 80080ac:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008220 <_strtod_l+0x288>
 80080b0:	e7ed      	b.n	800808e <_strtod_l+0xf6>
 80080b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80080b6:	f04f 3aff 	mov.w	sl, #4294967295
 80080ba:	e7e8      	b.n	800808e <_strtod_l+0xf6>
 80080bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	2b30      	cmp	r3, #48	; 0x30
 80080c6:	d0f9      	beq.n	80080bc <_strtod_l+0x124>
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d0a4      	beq.n	8008016 <_strtod_l+0x7e>
 80080cc:	2301      	movs	r3, #1
 80080ce:	2500      	movs	r5, #0
 80080d0:	9306      	str	r3, [sp, #24]
 80080d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080d4:	9308      	str	r3, [sp, #32]
 80080d6:	9507      	str	r5, [sp, #28]
 80080d8:	9505      	str	r5, [sp, #20]
 80080da:	220a      	movs	r2, #10
 80080dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80080de:	7807      	ldrb	r7, [r0, #0]
 80080e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80080e4:	b2d9      	uxtb	r1, r3
 80080e6:	2909      	cmp	r1, #9
 80080e8:	d929      	bls.n	800813e <_strtod_l+0x1a6>
 80080ea:	4622      	mov	r2, r4
 80080ec:	f8d8 1000 	ldr.w	r1, [r8]
 80080f0:	f002 fda0 	bl	800ac34 <strncmp>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d031      	beq.n	800815c <_strtod_l+0x1c4>
 80080f8:	2000      	movs	r0, #0
 80080fa:	9c05      	ldr	r4, [sp, #20]
 80080fc:	9004      	str	r0, [sp, #16]
 80080fe:	463b      	mov	r3, r7
 8008100:	4602      	mov	r2, r0
 8008102:	2b65      	cmp	r3, #101	; 0x65
 8008104:	d001      	beq.n	800810a <_strtod_l+0x172>
 8008106:	2b45      	cmp	r3, #69	; 0x45
 8008108:	d114      	bne.n	8008134 <_strtod_l+0x19c>
 800810a:	b924      	cbnz	r4, 8008116 <_strtod_l+0x17e>
 800810c:	b910      	cbnz	r0, 8008114 <_strtod_l+0x17c>
 800810e:	9b06      	ldr	r3, [sp, #24]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d09e      	beq.n	8008052 <_strtod_l+0xba>
 8008114:	2400      	movs	r4, #0
 8008116:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008118:	1c73      	adds	r3, r6, #1
 800811a:	931b      	str	r3, [sp, #108]	; 0x6c
 800811c:	7873      	ldrb	r3, [r6, #1]
 800811e:	2b2b      	cmp	r3, #43	; 0x2b
 8008120:	d078      	beq.n	8008214 <_strtod_l+0x27c>
 8008122:	2b2d      	cmp	r3, #45	; 0x2d
 8008124:	d070      	beq.n	8008208 <_strtod_l+0x270>
 8008126:	f04f 0c00 	mov.w	ip, #0
 800812a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800812e:	2f09      	cmp	r7, #9
 8008130:	d97c      	bls.n	800822c <_strtod_l+0x294>
 8008132:	961b      	str	r6, [sp, #108]	; 0x6c
 8008134:	f04f 0e00 	mov.w	lr, #0
 8008138:	e09a      	b.n	8008270 <_strtod_l+0x2d8>
 800813a:	2300      	movs	r3, #0
 800813c:	e7c7      	b.n	80080ce <_strtod_l+0x136>
 800813e:	9905      	ldr	r1, [sp, #20]
 8008140:	2908      	cmp	r1, #8
 8008142:	bfdd      	ittte	le
 8008144:	9907      	ldrle	r1, [sp, #28]
 8008146:	fb02 3301 	mlale	r3, r2, r1, r3
 800814a:	9307      	strle	r3, [sp, #28]
 800814c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008150:	9b05      	ldr	r3, [sp, #20]
 8008152:	3001      	adds	r0, #1
 8008154:	3301      	adds	r3, #1
 8008156:	9305      	str	r3, [sp, #20]
 8008158:	901b      	str	r0, [sp, #108]	; 0x6c
 800815a:	e7bf      	b.n	80080dc <_strtod_l+0x144>
 800815c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800815e:	191a      	adds	r2, r3, r4
 8008160:	921b      	str	r2, [sp, #108]	; 0x6c
 8008162:	9a05      	ldr	r2, [sp, #20]
 8008164:	5d1b      	ldrb	r3, [r3, r4]
 8008166:	2a00      	cmp	r2, #0
 8008168:	d037      	beq.n	80081da <_strtod_l+0x242>
 800816a:	9c05      	ldr	r4, [sp, #20]
 800816c:	4602      	mov	r2, r0
 800816e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008172:	2909      	cmp	r1, #9
 8008174:	d913      	bls.n	800819e <_strtod_l+0x206>
 8008176:	2101      	movs	r1, #1
 8008178:	9104      	str	r1, [sp, #16]
 800817a:	e7c2      	b.n	8008102 <_strtod_l+0x16a>
 800817c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	921b      	str	r2, [sp, #108]	; 0x6c
 8008182:	785b      	ldrb	r3, [r3, #1]
 8008184:	3001      	adds	r0, #1
 8008186:	2b30      	cmp	r3, #48	; 0x30
 8008188:	d0f8      	beq.n	800817c <_strtod_l+0x1e4>
 800818a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800818e:	2a08      	cmp	r2, #8
 8008190:	f200 84e4 	bhi.w	8008b5c <_strtod_l+0xbc4>
 8008194:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008196:	9208      	str	r2, [sp, #32]
 8008198:	4602      	mov	r2, r0
 800819a:	2000      	movs	r0, #0
 800819c:	4604      	mov	r4, r0
 800819e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80081a2:	f100 0101 	add.w	r1, r0, #1
 80081a6:	d012      	beq.n	80081ce <_strtod_l+0x236>
 80081a8:	440a      	add	r2, r1
 80081aa:	eb00 0c04 	add.w	ip, r0, r4
 80081ae:	4621      	mov	r1, r4
 80081b0:	270a      	movs	r7, #10
 80081b2:	458c      	cmp	ip, r1
 80081b4:	d113      	bne.n	80081de <_strtod_l+0x246>
 80081b6:	1821      	adds	r1, r4, r0
 80081b8:	2908      	cmp	r1, #8
 80081ba:	f104 0401 	add.w	r4, r4, #1
 80081be:	4404      	add	r4, r0
 80081c0:	dc19      	bgt.n	80081f6 <_strtod_l+0x25e>
 80081c2:	9b07      	ldr	r3, [sp, #28]
 80081c4:	210a      	movs	r1, #10
 80081c6:	fb01 e303 	mla	r3, r1, r3, lr
 80081ca:	9307      	str	r3, [sp, #28]
 80081cc:	2100      	movs	r1, #0
 80081ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081d0:	1c58      	adds	r0, r3, #1
 80081d2:	901b      	str	r0, [sp, #108]	; 0x6c
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	4608      	mov	r0, r1
 80081d8:	e7c9      	b.n	800816e <_strtod_l+0x1d6>
 80081da:	9805      	ldr	r0, [sp, #20]
 80081dc:	e7d3      	b.n	8008186 <_strtod_l+0x1ee>
 80081de:	2908      	cmp	r1, #8
 80081e0:	f101 0101 	add.w	r1, r1, #1
 80081e4:	dc03      	bgt.n	80081ee <_strtod_l+0x256>
 80081e6:	9b07      	ldr	r3, [sp, #28]
 80081e8:	437b      	muls	r3, r7
 80081ea:	9307      	str	r3, [sp, #28]
 80081ec:	e7e1      	b.n	80081b2 <_strtod_l+0x21a>
 80081ee:	2910      	cmp	r1, #16
 80081f0:	bfd8      	it	le
 80081f2:	437d      	mulle	r5, r7
 80081f4:	e7dd      	b.n	80081b2 <_strtod_l+0x21a>
 80081f6:	2c10      	cmp	r4, #16
 80081f8:	bfdc      	itt	le
 80081fa:	210a      	movle	r1, #10
 80081fc:	fb01 e505 	mlale	r5, r1, r5, lr
 8008200:	e7e4      	b.n	80081cc <_strtod_l+0x234>
 8008202:	2301      	movs	r3, #1
 8008204:	9304      	str	r3, [sp, #16]
 8008206:	e781      	b.n	800810c <_strtod_l+0x174>
 8008208:	f04f 0c01 	mov.w	ip, #1
 800820c:	1cb3      	adds	r3, r6, #2
 800820e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008210:	78b3      	ldrb	r3, [r6, #2]
 8008212:	e78a      	b.n	800812a <_strtod_l+0x192>
 8008214:	f04f 0c00 	mov.w	ip, #0
 8008218:	e7f8      	b.n	800820c <_strtod_l+0x274>
 800821a:	bf00      	nop
 800821c:	0800ad94 	.word	0x0800ad94
 8008220:	7ff00000 	.word	0x7ff00000
 8008224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008226:	1c5f      	adds	r7, r3, #1
 8008228:	971b      	str	r7, [sp, #108]	; 0x6c
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	2b30      	cmp	r3, #48	; 0x30
 800822e:	d0f9      	beq.n	8008224 <_strtod_l+0x28c>
 8008230:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008234:	2f08      	cmp	r7, #8
 8008236:	f63f af7d 	bhi.w	8008134 <_strtod_l+0x19c>
 800823a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800823e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008240:	930a      	str	r3, [sp, #40]	; 0x28
 8008242:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008244:	1c5f      	adds	r7, r3, #1
 8008246:	971b      	str	r7, [sp, #108]	; 0x6c
 8008248:	785b      	ldrb	r3, [r3, #1]
 800824a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800824e:	f1b8 0f09 	cmp.w	r8, #9
 8008252:	d937      	bls.n	80082c4 <_strtod_l+0x32c>
 8008254:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008256:	1a7f      	subs	r7, r7, r1
 8008258:	2f08      	cmp	r7, #8
 800825a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800825e:	dc37      	bgt.n	80082d0 <_strtod_l+0x338>
 8008260:	45be      	cmp	lr, r7
 8008262:	bfa8      	it	ge
 8008264:	46be      	movge	lr, r7
 8008266:	f1bc 0f00 	cmp.w	ip, #0
 800826a:	d001      	beq.n	8008270 <_strtod_l+0x2d8>
 800826c:	f1ce 0e00 	rsb	lr, lr, #0
 8008270:	2c00      	cmp	r4, #0
 8008272:	d151      	bne.n	8008318 <_strtod_l+0x380>
 8008274:	2800      	cmp	r0, #0
 8008276:	f47f aece 	bne.w	8008016 <_strtod_l+0x7e>
 800827a:	9a06      	ldr	r2, [sp, #24]
 800827c:	2a00      	cmp	r2, #0
 800827e:	f47f aeca 	bne.w	8008016 <_strtod_l+0x7e>
 8008282:	9a04      	ldr	r2, [sp, #16]
 8008284:	2a00      	cmp	r2, #0
 8008286:	f47f aee4 	bne.w	8008052 <_strtod_l+0xba>
 800828a:	2b4e      	cmp	r3, #78	; 0x4e
 800828c:	d027      	beq.n	80082de <_strtod_l+0x346>
 800828e:	dc21      	bgt.n	80082d4 <_strtod_l+0x33c>
 8008290:	2b49      	cmp	r3, #73	; 0x49
 8008292:	f47f aede 	bne.w	8008052 <_strtod_l+0xba>
 8008296:	49a0      	ldr	r1, [pc, #640]	; (8008518 <_strtod_l+0x580>)
 8008298:	a81b      	add	r0, sp, #108	; 0x6c
 800829a:	f001 fdd7 	bl	8009e4c <__match>
 800829e:	2800      	cmp	r0, #0
 80082a0:	f43f aed7 	beq.w	8008052 <_strtod_l+0xba>
 80082a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082a6:	499d      	ldr	r1, [pc, #628]	; (800851c <_strtod_l+0x584>)
 80082a8:	3b01      	subs	r3, #1
 80082aa:	a81b      	add	r0, sp, #108	; 0x6c
 80082ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80082ae:	f001 fdcd 	bl	8009e4c <__match>
 80082b2:	b910      	cbnz	r0, 80082ba <_strtod_l+0x322>
 80082b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082b6:	3301      	adds	r3, #1
 80082b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80082ba:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008530 <_strtod_l+0x598>
 80082be:	f04f 0a00 	mov.w	sl, #0
 80082c2:	e6a8      	b.n	8008016 <_strtod_l+0x7e>
 80082c4:	210a      	movs	r1, #10
 80082c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80082ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80082ce:	e7b8      	b.n	8008242 <_strtod_l+0x2aa>
 80082d0:	46be      	mov	lr, r7
 80082d2:	e7c8      	b.n	8008266 <_strtod_l+0x2ce>
 80082d4:	2b69      	cmp	r3, #105	; 0x69
 80082d6:	d0de      	beq.n	8008296 <_strtod_l+0x2fe>
 80082d8:	2b6e      	cmp	r3, #110	; 0x6e
 80082da:	f47f aeba 	bne.w	8008052 <_strtod_l+0xba>
 80082de:	4990      	ldr	r1, [pc, #576]	; (8008520 <_strtod_l+0x588>)
 80082e0:	a81b      	add	r0, sp, #108	; 0x6c
 80082e2:	f001 fdb3 	bl	8009e4c <__match>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	f43f aeb3 	beq.w	8008052 <_strtod_l+0xba>
 80082ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b28      	cmp	r3, #40	; 0x28
 80082f2:	d10e      	bne.n	8008312 <_strtod_l+0x37a>
 80082f4:	aa1e      	add	r2, sp, #120	; 0x78
 80082f6:	498b      	ldr	r1, [pc, #556]	; (8008524 <_strtod_l+0x58c>)
 80082f8:	a81b      	add	r0, sp, #108	; 0x6c
 80082fa:	f001 fdbb 	bl	8009e74 <__hexnan>
 80082fe:	2805      	cmp	r0, #5
 8008300:	d107      	bne.n	8008312 <_strtod_l+0x37a>
 8008302:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008304:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008308:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800830c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008310:	e681      	b.n	8008016 <_strtod_l+0x7e>
 8008312:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008538 <_strtod_l+0x5a0>
 8008316:	e7d2      	b.n	80082be <_strtod_l+0x326>
 8008318:	ebae 0302 	sub.w	r3, lr, r2
 800831c:	9306      	str	r3, [sp, #24]
 800831e:	9b05      	ldr	r3, [sp, #20]
 8008320:	9807      	ldr	r0, [sp, #28]
 8008322:	2b00      	cmp	r3, #0
 8008324:	bf08      	it	eq
 8008326:	4623      	moveq	r3, r4
 8008328:	2c10      	cmp	r4, #16
 800832a:	9305      	str	r3, [sp, #20]
 800832c:	46a0      	mov	r8, r4
 800832e:	bfa8      	it	ge
 8008330:	f04f 0810 	movge.w	r8, #16
 8008334:	f7f8 f90e 	bl	8000554 <__aeabi_ui2d>
 8008338:	2c09      	cmp	r4, #9
 800833a:	4682      	mov	sl, r0
 800833c:	468b      	mov	fp, r1
 800833e:	dc13      	bgt.n	8008368 <_strtod_l+0x3d0>
 8008340:	9b06      	ldr	r3, [sp, #24]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f43f ae67 	beq.w	8008016 <_strtod_l+0x7e>
 8008348:	9b06      	ldr	r3, [sp, #24]
 800834a:	dd7a      	ble.n	8008442 <_strtod_l+0x4aa>
 800834c:	2b16      	cmp	r3, #22
 800834e:	dc61      	bgt.n	8008414 <_strtod_l+0x47c>
 8008350:	4a75      	ldr	r2, [pc, #468]	; (8008528 <_strtod_l+0x590>)
 8008352:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8008356:	e9de 0100 	ldrd	r0, r1, [lr]
 800835a:	4652      	mov	r2, sl
 800835c:	465b      	mov	r3, fp
 800835e:	f7f8 f973 	bl	8000648 <__aeabi_dmul>
 8008362:	4682      	mov	sl, r0
 8008364:	468b      	mov	fp, r1
 8008366:	e656      	b.n	8008016 <_strtod_l+0x7e>
 8008368:	4b6f      	ldr	r3, [pc, #444]	; (8008528 <_strtod_l+0x590>)
 800836a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800836e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008372:	f7f8 f969 	bl	8000648 <__aeabi_dmul>
 8008376:	4606      	mov	r6, r0
 8008378:	4628      	mov	r0, r5
 800837a:	460f      	mov	r7, r1
 800837c:	f7f8 f8ea 	bl	8000554 <__aeabi_ui2d>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4630      	mov	r0, r6
 8008386:	4639      	mov	r1, r7
 8008388:	f7f7 ffa8 	bl	80002dc <__adddf3>
 800838c:	2c0f      	cmp	r4, #15
 800838e:	4682      	mov	sl, r0
 8008390:	468b      	mov	fp, r1
 8008392:	ddd5      	ble.n	8008340 <_strtod_l+0x3a8>
 8008394:	9b06      	ldr	r3, [sp, #24]
 8008396:	eba4 0808 	sub.w	r8, r4, r8
 800839a:	4498      	add	r8, r3
 800839c:	f1b8 0f00 	cmp.w	r8, #0
 80083a0:	f340 8096 	ble.w	80084d0 <_strtod_l+0x538>
 80083a4:	f018 030f 	ands.w	r3, r8, #15
 80083a8:	d00a      	beq.n	80083c0 <_strtod_l+0x428>
 80083aa:	495f      	ldr	r1, [pc, #380]	; (8008528 <_strtod_l+0x590>)
 80083ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083b0:	4652      	mov	r2, sl
 80083b2:	465b      	mov	r3, fp
 80083b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083b8:	f7f8 f946 	bl	8000648 <__aeabi_dmul>
 80083bc:	4682      	mov	sl, r0
 80083be:	468b      	mov	fp, r1
 80083c0:	f038 080f 	bics.w	r8, r8, #15
 80083c4:	d073      	beq.n	80084ae <_strtod_l+0x516>
 80083c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80083ca:	dd47      	ble.n	800845c <_strtod_l+0x4c4>
 80083cc:	2400      	movs	r4, #0
 80083ce:	46a0      	mov	r8, r4
 80083d0:	9407      	str	r4, [sp, #28]
 80083d2:	9405      	str	r4, [sp, #20]
 80083d4:	2322      	movs	r3, #34	; 0x22
 80083d6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008530 <_strtod_l+0x598>
 80083da:	f8c9 3000 	str.w	r3, [r9]
 80083de:	f04f 0a00 	mov.w	sl, #0
 80083e2:	9b07      	ldr	r3, [sp, #28]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f43f ae16 	beq.w	8008016 <_strtod_l+0x7e>
 80083ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80083ec:	4648      	mov	r0, r9
 80083ee:	f001 fe3e 	bl	800a06e <_Bfree>
 80083f2:	9905      	ldr	r1, [sp, #20]
 80083f4:	4648      	mov	r0, r9
 80083f6:	f001 fe3a 	bl	800a06e <_Bfree>
 80083fa:	4641      	mov	r1, r8
 80083fc:	4648      	mov	r0, r9
 80083fe:	f001 fe36 	bl	800a06e <_Bfree>
 8008402:	9907      	ldr	r1, [sp, #28]
 8008404:	4648      	mov	r0, r9
 8008406:	f001 fe32 	bl	800a06e <_Bfree>
 800840a:	4621      	mov	r1, r4
 800840c:	4648      	mov	r0, r9
 800840e:	f001 fe2e 	bl	800a06e <_Bfree>
 8008412:	e600      	b.n	8008016 <_strtod_l+0x7e>
 8008414:	9a06      	ldr	r2, [sp, #24]
 8008416:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800841a:	4293      	cmp	r3, r2
 800841c:	dbba      	blt.n	8008394 <_strtod_l+0x3fc>
 800841e:	4d42      	ldr	r5, [pc, #264]	; (8008528 <_strtod_l+0x590>)
 8008420:	f1c4 040f 	rsb	r4, r4, #15
 8008424:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008428:	4652      	mov	r2, sl
 800842a:	465b      	mov	r3, fp
 800842c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008430:	f7f8 f90a 	bl	8000648 <__aeabi_dmul>
 8008434:	9b06      	ldr	r3, [sp, #24]
 8008436:	1b1c      	subs	r4, r3, r4
 8008438:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800843c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008440:	e78d      	b.n	800835e <_strtod_l+0x3c6>
 8008442:	f113 0f16 	cmn.w	r3, #22
 8008446:	dba5      	blt.n	8008394 <_strtod_l+0x3fc>
 8008448:	4a37      	ldr	r2, [pc, #220]	; (8008528 <_strtod_l+0x590>)
 800844a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800844e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008452:	4650      	mov	r0, sl
 8008454:	4659      	mov	r1, fp
 8008456:	f7f8 fa21 	bl	800089c <__aeabi_ddiv>
 800845a:	e782      	b.n	8008362 <_strtod_l+0x3ca>
 800845c:	2300      	movs	r3, #0
 800845e:	4e33      	ldr	r6, [pc, #204]	; (800852c <_strtod_l+0x594>)
 8008460:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008464:	4650      	mov	r0, sl
 8008466:	4659      	mov	r1, fp
 8008468:	461d      	mov	r5, r3
 800846a:	f1b8 0f01 	cmp.w	r8, #1
 800846e:	dc21      	bgt.n	80084b4 <_strtod_l+0x51c>
 8008470:	b10b      	cbz	r3, 8008476 <_strtod_l+0x4de>
 8008472:	4682      	mov	sl, r0
 8008474:	468b      	mov	fp, r1
 8008476:	4b2d      	ldr	r3, [pc, #180]	; (800852c <_strtod_l+0x594>)
 8008478:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800847c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008480:	4652      	mov	r2, sl
 8008482:	465b      	mov	r3, fp
 8008484:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008488:	f7f8 f8de 	bl	8000648 <__aeabi_dmul>
 800848c:	4b28      	ldr	r3, [pc, #160]	; (8008530 <_strtod_l+0x598>)
 800848e:	460a      	mov	r2, r1
 8008490:	400b      	ands	r3, r1
 8008492:	4928      	ldr	r1, [pc, #160]	; (8008534 <_strtod_l+0x59c>)
 8008494:	428b      	cmp	r3, r1
 8008496:	4682      	mov	sl, r0
 8008498:	d898      	bhi.n	80083cc <_strtod_l+0x434>
 800849a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800849e:	428b      	cmp	r3, r1
 80084a0:	bf86      	itte	hi
 80084a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800853c <_strtod_l+0x5a4>
 80084a6:	f04f 3aff 	movhi.w	sl, #4294967295
 80084aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80084ae:	2300      	movs	r3, #0
 80084b0:	9304      	str	r3, [sp, #16]
 80084b2:	e077      	b.n	80085a4 <_strtod_l+0x60c>
 80084b4:	f018 0f01 	tst.w	r8, #1
 80084b8:	d006      	beq.n	80084c8 <_strtod_l+0x530>
 80084ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80084be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c2:	f7f8 f8c1 	bl	8000648 <__aeabi_dmul>
 80084c6:	2301      	movs	r3, #1
 80084c8:	3501      	adds	r5, #1
 80084ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80084ce:	e7cc      	b.n	800846a <_strtod_l+0x4d2>
 80084d0:	d0ed      	beq.n	80084ae <_strtod_l+0x516>
 80084d2:	f1c8 0800 	rsb	r8, r8, #0
 80084d6:	f018 020f 	ands.w	r2, r8, #15
 80084da:	d00a      	beq.n	80084f2 <_strtod_l+0x55a>
 80084dc:	4b12      	ldr	r3, [pc, #72]	; (8008528 <_strtod_l+0x590>)
 80084de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084e2:	4650      	mov	r0, sl
 80084e4:	4659      	mov	r1, fp
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f7f8 f9d7 	bl	800089c <__aeabi_ddiv>
 80084ee:	4682      	mov	sl, r0
 80084f0:	468b      	mov	fp, r1
 80084f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80084f6:	d0da      	beq.n	80084ae <_strtod_l+0x516>
 80084f8:	f1b8 0f1f 	cmp.w	r8, #31
 80084fc:	dd20      	ble.n	8008540 <_strtod_l+0x5a8>
 80084fe:	2400      	movs	r4, #0
 8008500:	46a0      	mov	r8, r4
 8008502:	9407      	str	r4, [sp, #28]
 8008504:	9405      	str	r4, [sp, #20]
 8008506:	2322      	movs	r3, #34	; 0x22
 8008508:	f04f 0a00 	mov.w	sl, #0
 800850c:	f04f 0b00 	mov.w	fp, #0
 8008510:	f8c9 3000 	str.w	r3, [r9]
 8008514:	e765      	b.n	80083e2 <_strtod_l+0x44a>
 8008516:	bf00      	nop
 8008518:	0800ad5d 	.word	0x0800ad5d
 800851c:	0800adeb 	.word	0x0800adeb
 8008520:	0800ad65 	.word	0x0800ad65
 8008524:	0800ada8 	.word	0x0800ada8
 8008528:	0800ae28 	.word	0x0800ae28
 800852c:	0800ae00 	.word	0x0800ae00
 8008530:	7ff00000 	.word	0x7ff00000
 8008534:	7ca00000 	.word	0x7ca00000
 8008538:	fff80000 	.word	0xfff80000
 800853c:	7fefffff 	.word	0x7fefffff
 8008540:	f018 0310 	ands.w	r3, r8, #16
 8008544:	bf18      	it	ne
 8008546:	236a      	movne	r3, #106	; 0x6a
 8008548:	4da0      	ldr	r5, [pc, #640]	; (80087cc <_strtod_l+0x834>)
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	4650      	mov	r0, sl
 800854e:	4659      	mov	r1, fp
 8008550:	2300      	movs	r3, #0
 8008552:	f1b8 0f00 	cmp.w	r8, #0
 8008556:	f300 810a 	bgt.w	800876e <_strtod_l+0x7d6>
 800855a:	b10b      	cbz	r3, 8008560 <_strtod_l+0x5c8>
 800855c:	4682      	mov	sl, r0
 800855e:	468b      	mov	fp, r1
 8008560:	9b04      	ldr	r3, [sp, #16]
 8008562:	b1bb      	cbz	r3, 8008594 <_strtod_l+0x5fc>
 8008564:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008568:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800856c:	2b00      	cmp	r3, #0
 800856e:	4659      	mov	r1, fp
 8008570:	dd10      	ble.n	8008594 <_strtod_l+0x5fc>
 8008572:	2b1f      	cmp	r3, #31
 8008574:	f340 8107 	ble.w	8008786 <_strtod_l+0x7ee>
 8008578:	2b34      	cmp	r3, #52	; 0x34
 800857a:	bfde      	ittt	le
 800857c:	3b20      	suble	r3, #32
 800857e:	f04f 32ff 	movle.w	r2, #4294967295
 8008582:	fa02 f303 	lslle.w	r3, r2, r3
 8008586:	f04f 0a00 	mov.w	sl, #0
 800858a:	bfcc      	ite	gt
 800858c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008590:	ea03 0b01 	andle.w	fp, r3, r1
 8008594:	2200      	movs	r2, #0
 8008596:	2300      	movs	r3, #0
 8008598:	4650      	mov	r0, sl
 800859a:	4659      	mov	r1, fp
 800859c:	f7f8 fabc 	bl	8000b18 <__aeabi_dcmpeq>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	d1ac      	bne.n	80084fe <_strtod_l+0x566>
 80085a4:	9b07      	ldr	r3, [sp, #28]
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	9a05      	ldr	r2, [sp, #20]
 80085aa:	9908      	ldr	r1, [sp, #32]
 80085ac:	4623      	mov	r3, r4
 80085ae:	4648      	mov	r0, r9
 80085b0:	f001 fdaf 	bl	800a112 <__s2b>
 80085b4:	9007      	str	r0, [sp, #28]
 80085b6:	2800      	cmp	r0, #0
 80085b8:	f43f af08 	beq.w	80083cc <_strtod_l+0x434>
 80085bc:	9a06      	ldr	r2, [sp, #24]
 80085be:	9b06      	ldr	r3, [sp, #24]
 80085c0:	2a00      	cmp	r2, #0
 80085c2:	f1c3 0300 	rsb	r3, r3, #0
 80085c6:	bfa8      	it	ge
 80085c8:	2300      	movge	r3, #0
 80085ca:	930e      	str	r3, [sp, #56]	; 0x38
 80085cc:	2400      	movs	r4, #0
 80085ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80085d2:	9316      	str	r3, [sp, #88]	; 0x58
 80085d4:	46a0      	mov	r8, r4
 80085d6:	9b07      	ldr	r3, [sp, #28]
 80085d8:	4648      	mov	r0, r9
 80085da:	6859      	ldr	r1, [r3, #4]
 80085dc:	f001 fd13 	bl	800a006 <_Balloc>
 80085e0:	9005      	str	r0, [sp, #20]
 80085e2:	2800      	cmp	r0, #0
 80085e4:	f43f aef6 	beq.w	80083d4 <_strtod_l+0x43c>
 80085e8:	9b07      	ldr	r3, [sp, #28]
 80085ea:	691a      	ldr	r2, [r3, #16]
 80085ec:	3202      	adds	r2, #2
 80085ee:	f103 010c 	add.w	r1, r3, #12
 80085f2:	0092      	lsls	r2, r2, #2
 80085f4:	300c      	adds	r0, #12
 80085f6:	f001 fcfb 	bl	8009ff0 <memcpy>
 80085fa:	aa1e      	add	r2, sp, #120	; 0x78
 80085fc:	a91d      	add	r1, sp, #116	; 0x74
 80085fe:	ec4b ab10 	vmov	d0, sl, fp
 8008602:	4648      	mov	r0, r9
 8008604:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008608:	f002 f83e 	bl	800a688 <__d2b>
 800860c:	901c      	str	r0, [sp, #112]	; 0x70
 800860e:	2800      	cmp	r0, #0
 8008610:	f43f aee0 	beq.w	80083d4 <_strtod_l+0x43c>
 8008614:	2101      	movs	r1, #1
 8008616:	4648      	mov	r0, r9
 8008618:	f001 fe07 	bl	800a22a <__i2b>
 800861c:	4680      	mov	r8, r0
 800861e:	2800      	cmp	r0, #0
 8008620:	f43f aed8 	beq.w	80083d4 <_strtod_l+0x43c>
 8008624:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008626:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008628:	2e00      	cmp	r6, #0
 800862a:	bfab      	itete	ge
 800862c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800862e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008630:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008632:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8008634:	bfac      	ite	ge
 8008636:	18f7      	addge	r7, r6, r3
 8008638:	1b9d      	sublt	r5, r3, r6
 800863a:	9b04      	ldr	r3, [sp, #16]
 800863c:	1af6      	subs	r6, r6, r3
 800863e:	4416      	add	r6, r2
 8008640:	4b63      	ldr	r3, [pc, #396]	; (80087d0 <_strtod_l+0x838>)
 8008642:	3e01      	subs	r6, #1
 8008644:	429e      	cmp	r6, r3
 8008646:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800864a:	f280 80af 	bge.w	80087ac <_strtod_l+0x814>
 800864e:	1b9b      	subs	r3, r3, r6
 8008650:	2b1f      	cmp	r3, #31
 8008652:	eba2 0203 	sub.w	r2, r2, r3
 8008656:	f04f 0101 	mov.w	r1, #1
 800865a:	f300 809b 	bgt.w	8008794 <_strtod_l+0x7fc>
 800865e:	fa01 f303 	lsl.w	r3, r1, r3
 8008662:	930f      	str	r3, [sp, #60]	; 0x3c
 8008664:	2300      	movs	r3, #0
 8008666:	930a      	str	r3, [sp, #40]	; 0x28
 8008668:	18be      	adds	r6, r7, r2
 800866a:	9b04      	ldr	r3, [sp, #16]
 800866c:	42b7      	cmp	r7, r6
 800866e:	4415      	add	r5, r2
 8008670:	441d      	add	r5, r3
 8008672:	463b      	mov	r3, r7
 8008674:	bfa8      	it	ge
 8008676:	4633      	movge	r3, r6
 8008678:	42ab      	cmp	r3, r5
 800867a:	bfa8      	it	ge
 800867c:	462b      	movge	r3, r5
 800867e:	2b00      	cmp	r3, #0
 8008680:	bfc2      	ittt	gt
 8008682:	1af6      	subgt	r6, r6, r3
 8008684:	1aed      	subgt	r5, r5, r3
 8008686:	1aff      	subgt	r7, r7, r3
 8008688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800868a:	b1bb      	cbz	r3, 80086bc <_strtod_l+0x724>
 800868c:	4641      	mov	r1, r8
 800868e:	461a      	mov	r2, r3
 8008690:	4648      	mov	r0, r9
 8008692:	f001 fe69 	bl	800a368 <__pow5mult>
 8008696:	4680      	mov	r8, r0
 8008698:	2800      	cmp	r0, #0
 800869a:	f43f ae9b 	beq.w	80083d4 <_strtod_l+0x43c>
 800869e:	4601      	mov	r1, r0
 80086a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80086a2:	4648      	mov	r0, r9
 80086a4:	f001 fdca 	bl	800a23c <__multiply>
 80086a8:	900c      	str	r0, [sp, #48]	; 0x30
 80086aa:	2800      	cmp	r0, #0
 80086ac:	f43f ae92 	beq.w	80083d4 <_strtod_l+0x43c>
 80086b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80086b2:	4648      	mov	r0, r9
 80086b4:	f001 fcdb 	bl	800a06e <_Bfree>
 80086b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086ba:	931c      	str	r3, [sp, #112]	; 0x70
 80086bc:	2e00      	cmp	r6, #0
 80086be:	dc7a      	bgt.n	80087b6 <_strtod_l+0x81e>
 80086c0:	9b06      	ldr	r3, [sp, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dd08      	ble.n	80086d8 <_strtod_l+0x740>
 80086c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80086c8:	9905      	ldr	r1, [sp, #20]
 80086ca:	4648      	mov	r0, r9
 80086cc:	f001 fe4c 	bl	800a368 <__pow5mult>
 80086d0:	9005      	str	r0, [sp, #20]
 80086d2:	2800      	cmp	r0, #0
 80086d4:	f43f ae7e 	beq.w	80083d4 <_strtod_l+0x43c>
 80086d8:	2d00      	cmp	r5, #0
 80086da:	dd08      	ble.n	80086ee <_strtod_l+0x756>
 80086dc:	462a      	mov	r2, r5
 80086de:	9905      	ldr	r1, [sp, #20]
 80086e0:	4648      	mov	r0, r9
 80086e2:	f001 fe8f 	bl	800a404 <__lshift>
 80086e6:	9005      	str	r0, [sp, #20]
 80086e8:	2800      	cmp	r0, #0
 80086ea:	f43f ae73 	beq.w	80083d4 <_strtod_l+0x43c>
 80086ee:	2f00      	cmp	r7, #0
 80086f0:	dd08      	ble.n	8008704 <_strtod_l+0x76c>
 80086f2:	4641      	mov	r1, r8
 80086f4:	463a      	mov	r2, r7
 80086f6:	4648      	mov	r0, r9
 80086f8:	f001 fe84 	bl	800a404 <__lshift>
 80086fc:	4680      	mov	r8, r0
 80086fe:	2800      	cmp	r0, #0
 8008700:	f43f ae68 	beq.w	80083d4 <_strtod_l+0x43c>
 8008704:	9a05      	ldr	r2, [sp, #20]
 8008706:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008708:	4648      	mov	r0, r9
 800870a:	f001 fee9 	bl	800a4e0 <__mdiff>
 800870e:	4604      	mov	r4, r0
 8008710:	2800      	cmp	r0, #0
 8008712:	f43f ae5f 	beq.w	80083d4 <_strtod_l+0x43c>
 8008716:	68c3      	ldr	r3, [r0, #12]
 8008718:	930c      	str	r3, [sp, #48]	; 0x30
 800871a:	2300      	movs	r3, #0
 800871c:	60c3      	str	r3, [r0, #12]
 800871e:	4641      	mov	r1, r8
 8008720:	f001 fec4 	bl	800a4ac <__mcmp>
 8008724:	2800      	cmp	r0, #0
 8008726:	da55      	bge.n	80087d4 <_strtod_l+0x83c>
 8008728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800872a:	b9e3      	cbnz	r3, 8008766 <_strtod_l+0x7ce>
 800872c:	f1ba 0f00 	cmp.w	sl, #0
 8008730:	d119      	bne.n	8008766 <_strtod_l+0x7ce>
 8008732:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008736:	b9b3      	cbnz	r3, 8008766 <_strtod_l+0x7ce>
 8008738:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800873c:	0d1b      	lsrs	r3, r3, #20
 800873e:	051b      	lsls	r3, r3, #20
 8008740:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008744:	d90f      	bls.n	8008766 <_strtod_l+0x7ce>
 8008746:	6963      	ldr	r3, [r4, #20]
 8008748:	b913      	cbnz	r3, 8008750 <_strtod_l+0x7b8>
 800874a:	6923      	ldr	r3, [r4, #16]
 800874c:	2b01      	cmp	r3, #1
 800874e:	dd0a      	ble.n	8008766 <_strtod_l+0x7ce>
 8008750:	4621      	mov	r1, r4
 8008752:	2201      	movs	r2, #1
 8008754:	4648      	mov	r0, r9
 8008756:	f001 fe55 	bl	800a404 <__lshift>
 800875a:	4641      	mov	r1, r8
 800875c:	4604      	mov	r4, r0
 800875e:	f001 fea5 	bl	800a4ac <__mcmp>
 8008762:	2800      	cmp	r0, #0
 8008764:	dc67      	bgt.n	8008836 <_strtod_l+0x89e>
 8008766:	9b04      	ldr	r3, [sp, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d171      	bne.n	8008850 <_strtod_l+0x8b8>
 800876c:	e63d      	b.n	80083ea <_strtod_l+0x452>
 800876e:	f018 0f01 	tst.w	r8, #1
 8008772:	d004      	beq.n	800877e <_strtod_l+0x7e6>
 8008774:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008778:	f7f7 ff66 	bl	8000648 <__aeabi_dmul>
 800877c:	2301      	movs	r3, #1
 800877e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008782:	3508      	adds	r5, #8
 8008784:	e6e5      	b.n	8008552 <_strtod_l+0x5ba>
 8008786:	f04f 32ff 	mov.w	r2, #4294967295
 800878a:	fa02 f303 	lsl.w	r3, r2, r3
 800878e:	ea03 0a0a 	and.w	sl, r3, sl
 8008792:	e6ff      	b.n	8008594 <_strtod_l+0x5fc>
 8008794:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008798:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800879c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80087a0:	36e2      	adds	r6, #226	; 0xe2
 80087a2:	fa01 f306 	lsl.w	r3, r1, r6
 80087a6:	930a      	str	r3, [sp, #40]	; 0x28
 80087a8:	910f      	str	r1, [sp, #60]	; 0x3c
 80087aa:	e75d      	b.n	8008668 <_strtod_l+0x6d0>
 80087ac:	2300      	movs	r3, #0
 80087ae:	930a      	str	r3, [sp, #40]	; 0x28
 80087b0:	2301      	movs	r3, #1
 80087b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80087b4:	e758      	b.n	8008668 <_strtod_l+0x6d0>
 80087b6:	4632      	mov	r2, r6
 80087b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80087ba:	4648      	mov	r0, r9
 80087bc:	f001 fe22 	bl	800a404 <__lshift>
 80087c0:	901c      	str	r0, [sp, #112]	; 0x70
 80087c2:	2800      	cmp	r0, #0
 80087c4:	f47f af7c 	bne.w	80086c0 <_strtod_l+0x728>
 80087c8:	e604      	b.n	80083d4 <_strtod_l+0x43c>
 80087ca:	bf00      	nop
 80087cc:	0800adc0 	.word	0x0800adc0
 80087d0:	fffffc02 	.word	0xfffffc02
 80087d4:	465d      	mov	r5, fp
 80087d6:	f040 8086 	bne.w	80088e6 <_strtod_l+0x94e>
 80087da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087e0:	b32a      	cbz	r2, 800882e <_strtod_l+0x896>
 80087e2:	4aaf      	ldr	r2, [pc, #700]	; (8008aa0 <_strtod_l+0xb08>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d153      	bne.n	8008890 <_strtod_l+0x8f8>
 80087e8:	9b04      	ldr	r3, [sp, #16]
 80087ea:	4650      	mov	r0, sl
 80087ec:	b1d3      	cbz	r3, 8008824 <_strtod_l+0x88c>
 80087ee:	4aad      	ldr	r2, [pc, #692]	; (8008aa4 <_strtod_l+0xb0c>)
 80087f0:	402a      	ands	r2, r5
 80087f2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80087f6:	f04f 31ff 	mov.w	r1, #4294967295
 80087fa:	d816      	bhi.n	800882a <_strtod_l+0x892>
 80087fc:	0d12      	lsrs	r2, r2, #20
 80087fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008802:	fa01 f303 	lsl.w	r3, r1, r3
 8008806:	4298      	cmp	r0, r3
 8008808:	d142      	bne.n	8008890 <_strtod_l+0x8f8>
 800880a:	4ba7      	ldr	r3, [pc, #668]	; (8008aa8 <_strtod_l+0xb10>)
 800880c:	429d      	cmp	r5, r3
 800880e:	d102      	bne.n	8008816 <_strtod_l+0x87e>
 8008810:	3001      	adds	r0, #1
 8008812:	f43f addf 	beq.w	80083d4 <_strtod_l+0x43c>
 8008816:	4ba3      	ldr	r3, [pc, #652]	; (8008aa4 <_strtod_l+0xb0c>)
 8008818:	402b      	ands	r3, r5
 800881a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800881e:	f04f 0a00 	mov.w	sl, #0
 8008822:	e7a0      	b.n	8008766 <_strtod_l+0x7ce>
 8008824:	f04f 33ff 	mov.w	r3, #4294967295
 8008828:	e7ed      	b.n	8008806 <_strtod_l+0x86e>
 800882a:	460b      	mov	r3, r1
 800882c:	e7eb      	b.n	8008806 <_strtod_l+0x86e>
 800882e:	bb7b      	cbnz	r3, 8008890 <_strtod_l+0x8f8>
 8008830:	f1ba 0f00 	cmp.w	sl, #0
 8008834:	d12c      	bne.n	8008890 <_strtod_l+0x8f8>
 8008836:	9904      	ldr	r1, [sp, #16]
 8008838:	4a9a      	ldr	r2, [pc, #616]	; (8008aa4 <_strtod_l+0xb0c>)
 800883a:	465b      	mov	r3, fp
 800883c:	b1f1      	cbz	r1, 800887c <_strtod_l+0x8e4>
 800883e:	ea02 010b 	and.w	r1, r2, fp
 8008842:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008846:	dc19      	bgt.n	800887c <_strtod_l+0x8e4>
 8008848:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800884c:	f77f ae5b 	ble.w	8008506 <_strtod_l+0x56e>
 8008850:	4a96      	ldr	r2, [pc, #600]	; (8008aac <_strtod_l+0xb14>)
 8008852:	2300      	movs	r3, #0
 8008854:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008858:	4650      	mov	r0, sl
 800885a:	4659      	mov	r1, fp
 800885c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008860:	f7f7 fef2 	bl	8000648 <__aeabi_dmul>
 8008864:	4682      	mov	sl, r0
 8008866:	468b      	mov	fp, r1
 8008868:	2900      	cmp	r1, #0
 800886a:	f47f adbe 	bne.w	80083ea <_strtod_l+0x452>
 800886e:	2800      	cmp	r0, #0
 8008870:	f47f adbb 	bne.w	80083ea <_strtod_l+0x452>
 8008874:	2322      	movs	r3, #34	; 0x22
 8008876:	f8c9 3000 	str.w	r3, [r9]
 800887a:	e5b6      	b.n	80083ea <_strtod_l+0x452>
 800887c:	4013      	ands	r3, r2
 800887e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008882:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008886:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800888a:	f04f 3aff 	mov.w	sl, #4294967295
 800888e:	e76a      	b.n	8008766 <_strtod_l+0x7ce>
 8008890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008892:	b193      	cbz	r3, 80088ba <_strtod_l+0x922>
 8008894:	422b      	tst	r3, r5
 8008896:	f43f af66 	beq.w	8008766 <_strtod_l+0x7ce>
 800889a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800889c:	9a04      	ldr	r2, [sp, #16]
 800889e:	4650      	mov	r0, sl
 80088a0:	4659      	mov	r1, fp
 80088a2:	b173      	cbz	r3, 80088c2 <_strtod_l+0x92a>
 80088a4:	f7ff fb5a 	bl	8007f5c <sulp>
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80088b0:	f7f7 fd14 	bl	80002dc <__adddf3>
 80088b4:	4682      	mov	sl, r0
 80088b6:	468b      	mov	fp, r1
 80088b8:	e755      	b.n	8008766 <_strtod_l+0x7ce>
 80088ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088bc:	ea13 0f0a 	tst.w	r3, sl
 80088c0:	e7e9      	b.n	8008896 <_strtod_l+0x8fe>
 80088c2:	f7ff fb4b 	bl	8007f5c <sulp>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80088ce:	f7f7 fd03 	bl	80002d8 <__aeabi_dsub>
 80088d2:	2200      	movs	r2, #0
 80088d4:	2300      	movs	r3, #0
 80088d6:	4682      	mov	sl, r0
 80088d8:	468b      	mov	fp, r1
 80088da:	f7f8 f91d 	bl	8000b18 <__aeabi_dcmpeq>
 80088de:	2800      	cmp	r0, #0
 80088e0:	f47f ae11 	bne.w	8008506 <_strtod_l+0x56e>
 80088e4:	e73f      	b.n	8008766 <_strtod_l+0x7ce>
 80088e6:	4641      	mov	r1, r8
 80088e8:	4620      	mov	r0, r4
 80088ea:	f001 ff1c 	bl	800a726 <__ratio>
 80088ee:	ec57 6b10 	vmov	r6, r7, d0
 80088f2:	2200      	movs	r2, #0
 80088f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80088f8:	ee10 0a10 	vmov	r0, s0
 80088fc:	4639      	mov	r1, r7
 80088fe:	f7f8 f91f 	bl	8000b40 <__aeabi_dcmple>
 8008902:	2800      	cmp	r0, #0
 8008904:	d077      	beq.n	80089f6 <_strtod_l+0xa5e>
 8008906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008908:	2b00      	cmp	r3, #0
 800890a:	d04a      	beq.n	80089a2 <_strtod_l+0xa0a>
 800890c:	4b68      	ldr	r3, [pc, #416]	; (8008ab0 <_strtod_l+0xb18>)
 800890e:	2200      	movs	r2, #0
 8008910:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008914:	4f66      	ldr	r7, [pc, #408]	; (8008ab0 <_strtod_l+0xb18>)
 8008916:	2600      	movs	r6, #0
 8008918:	4b62      	ldr	r3, [pc, #392]	; (8008aa4 <_strtod_l+0xb0c>)
 800891a:	402b      	ands	r3, r5
 800891c:	930f      	str	r3, [sp, #60]	; 0x3c
 800891e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008920:	4b64      	ldr	r3, [pc, #400]	; (8008ab4 <_strtod_l+0xb1c>)
 8008922:	429a      	cmp	r2, r3
 8008924:	f040 80ce 	bne.w	8008ac4 <_strtod_l+0xb2c>
 8008928:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800892c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008930:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8008934:	ec4b ab10 	vmov	d0, sl, fp
 8008938:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800893c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008940:	f001 fe2c 	bl	800a59c <__ulp>
 8008944:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008948:	ec53 2b10 	vmov	r2, r3, d0
 800894c:	f7f7 fe7c 	bl	8000648 <__aeabi_dmul>
 8008950:	4652      	mov	r2, sl
 8008952:	465b      	mov	r3, fp
 8008954:	f7f7 fcc2 	bl	80002dc <__adddf3>
 8008958:	460b      	mov	r3, r1
 800895a:	4952      	ldr	r1, [pc, #328]	; (8008aa4 <_strtod_l+0xb0c>)
 800895c:	4a56      	ldr	r2, [pc, #344]	; (8008ab8 <_strtod_l+0xb20>)
 800895e:	4019      	ands	r1, r3
 8008960:	4291      	cmp	r1, r2
 8008962:	4682      	mov	sl, r0
 8008964:	d95b      	bls.n	8008a1e <_strtod_l+0xa86>
 8008966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008968:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800896c:	4293      	cmp	r3, r2
 800896e:	d103      	bne.n	8008978 <_strtod_l+0x9e0>
 8008970:	9b08      	ldr	r3, [sp, #32]
 8008972:	3301      	adds	r3, #1
 8008974:	f43f ad2e 	beq.w	80083d4 <_strtod_l+0x43c>
 8008978:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008aa8 <_strtod_l+0xb10>
 800897c:	f04f 3aff 	mov.w	sl, #4294967295
 8008980:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008982:	4648      	mov	r0, r9
 8008984:	f001 fb73 	bl	800a06e <_Bfree>
 8008988:	9905      	ldr	r1, [sp, #20]
 800898a:	4648      	mov	r0, r9
 800898c:	f001 fb6f 	bl	800a06e <_Bfree>
 8008990:	4641      	mov	r1, r8
 8008992:	4648      	mov	r0, r9
 8008994:	f001 fb6b 	bl	800a06e <_Bfree>
 8008998:	4621      	mov	r1, r4
 800899a:	4648      	mov	r0, r9
 800899c:	f001 fb67 	bl	800a06e <_Bfree>
 80089a0:	e619      	b.n	80085d6 <_strtod_l+0x63e>
 80089a2:	f1ba 0f00 	cmp.w	sl, #0
 80089a6:	d11a      	bne.n	80089de <_strtod_l+0xa46>
 80089a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089ac:	b9eb      	cbnz	r3, 80089ea <_strtod_l+0xa52>
 80089ae:	2200      	movs	r2, #0
 80089b0:	4b3f      	ldr	r3, [pc, #252]	; (8008ab0 <_strtod_l+0xb18>)
 80089b2:	4630      	mov	r0, r6
 80089b4:	4639      	mov	r1, r7
 80089b6:	f7f8 f8b9 	bl	8000b2c <__aeabi_dcmplt>
 80089ba:	b9c8      	cbnz	r0, 80089f0 <_strtod_l+0xa58>
 80089bc:	4630      	mov	r0, r6
 80089be:	4639      	mov	r1, r7
 80089c0:	2200      	movs	r2, #0
 80089c2:	4b3e      	ldr	r3, [pc, #248]	; (8008abc <_strtod_l+0xb24>)
 80089c4:	f7f7 fe40 	bl	8000648 <__aeabi_dmul>
 80089c8:	4606      	mov	r6, r0
 80089ca:	460f      	mov	r7, r1
 80089cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80089d0:	9618      	str	r6, [sp, #96]	; 0x60
 80089d2:	9319      	str	r3, [sp, #100]	; 0x64
 80089d4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80089d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80089dc:	e79c      	b.n	8008918 <_strtod_l+0x980>
 80089de:	f1ba 0f01 	cmp.w	sl, #1
 80089e2:	d102      	bne.n	80089ea <_strtod_l+0xa52>
 80089e4:	2d00      	cmp	r5, #0
 80089e6:	f43f ad8e 	beq.w	8008506 <_strtod_l+0x56e>
 80089ea:	2200      	movs	r2, #0
 80089ec:	4b34      	ldr	r3, [pc, #208]	; (8008ac0 <_strtod_l+0xb28>)
 80089ee:	e78f      	b.n	8008910 <_strtod_l+0x978>
 80089f0:	2600      	movs	r6, #0
 80089f2:	4f32      	ldr	r7, [pc, #200]	; (8008abc <_strtod_l+0xb24>)
 80089f4:	e7ea      	b.n	80089cc <_strtod_l+0xa34>
 80089f6:	4b31      	ldr	r3, [pc, #196]	; (8008abc <_strtod_l+0xb24>)
 80089f8:	4630      	mov	r0, r6
 80089fa:	4639      	mov	r1, r7
 80089fc:	2200      	movs	r2, #0
 80089fe:	f7f7 fe23 	bl	8000648 <__aeabi_dmul>
 8008a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a04:	4606      	mov	r6, r0
 8008a06:	460f      	mov	r7, r1
 8008a08:	b933      	cbnz	r3, 8008a18 <_strtod_l+0xa80>
 8008a0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a0e:	9010      	str	r0, [sp, #64]	; 0x40
 8008a10:	9311      	str	r3, [sp, #68]	; 0x44
 8008a12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a16:	e7df      	b.n	80089d8 <_strtod_l+0xa40>
 8008a18:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008a1c:	e7f9      	b.n	8008a12 <_strtod_l+0xa7a>
 8008a1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008a22:	9b04      	ldr	r3, [sp, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1ab      	bne.n	8008980 <_strtod_l+0x9e8>
 8008a28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a2c:	0d1b      	lsrs	r3, r3, #20
 8008a2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a30:	051b      	lsls	r3, r3, #20
 8008a32:	429a      	cmp	r2, r3
 8008a34:	465d      	mov	r5, fp
 8008a36:	d1a3      	bne.n	8008980 <_strtod_l+0x9e8>
 8008a38:	4639      	mov	r1, r7
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	f7f8 f8b4 	bl	8000ba8 <__aeabi_d2iz>
 8008a40:	f7f7 fd98 	bl	8000574 <__aeabi_i2d>
 8008a44:	460b      	mov	r3, r1
 8008a46:	4602      	mov	r2, r0
 8008a48:	4639      	mov	r1, r7
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	f7f7 fc44 	bl	80002d8 <__aeabi_dsub>
 8008a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a52:	4606      	mov	r6, r0
 8008a54:	460f      	mov	r7, r1
 8008a56:	b933      	cbnz	r3, 8008a66 <_strtod_l+0xace>
 8008a58:	f1ba 0f00 	cmp.w	sl, #0
 8008a5c:	d103      	bne.n	8008a66 <_strtod_l+0xace>
 8008a5e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8008a62:	2d00      	cmp	r5, #0
 8008a64:	d06d      	beq.n	8008b42 <_strtod_l+0xbaa>
 8008a66:	a30a      	add	r3, pc, #40	; (adr r3, 8008a90 <_strtod_l+0xaf8>)
 8008a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	4639      	mov	r1, r7
 8008a70:	f7f8 f85c 	bl	8000b2c <__aeabi_dcmplt>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	f47f acb8 	bne.w	80083ea <_strtod_l+0x452>
 8008a7a:	a307      	add	r3, pc, #28	; (adr r3, 8008a98 <_strtod_l+0xb00>)
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	4630      	mov	r0, r6
 8008a82:	4639      	mov	r1, r7
 8008a84:	f7f8 f870 	bl	8000b68 <__aeabi_dcmpgt>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	f43f af79 	beq.w	8008980 <_strtod_l+0x9e8>
 8008a8e:	e4ac      	b.n	80083ea <_strtod_l+0x452>
 8008a90:	94a03595 	.word	0x94a03595
 8008a94:	3fdfffff 	.word	0x3fdfffff
 8008a98:	35afe535 	.word	0x35afe535
 8008a9c:	3fe00000 	.word	0x3fe00000
 8008aa0:	000fffff 	.word	0x000fffff
 8008aa4:	7ff00000 	.word	0x7ff00000
 8008aa8:	7fefffff 	.word	0x7fefffff
 8008aac:	39500000 	.word	0x39500000
 8008ab0:	3ff00000 	.word	0x3ff00000
 8008ab4:	7fe00000 	.word	0x7fe00000
 8008ab8:	7c9fffff 	.word	0x7c9fffff
 8008abc:	3fe00000 	.word	0x3fe00000
 8008ac0:	bff00000 	.word	0xbff00000
 8008ac4:	9b04      	ldr	r3, [sp, #16]
 8008ac6:	b333      	cbz	r3, 8008b16 <_strtod_l+0xb7e>
 8008ac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008aca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ace:	d822      	bhi.n	8008b16 <_strtod_l+0xb7e>
 8008ad0:	a327      	add	r3, pc, #156	; (adr r3, 8008b70 <_strtod_l+0xbd8>)
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	4639      	mov	r1, r7
 8008ada:	f7f8 f831 	bl	8000b40 <__aeabi_dcmple>
 8008ade:	b1a0      	cbz	r0, 8008b0a <_strtod_l+0xb72>
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	f7f8 f888 	bl	8000bf8 <__aeabi_d2uiz>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	bf08      	it	eq
 8008aec:	2001      	moveq	r0, #1
 8008aee:	f7f7 fd31 	bl	8000554 <__aeabi_ui2d>
 8008af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008af4:	4606      	mov	r6, r0
 8008af6:	460f      	mov	r7, r1
 8008af8:	bb03      	cbnz	r3, 8008b3c <_strtod_l+0xba4>
 8008afa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008afe:	9012      	str	r0, [sp, #72]	; 0x48
 8008b00:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008b06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b0e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008b12:	1a9b      	subs	r3, r3, r2
 8008b14:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b16:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008b1a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008b1e:	f001 fd3d 	bl	800a59c <__ulp>
 8008b22:	4650      	mov	r0, sl
 8008b24:	ec53 2b10 	vmov	r2, r3, d0
 8008b28:	4659      	mov	r1, fp
 8008b2a:	f7f7 fd8d 	bl	8000648 <__aeabi_dmul>
 8008b2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b32:	f7f7 fbd3 	bl	80002dc <__adddf3>
 8008b36:	4682      	mov	sl, r0
 8008b38:	468b      	mov	fp, r1
 8008b3a:	e772      	b.n	8008a22 <_strtod_l+0xa8a>
 8008b3c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008b40:	e7df      	b.n	8008b02 <_strtod_l+0xb6a>
 8008b42:	a30d      	add	r3, pc, #52	; (adr r3, 8008b78 <_strtod_l+0xbe0>)
 8008b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b48:	f7f7 fff0 	bl	8000b2c <__aeabi_dcmplt>
 8008b4c:	e79c      	b.n	8008a88 <_strtod_l+0xaf0>
 8008b4e:	2300      	movs	r3, #0
 8008b50:	930d      	str	r3, [sp, #52]	; 0x34
 8008b52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008b54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	f7ff ba61 	b.w	800801e <_strtod_l+0x86>
 8008b5c:	2b65      	cmp	r3, #101	; 0x65
 8008b5e:	f04f 0200 	mov.w	r2, #0
 8008b62:	f43f ab4e 	beq.w	8008202 <_strtod_l+0x26a>
 8008b66:	2101      	movs	r1, #1
 8008b68:	4614      	mov	r4, r2
 8008b6a:	9104      	str	r1, [sp, #16]
 8008b6c:	f7ff bacb 	b.w	8008106 <_strtod_l+0x16e>
 8008b70:	ffc00000 	.word	0xffc00000
 8008b74:	41dfffff 	.word	0x41dfffff
 8008b78:	94a03595 	.word	0x94a03595
 8008b7c:	3fcfffff 	.word	0x3fcfffff

08008b80 <_strtod_r>:
 8008b80:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <_strtod_r+0x18>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	b410      	push	{r4}
 8008b86:	6a1b      	ldr	r3, [r3, #32]
 8008b88:	4c04      	ldr	r4, [pc, #16]	; (8008b9c <_strtod_r+0x1c>)
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	bf08      	it	eq
 8008b8e:	4623      	moveq	r3, r4
 8008b90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b94:	f7ff ba00 	b.w	8007f98 <_strtod_l>
 8008b98:	2000000c 	.word	0x2000000c
 8008b9c:	20000070 	.word	0x20000070

08008ba0 <_strtol_l.isra.0>:
 8008ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba4:	4680      	mov	r8, r0
 8008ba6:	4689      	mov	r9, r1
 8008ba8:	4692      	mov	sl, r2
 8008baa:	461e      	mov	r6, r3
 8008bac:	460f      	mov	r7, r1
 8008bae:	463d      	mov	r5, r7
 8008bb0:	9808      	ldr	r0, [sp, #32]
 8008bb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bb6:	f001 f9ed 	bl	8009f94 <__locale_ctype_ptr_l>
 8008bba:	4420      	add	r0, r4
 8008bbc:	7843      	ldrb	r3, [r0, #1]
 8008bbe:	f013 0308 	ands.w	r3, r3, #8
 8008bc2:	d132      	bne.n	8008c2a <_strtol_l.isra.0+0x8a>
 8008bc4:	2c2d      	cmp	r4, #45	; 0x2d
 8008bc6:	d132      	bne.n	8008c2e <_strtol_l.isra.0+0x8e>
 8008bc8:	787c      	ldrb	r4, [r7, #1]
 8008bca:	1cbd      	adds	r5, r7, #2
 8008bcc:	2201      	movs	r2, #1
 8008bce:	2e00      	cmp	r6, #0
 8008bd0:	d05d      	beq.n	8008c8e <_strtol_l.isra.0+0xee>
 8008bd2:	2e10      	cmp	r6, #16
 8008bd4:	d109      	bne.n	8008bea <_strtol_l.isra.0+0x4a>
 8008bd6:	2c30      	cmp	r4, #48	; 0x30
 8008bd8:	d107      	bne.n	8008bea <_strtol_l.isra.0+0x4a>
 8008bda:	782b      	ldrb	r3, [r5, #0]
 8008bdc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008be0:	2b58      	cmp	r3, #88	; 0x58
 8008be2:	d14f      	bne.n	8008c84 <_strtol_l.isra.0+0xe4>
 8008be4:	786c      	ldrb	r4, [r5, #1]
 8008be6:	2610      	movs	r6, #16
 8008be8:	3502      	adds	r5, #2
 8008bea:	2a00      	cmp	r2, #0
 8008bec:	bf14      	ite	ne
 8008bee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008bf2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008bf6:	2700      	movs	r7, #0
 8008bf8:	fbb1 fcf6 	udiv	ip, r1, r6
 8008bfc:	4638      	mov	r0, r7
 8008bfe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8008c02:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008c06:	2b09      	cmp	r3, #9
 8008c08:	d817      	bhi.n	8008c3a <_strtol_l.isra.0+0x9a>
 8008c0a:	461c      	mov	r4, r3
 8008c0c:	42a6      	cmp	r6, r4
 8008c0e:	dd23      	ble.n	8008c58 <_strtol_l.isra.0+0xb8>
 8008c10:	1c7b      	adds	r3, r7, #1
 8008c12:	d007      	beq.n	8008c24 <_strtol_l.isra.0+0x84>
 8008c14:	4584      	cmp	ip, r0
 8008c16:	d31c      	bcc.n	8008c52 <_strtol_l.isra.0+0xb2>
 8008c18:	d101      	bne.n	8008c1e <_strtol_l.isra.0+0x7e>
 8008c1a:	45a6      	cmp	lr, r4
 8008c1c:	db19      	blt.n	8008c52 <_strtol_l.isra.0+0xb2>
 8008c1e:	fb00 4006 	mla	r0, r0, r6, r4
 8008c22:	2701      	movs	r7, #1
 8008c24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c28:	e7eb      	b.n	8008c02 <_strtol_l.isra.0+0x62>
 8008c2a:	462f      	mov	r7, r5
 8008c2c:	e7bf      	b.n	8008bae <_strtol_l.isra.0+0xe>
 8008c2e:	2c2b      	cmp	r4, #43	; 0x2b
 8008c30:	bf04      	itt	eq
 8008c32:	1cbd      	addeq	r5, r7, #2
 8008c34:	787c      	ldrbeq	r4, [r7, #1]
 8008c36:	461a      	mov	r2, r3
 8008c38:	e7c9      	b.n	8008bce <_strtol_l.isra.0+0x2e>
 8008c3a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008c3e:	2b19      	cmp	r3, #25
 8008c40:	d801      	bhi.n	8008c46 <_strtol_l.isra.0+0xa6>
 8008c42:	3c37      	subs	r4, #55	; 0x37
 8008c44:	e7e2      	b.n	8008c0c <_strtol_l.isra.0+0x6c>
 8008c46:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008c4a:	2b19      	cmp	r3, #25
 8008c4c:	d804      	bhi.n	8008c58 <_strtol_l.isra.0+0xb8>
 8008c4e:	3c57      	subs	r4, #87	; 0x57
 8008c50:	e7dc      	b.n	8008c0c <_strtol_l.isra.0+0x6c>
 8008c52:	f04f 37ff 	mov.w	r7, #4294967295
 8008c56:	e7e5      	b.n	8008c24 <_strtol_l.isra.0+0x84>
 8008c58:	1c7b      	adds	r3, r7, #1
 8008c5a:	d108      	bne.n	8008c6e <_strtol_l.isra.0+0xce>
 8008c5c:	2322      	movs	r3, #34	; 0x22
 8008c5e:	f8c8 3000 	str.w	r3, [r8]
 8008c62:	4608      	mov	r0, r1
 8008c64:	f1ba 0f00 	cmp.w	sl, #0
 8008c68:	d107      	bne.n	8008c7a <_strtol_l.isra.0+0xda>
 8008c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c6e:	b102      	cbz	r2, 8008c72 <_strtol_l.isra.0+0xd2>
 8008c70:	4240      	negs	r0, r0
 8008c72:	f1ba 0f00 	cmp.w	sl, #0
 8008c76:	d0f8      	beq.n	8008c6a <_strtol_l.isra.0+0xca>
 8008c78:	b10f      	cbz	r7, 8008c7e <_strtol_l.isra.0+0xde>
 8008c7a:	f105 39ff 	add.w	r9, r5, #4294967295
 8008c7e:	f8ca 9000 	str.w	r9, [sl]
 8008c82:	e7f2      	b.n	8008c6a <_strtol_l.isra.0+0xca>
 8008c84:	2430      	movs	r4, #48	; 0x30
 8008c86:	2e00      	cmp	r6, #0
 8008c88:	d1af      	bne.n	8008bea <_strtol_l.isra.0+0x4a>
 8008c8a:	2608      	movs	r6, #8
 8008c8c:	e7ad      	b.n	8008bea <_strtol_l.isra.0+0x4a>
 8008c8e:	2c30      	cmp	r4, #48	; 0x30
 8008c90:	d0a3      	beq.n	8008bda <_strtol_l.isra.0+0x3a>
 8008c92:	260a      	movs	r6, #10
 8008c94:	e7a9      	b.n	8008bea <_strtol_l.isra.0+0x4a>
	...

08008c98 <_strtol_r>:
 8008c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c9a:	4c06      	ldr	r4, [pc, #24]	; (8008cb4 <_strtol_r+0x1c>)
 8008c9c:	4d06      	ldr	r5, [pc, #24]	; (8008cb8 <_strtol_r+0x20>)
 8008c9e:	6824      	ldr	r4, [r4, #0]
 8008ca0:	6a24      	ldr	r4, [r4, #32]
 8008ca2:	2c00      	cmp	r4, #0
 8008ca4:	bf08      	it	eq
 8008ca6:	462c      	moveq	r4, r5
 8008ca8:	9400      	str	r4, [sp, #0]
 8008caa:	f7ff ff79 	bl	8008ba0 <_strtol_l.isra.0>
 8008cae:	b003      	add	sp, #12
 8008cb0:	bd30      	pop	{r4, r5, pc}
 8008cb2:	bf00      	nop
 8008cb4:	2000000c 	.word	0x2000000c
 8008cb8:	20000070 	.word	0x20000070

08008cbc <quorem>:
 8008cbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc0:	6903      	ldr	r3, [r0, #16]
 8008cc2:	690c      	ldr	r4, [r1, #16]
 8008cc4:	42a3      	cmp	r3, r4
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	f2c0 8082 	blt.w	8008dd0 <quorem+0x114>
 8008ccc:	3c01      	subs	r4, #1
 8008cce:	f101 0714 	add.w	r7, r1, #20
 8008cd2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008cd6:	f100 0614 	add.w	r6, r0, #20
 8008cda:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008cde:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008ce2:	eb06 030c 	add.w	r3, r6, ip
 8008ce6:	3501      	adds	r5, #1
 8008ce8:	eb07 090c 	add.w	r9, r7, ip
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	fbb0 f5f5 	udiv	r5, r0, r5
 8008cf2:	b395      	cbz	r5, 8008d5a <quorem+0x9e>
 8008cf4:	f04f 0a00 	mov.w	sl, #0
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	46b6      	mov	lr, r6
 8008cfc:	46d3      	mov	fp, sl
 8008cfe:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d02:	b293      	uxth	r3, r2
 8008d04:	fb05 a303 	mla	r3, r5, r3, sl
 8008d08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	ebab 0303 	sub.w	r3, fp, r3
 8008d12:	0c12      	lsrs	r2, r2, #16
 8008d14:	f8de b000 	ldr.w	fp, [lr]
 8008d18:	fb05 a202 	mla	r2, r5, r2, sl
 8008d1c:	fa13 f38b 	uxtah	r3, r3, fp
 8008d20:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008d24:	fa1f fb82 	uxth.w	fp, r2
 8008d28:	f8de 2000 	ldr.w	r2, [lr]
 8008d2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008d30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d3a:	4581      	cmp	r9, r0
 8008d3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008d40:	f84e 3b04 	str.w	r3, [lr], #4
 8008d44:	d2db      	bcs.n	8008cfe <quorem+0x42>
 8008d46:	f856 300c 	ldr.w	r3, [r6, ip]
 8008d4a:	b933      	cbnz	r3, 8008d5a <quorem+0x9e>
 8008d4c:	9b01      	ldr	r3, [sp, #4]
 8008d4e:	3b04      	subs	r3, #4
 8008d50:	429e      	cmp	r6, r3
 8008d52:	461a      	mov	r2, r3
 8008d54:	d330      	bcc.n	8008db8 <quorem+0xfc>
 8008d56:	f8c8 4010 	str.w	r4, [r8, #16]
 8008d5a:	4640      	mov	r0, r8
 8008d5c:	f001 fba6 	bl	800a4ac <__mcmp>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	db25      	blt.n	8008db0 <quorem+0xf4>
 8008d64:	3501      	adds	r5, #1
 8008d66:	4630      	mov	r0, r6
 8008d68:	f04f 0c00 	mov.w	ip, #0
 8008d6c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008d70:	f8d0 e000 	ldr.w	lr, [r0]
 8008d74:	b293      	uxth	r3, r2
 8008d76:	ebac 0303 	sub.w	r3, ip, r3
 8008d7a:	0c12      	lsrs	r2, r2, #16
 8008d7c:	fa13 f38e 	uxtah	r3, r3, lr
 8008d80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d8e:	45b9      	cmp	r9, r7
 8008d90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d94:	f840 3b04 	str.w	r3, [r0], #4
 8008d98:	d2e8      	bcs.n	8008d6c <quorem+0xb0>
 8008d9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008d9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008da2:	b92a      	cbnz	r2, 8008db0 <quorem+0xf4>
 8008da4:	3b04      	subs	r3, #4
 8008da6:	429e      	cmp	r6, r3
 8008da8:	461a      	mov	r2, r3
 8008daa:	d30b      	bcc.n	8008dc4 <quorem+0x108>
 8008dac:	f8c8 4010 	str.w	r4, [r8, #16]
 8008db0:	4628      	mov	r0, r5
 8008db2:	b003      	add	sp, #12
 8008db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db8:	6812      	ldr	r2, [r2, #0]
 8008dba:	3b04      	subs	r3, #4
 8008dbc:	2a00      	cmp	r2, #0
 8008dbe:	d1ca      	bne.n	8008d56 <quorem+0x9a>
 8008dc0:	3c01      	subs	r4, #1
 8008dc2:	e7c5      	b.n	8008d50 <quorem+0x94>
 8008dc4:	6812      	ldr	r2, [r2, #0]
 8008dc6:	3b04      	subs	r3, #4
 8008dc8:	2a00      	cmp	r2, #0
 8008dca:	d1ef      	bne.n	8008dac <quorem+0xf0>
 8008dcc:	3c01      	subs	r4, #1
 8008dce:	e7ea      	b.n	8008da6 <quorem+0xea>
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	e7ee      	b.n	8008db2 <quorem+0xf6>
 8008dd4:	0000      	movs	r0, r0
	...

08008dd8 <_dtoa_r>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	ec57 6b10 	vmov	r6, r7, d0
 8008de0:	b097      	sub	sp, #92	; 0x5c
 8008de2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008de4:	9106      	str	r1, [sp, #24]
 8008de6:	4604      	mov	r4, r0
 8008de8:	920b      	str	r2, [sp, #44]	; 0x2c
 8008dea:	9312      	str	r3, [sp, #72]	; 0x48
 8008dec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008df0:	e9cd 6700 	strd	r6, r7, [sp]
 8008df4:	b93d      	cbnz	r5, 8008e06 <_dtoa_r+0x2e>
 8008df6:	2010      	movs	r0, #16
 8008df8:	f001 f8e0 	bl	8009fbc <malloc>
 8008dfc:	6260      	str	r0, [r4, #36]	; 0x24
 8008dfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e02:	6005      	str	r5, [r0, #0]
 8008e04:	60c5      	str	r5, [r0, #12]
 8008e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e08:	6819      	ldr	r1, [r3, #0]
 8008e0a:	b151      	cbz	r1, 8008e22 <_dtoa_r+0x4a>
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	604a      	str	r2, [r1, #4]
 8008e10:	2301      	movs	r3, #1
 8008e12:	4093      	lsls	r3, r2
 8008e14:	608b      	str	r3, [r1, #8]
 8008e16:	4620      	mov	r0, r4
 8008e18:	f001 f929 	bl	800a06e <_Bfree>
 8008e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e1e:	2200      	movs	r2, #0
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	1e3b      	subs	r3, r7, #0
 8008e24:	bfbb      	ittet	lt
 8008e26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e2a:	9301      	strlt	r3, [sp, #4]
 8008e2c:	2300      	movge	r3, #0
 8008e2e:	2201      	movlt	r2, #1
 8008e30:	bfac      	ite	ge
 8008e32:	f8c8 3000 	strge.w	r3, [r8]
 8008e36:	f8c8 2000 	strlt.w	r2, [r8]
 8008e3a:	4baf      	ldr	r3, [pc, #700]	; (80090f8 <_dtoa_r+0x320>)
 8008e3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008e40:	ea33 0308 	bics.w	r3, r3, r8
 8008e44:	d114      	bne.n	8008e70 <_dtoa_r+0x98>
 8008e46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e48:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	9b00      	ldr	r3, [sp, #0]
 8008e50:	b923      	cbnz	r3, 8008e5c <_dtoa_r+0x84>
 8008e52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008e56:	2800      	cmp	r0, #0
 8008e58:	f000 8542 	beq.w	80098e0 <_dtoa_r+0xb08>
 8008e5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800910c <_dtoa_r+0x334>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 8544 	beq.w	80098f0 <_dtoa_r+0xb18>
 8008e68:	f10b 0303 	add.w	r3, fp, #3
 8008e6c:	f000 bd3e 	b.w	80098ec <_dtoa_r+0xb14>
 8008e70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008e74:	2200      	movs	r2, #0
 8008e76:	2300      	movs	r3, #0
 8008e78:	4630      	mov	r0, r6
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	f7f7 fe4c 	bl	8000b18 <__aeabi_dcmpeq>
 8008e80:	4681      	mov	r9, r0
 8008e82:	b168      	cbz	r0, 8008ea0 <_dtoa_r+0xc8>
 8008e84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e86:	2301      	movs	r3, #1
 8008e88:	6013      	str	r3, [r2, #0]
 8008e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 8524 	beq.w	80098da <_dtoa_r+0xb02>
 8008e92:	4b9a      	ldr	r3, [pc, #616]	; (80090fc <_dtoa_r+0x324>)
 8008e94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e96:	f103 3bff 	add.w	fp, r3, #4294967295
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	f000 bd28 	b.w	80098f0 <_dtoa_r+0xb18>
 8008ea0:	aa14      	add	r2, sp, #80	; 0x50
 8008ea2:	a915      	add	r1, sp, #84	; 0x54
 8008ea4:	ec47 6b10 	vmov	d0, r6, r7
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f001 fbed 	bl	800a688 <__d2b>
 8008eae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008eb2:	9004      	str	r0, [sp, #16]
 8008eb4:	2d00      	cmp	r5, #0
 8008eb6:	d07c      	beq.n	8008fb2 <_dtoa_r+0x1da>
 8008eb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ebc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008ec0:	46b2      	mov	sl, r6
 8008ec2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008ec6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008eca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008ece:	2200      	movs	r2, #0
 8008ed0:	4b8b      	ldr	r3, [pc, #556]	; (8009100 <_dtoa_r+0x328>)
 8008ed2:	4650      	mov	r0, sl
 8008ed4:	4659      	mov	r1, fp
 8008ed6:	f7f7 f9ff 	bl	80002d8 <__aeabi_dsub>
 8008eda:	a381      	add	r3, pc, #516	; (adr r3, 80090e0 <_dtoa_r+0x308>)
 8008edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee0:	f7f7 fbb2 	bl	8000648 <__aeabi_dmul>
 8008ee4:	a380      	add	r3, pc, #512	; (adr r3, 80090e8 <_dtoa_r+0x310>)
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	f7f7 f9f7 	bl	80002dc <__adddf3>
 8008eee:	4606      	mov	r6, r0
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	460f      	mov	r7, r1
 8008ef4:	f7f7 fb3e 	bl	8000574 <__aeabi_i2d>
 8008ef8:	a37d      	add	r3, pc, #500	; (adr r3, 80090f0 <_dtoa_r+0x318>)
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	f7f7 fba3 	bl	8000648 <__aeabi_dmul>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4630      	mov	r0, r6
 8008f08:	4639      	mov	r1, r7
 8008f0a:	f7f7 f9e7 	bl	80002dc <__adddf3>
 8008f0e:	4606      	mov	r6, r0
 8008f10:	460f      	mov	r7, r1
 8008f12:	f7f7 fe49 	bl	8000ba8 <__aeabi_d2iz>
 8008f16:	2200      	movs	r2, #0
 8008f18:	4682      	mov	sl, r0
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	4639      	mov	r1, r7
 8008f20:	f7f7 fe04 	bl	8000b2c <__aeabi_dcmplt>
 8008f24:	b148      	cbz	r0, 8008f3a <_dtoa_r+0x162>
 8008f26:	4650      	mov	r0, sl
 8008f28:	f7f7 fb24 	bl	8000574 <__aeabi_i2d>
 8008f2c:	4632      	mov	r2, r6
 8008f2e:	463b      	mov	r3, r7
 8008f30:	f7f7 fdf2 	bl	8000b18 <__aeabi_dcmpeq>
 8008f34:	b908      	cbnz	r0, 8008f3a <_dtoa_r+0x162>
 8008f36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f3a:	f1ba 0f16 	cmp.w	sl, #22
 8008f3e:	d859      	bhi.n	8008ff4 <_dtoa_r+0x21c>
 8008f40:	4970      	ldr	r1, [pc, #448]	; (8009104 <_dtoa_r+0x32c>)
 8008f42:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f4e:	f7f7 fe0b 	bl	8000b68 <__aeabi_dcmpgt>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d050      	beq.n	8008ff8 <_dtoa_r+0x220>
 8008f56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f60:	1b5d      	subs	r5, r3, r5
 8008f62:	f1b5 0801 	subs.w	r8, r5, #1
 8008f66:	bf49      	itett	mi
 8008f68:	f1c5 0301 	rsbmi	r3, r5, #1
 8008f6c:	2300      	movpl	r3, #0
 8008f6e:	9305      	strmi	r3, [sp, #20]
 8008f70:	f04f 0800 	movmi.w	r8, #0
 8008f74:	bf58      	it	pl
 8008f76:	9305      	strpl	r3, [sp, #20]
 8008f78:	f1ba 0f00 	cmp.w	sl, #0
 8008f7c:	db3e      	blt.n	8008ffc <_dtoa_r+0x224>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	44d0      	add	r8, sl
 8008f82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008f86:	9307      	str	r3, [sp, #28]
 8008f88:	9b06      	ldr	r3, [sp, #24]
 8008f8a:	2b09      	cmp	r3, #9
 8008f8c:	f200 8090 	bhi.w	80090b0 <_dtoa_r+0x2d8>
 8008f90:	2b05      	cmp	r3, #5
 8008f92:	bfc4      	itt	gt
 8008f94:	3b04      	subgt	r3, #4
 8008f96:	9306      	strgt	r3, [sp, #24]
 8008f98:	9b06      	ldr	r3, [sp, #24]
 8008f9a:	f1a3 0302 	sub.w	r3, r3, #2
 8008f9e:	bfcc      	ite	gt
 8008fa0:	2500      	movgt	r5, #0
 8008fa2:	2501      	movle	r5, #1
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	f200 808f 	bhi.w	80090c8 <_dtoa_r+0x2f0>
 8008faa:	e8df f003 	tbb	[pc, r3]
 8008fae:	7f7d      	.short	0x7f7d
 8008fb0:	7131      	.short	0x7131
 8008fb2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008fb6:	441d      	add	r5, r3
 8008fb8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008fbc:	2820      	cmp	r0, #32
 8008fbe:	dd13      	ble.n	8008fe8 <_dtoa_r+0x210>
 8008fc0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008fc4:	9b00      	ldr	r3, [sp, #0]
 8008fc6:	fa08 f800 	lsl.w	r8, r8, r0
 8008fca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008fce:	fa23 f000 	lsr.w	r0, r3, r0
 8008fd2:	ea48 0000 	orr.w	r0, r8, r0
 8008fd6:	f7f7 fabd 	bl	8000554 <__aeabi_ui2d>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4682      	mov	sl, r0
 8008fde:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008fe2:	3d01      	subs	r5, #1
 8008fe4:	9313      	str	r3, [sp, #76]	; 0x4c
 8008fe6:	e772      	b.n	8008ece <_dtoa_r+0xf6>
 8008fe8:	9b00      	ldr	r3, [sp, #0]
 8008fea:	f1c0 0020 	rsb	r0, r0, #32
 8008fee:	fa03 f000 	lsl.w	r0, r3, r0
 8008ff2:	e7f0      	b.n	8008fd6 <_dtoa_r+0x1fe>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e7b1      	b.n	8008f5c <_dtoa_r+0x184>
 8008ff8:	900f      	str	r0, [sp, #60]	; 0x3c
 8008ffa:	e7b0      	b.n	8008f5e <_dtoa_r+0x186>
 8008ffc:	9b05      	ldr	r3, [sp, #20]
 8008ffe:	eba3 030a 	sub.w	r3, r3, sl
 8009002:	9305      	str	r3, [sp, #20]
 8009004:	f1ca 0300 	rsb	r3, sl, #0
 8009008:	9307      	str	r3, [sp, #28]
 800900a:	2300      	movs	r3, #0
 800900c:	930e      	str	r3, [sp, #56]	; 0x38
 800900e:	e7bb      	b.n	8008f88 <_dtoa_r+0x1b0>
 8009010:	2301      	movs	r3, #1
 8009012:	930a      	str	r3, [sp, #40]	; 0x28
 8009014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009016:	2b00      	cmp	r3, #0
 8009018:	dd59      	ble.n	80090ce <_dtoa_r+0x2f6>
 800901a:	9302      	str	r3, [sp, #8]
 800901c:	4699      	mov	r9, r3
 800901e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009020:	2200      	movs	r2, #0
 8009022:	6072      	str	r2, [r6, #4]
 8009024:	2204      	movs	r2, #4
 8009026:	f102 0014 	add.w	r0, r2, #20
 800902a:	4298      	cmp	r0, r3
 800902c:	6871      	ldr	r1, [r6, #4]
 800902e:	d953      	bls.n	80090d8 <_dtoa_r+0x300>
 8009030:	4620      	mov	r0, r4
 8009032:	f000 ffe8 	bl	800a006 <_Balloc>
 8009036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009038:	6030      	str	r0, [r6, #0]
 800903a:	f1b9 0f0e 	cmp.w	r9, #14
 800903e:	f8d3 b000 	ldr.w	fp, [r3]
 8009042:	f200 80e6 	bhi.w	8009212 <_dtoa_r+0x43a>
 8009046:	2d00      	cmp	r5, #0
 8009048:	f000 80e3 	beq.w	8009212 <_dtoa_r+0x43a>
 800904c:	ed9d 7b00 	vldr	d7, [sp]
 8009050:	f1ba 0f00 	cmp.w	sl, #0
 8009054:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009058:	dd74      	ble.n	8009144 <_dtoa_r+0x36c>
 800905a:	4a2a      	ldr	r2, [pc, #168]	; (8009104 <_dtoa_r+0x32c>)
 800905c:	f00a 030f 	and.w	r3, sl, #15
 8009060:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009064:	ed93 7b00 	vldr	d7, [r3]
 8009068:	ea4f 162a 	mov.w	r6, sl, asr #4
 800906c:	06f0      	lsls	r0, r6, #27
 800906e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009072:	d565      	bpl.n	8009140 <_dtoa_r+0x368>
 8009074:	4b24      	ldr	r3, [pc, #144]	; (8009108 <_dtoa_r+0x330>)
 8009076:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800907a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800907e:	f7f7 fc0d 	bl	800089c <__aeabi_ddiv>
 8009082:	e9cd 0100 	strd	r0, r1, [sp]
 8009086:	f006 060f 	and.w	r6, r6, #15
 800908a:	2503      	movs	r5, #3
 800908c:	4f1e      	ldr	r7, [pc, #120]	; (8009108 <_dtoa_r+0x330>)
 800908e:	e04c      	b.n	800912a <_dtoa_r+0x352>
 8009090:	2301      	movs	r3, #1
 8009092:	930a      	str	r3, [sp, #40]	; 0x28
 8009094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009096:	4453      	add	r3, sl
 8009098:	f103 0901 	add.w	r9, r3, #1
 800909c:	9302      	str	r3, [sp, #8]
 800909e:	464b      	mov	r3, r9
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	bfb8      	it	lt
 80090a4:	2301      	movlt	r3, #1
 80090a6:	e7ba      	b.n	800901e <_dtoa_r+0x246>
 80090a8:	2300      	movs	r3, #0
 80090aa:	e7b2      	b.n	8009012 <_dtoa_r+0x23a>
 80090ac:	2300      	movs	r3, #0
 80090ae:	e7f0      	b.n	8009092 <_dtoa_r+0x2ba>
 80090b0:	2501      	movs	r5, #1
 80090b2:	2300      	movs	r3, #0
 80090b4:	9306      	str	r3, [sp, #24]
 80090b6:	950a      	str	r5, [sp, #40]	; 0x28
 80090b8:	f04f 33ff 	mov.w	r3, #4294967295
 80090bc:	9302      	str	r3, [sp, #8]
 80090be:	4699      	mov	r9, r3
 80090c0:	2200      	movs	r2, #0
 80090c2:	2312      	movs	r3, #18
 80090c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80090c6:	e7aa      	b.n	800901e <_dtoa_r+0x246>
 80090c8:	2301      	movs	r3, #1
 80090ca:	930a      	str	r3, [sp, #40]	; 0x28
 80090cc:	e7f4      	b.n	80090b8 <_dtoa_r+0x2e0>
 80090ce:	2301      	movs	r3, #1
 80090d0:	9302      	str	r3, [sp, #8]
 80090d2:	4699      	mov	r9, r3
 80090d4:	461a      	mov	r2, r3
 80090d6:	e7f5      	b.n	80090c4 <_dtoa_r+0x2ec>
 80090d8:	3101      	adds	r1, #1
 80090da:	6071      	str	r1, [r6, #4]
 80090dc:	0052      	lsls	r2, r2, #1
 80090de:	e7a2      	b.n	8009026 <_dtoa_r+0x24e>
 80090e0:	636f4361 	.word	0x636f4361
 80090e4:	3fd287a7 	.word	0x3fd287a7
 80090e8:	8b60c8b3 	.word	0x8b60c8b3
 80090ec:	3fc68a28 	.word	0x3fc68a28
 80090f0:	509f79fb 	.word	0x509f79fb
 80090f4:	3fd34413 	.word	0x3fd34413
 80090f8:	7ff00000 	.word	0x7ff00000
 80090fc:	0800ad69 	.word	0x0800ad69
 8009100:	3ff80000 	.word	0x3ff80000
 8009104:	0800ae28 	.word	0x0800ae28
 8009108:	0800ae00 	.word	0x0800ae00
 800910c:	0800adf1 	.word	0x0800adf1
 8009110:	07f1      	lsls	r1, r6, #31
 8009112:	d508      	bpl.n	8009126 <_dtoa_r+0x34e>
 8009114:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800911c:	f7f7 fa94 	bl	8000648 <__aeabi_dmul>
 8009120:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009124:	3501      	adds	r5, #1
 8009126:	1076      	asrs	r6, r6, #1
 8009128:	3708      	adds	r7, #8
 800912a:	2e00      	cmp	r6, #0
 800912c:	d1f0      	bne.n	8009110 <_dtoa_r+0x338>
 800912e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009132:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009136:	f7f7 fbb1 	bl	800089c <__aeabi_ddiv>
 800913a:	e9cd 0100 	strd	r0, r1, [sp]
 800913e:	e01a      	b.n	8009176 <_dtoa_r+0x39e>
 8009140:	2502      	movs	r5, #2
 8009142:	e7a3      	b.n	800908c <_dtoa_r+0x2b4>
 8009144:	f000 80a0 	beq.w	8009288 <_dtoa_r+0x4b0>
 8009148:	f1ca 0600 	rsb	r6, sl, #0
 800914c:	4b9f      	ldr	r3, [pc, #636]	; (80093cc <_dtoa_r+0x5f4>)
 800914e:	4fa0      	ldr	r7, [pc, #640]	; (80093d0 <_dtoa_r+0x5f8>)
 8009150:	f006 020f 	and.w	r2, r6, #15
 8009154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009160:	f7f7 fa72 	bl	8000648 <__aeabi_dmul>
 8009164:	e9cd 0100 	strd	r0, r1, [sp]
 8009168:	1136      	asrs	r6, r6, #4
 800916a:	2300      	movs	r3, #0
 800916c:	2502      	movs	r5, #2
 800916e:	2e00      	cmp	r6, #0
 8009170:	d17f      	bne.n	8009272 <_dtoa_r+0x49a>
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e1      	bne.n	800913a <_dtoa_r+0x362>
 8009176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009178:	2b00      	cmp	r3, #0
 800917a:	f000 8087 	beq.w	800928c <_dtoa_r+0x4b4>
 800917e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009182:	2200      	movs	r2, #0
 8009184:	4b93      	ldr	r3, [pc, #588]	; (80093d4 <_dtoa_r+0x5fc>)
 8009186:	4630      	mov	r0, r6
 8009188:	4639      	mov	r1, r7
 800918a:	f7f7 fccf 	bl	8000b2c <__aeabi_dcmplt>
 800918e:	2800      	cmp	r0, #0
 8009190:	d07c      	beq.n	800928c <_dtoa_r+0x4b4>
 8009192:	f1b9 0f00 	cmp.w	r9, #0
 8009196:	d079      	beq.n	800928c <_dtoa_r+0x4b4>
 8009198:	9b02      	ldr	r3, [sp, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	dd35      	ble.n	800920a <_dtoa_r+0x432>
 800919e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80091a2:	9308      	str	r3, [sp, #32]
 80091a4:	4639      	mov	r1, r7
 80091a6:	2200      	movs	r2, #0
 80091a8:	4b8b      	ldr	r3, [pc, #556]	; (80093d8 <_dtoa_r+0x600>)
 80091aa:	4630      	mov	r0, r6
 80091ac:	f7f7 fa4c 	bl	8000648 <__aeabi_dmul>
 80091b0:	e9cd 0100 	strd	r0, r1, [sp]
 80091b4:	9f02      	ldr	r7, [sp, #8]
 80091b6:	3501      	adds	r5, #1
 80091b8:	4628      	mov	r0, r5
 80091ba:	f7f7 f9db 	bl	8000574 <__aeabi_i2d>
 80091be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091c2:	f7f7 fa41 	bl	8000648 <__aeabi_dmul>
 80091c6:	2200      	movs	r2, #0
 80091c8:	4b84      	ldr	r3, [pc, #528]	; (80093dc <_dtoa_r+0x604>)
 80091ca:	f7f7 f887 	bl	80002dc <__adddf3>
 80091ce:	4605      	mov	r5, r0
 80091d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80091d4:	2f00      	cmp	r7, #0
 80091d6:	d15d      	bne.n	8009294 <_dtoa_r+0x4bc>
 80091d8:	2200      	movs	r2, #0
 80091da:	4b81      	ldr	r3, [pc, #516]	; (80093e0 <_dtoa_r+0x608>)
 80091dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091e0:	f7f7 f87a 	bl	80002d8 <__aeabi_dsub>
 80091e4:	462a      	mov	r2, r5
 80091e6:	4633      	mov	r3, r6
 80091e8:	e9cd 0100 	strd	r0, r1, [sp]
 80091ec:	f7f7 fcbc 	bl	8000b68 <__aeabi_dcmpgt>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	f040 8288 	bne.w	8009706 <_dtoa_r+0x92e>
 80091f6:	462a      	mov	r2, r5
 80091f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80091fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009200:	f7f7 fc94 	bl	8000b2c <__aeabi_dcmplt>
 8009204:	2800      	cmp	r0, #0
 8009206:	f040 827c 	bne.w	8009702 <_dtoa_r+0x92a>
 800920a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800920e:	e9cd 2300 	strd	r2, r3, [sp]
 8009212:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009214:	2b00      	cmp	r3, #0
 8009216:	f2c0 8150 	blt.w	80094ba <_dtoa_r+0x6e2>
 800921a:	f1ba 0f0e 	cmp.w	sl, #14
 800921e:	f300 814c 	bgt.w	80094ba <_dtoa_r+0x6e2>
 8009222:	4b6a      	ldr	r3, [pc, #424]	; (80093cc <_dtoa_r+0x5f4>)
 8009224:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009228:	ed93 7b00 	vldr	d7, [r3]
 800922c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800922e:	2b00      	cmp	r3, #0
 8009230:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009234:	f280 80d8 	bge.w	80093e8 <_dtoa_r+0x610>
 8009238:	f1b9 0f00 	cmp.w	r9, #0
 800923c:	f300 80d4 	bgt.w	80093e8 <_dtoa_r+0x610>
 8009240:	f040 825e 	bne.w	8009700 <_dtoa_r+0x928>
 8009244:	2200      	movs	r2, #0
 8009246:	4b66      	ldr	r3, [pc, #408]	; (80093e0 <_dtoa_r+0x608>)
 8009248:	ec51 0b17 	vmov	r0, r1, d7
 800924c:	f7f7 f9fc 	bl	8000648 <__aeabi_dmul>
 8009250:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009254:	f7f7 fc7e 	bl	8000b54 <__aeabi_dcmpge>
 8009258:	464f      	mov	r7, r9
 800925a:	464e      	mov	r6, r9
 800925c:	2800      	cmp	r0, #0
 800925e:	f040 8234 	bne.w	80096ca <_dtoa_r+0x8f2>
 8009262:	2331      	movs	r3, #49	; 0x31
 8009264:	f10b 0501 	add.w	r5, fp, #1
 8009268:	f88b 3000 	strb.w	r3, [fp]
 800926c:	f10a 0a01 	add.w	sl, sl, #1
 8009270:	e22f      	b.n	80096d2 <_dtoa_r+0x8fa>
 8009272:	07f2      	lsls	r2, r6, #31
 8009274:	d505      	bpl.n	8009282 <_dtoa_r+0x4aa>
 8009276:	e9d7 2300 	ldrd	r2, r3, [r7]
 800927a:	f7f7 f9e5 	bl	8000648 <__aeabi_dmul>
 800927e:	3501      	adds	r5, #1
 8009280:	2301      	movs	r3, #1
 8009282:	1076      	asrs	r6, r6, #1
 8009284:	3708      	adds	r7, #8
 8009286:	e772      	b.n	800916e <_dtoa_r+0x396>
 8009288:	2502      	movs	r5, #2
 800928a:	e774      	b.n	8009176 <_dtoa_r+0x39e>
 800928c:	f8cd a020 	str.w	sl, [sp, #32]
 8009290:	464f      	mov	r7, r9
 8009292:	e791      	b.n	80091b8 <_dtoa_r+0x3e0>
 8009294:	4b4d      	ldr	r3, [pc, #308]	; (80093cc <_dtoa_r+0x5f4>)
 8009296:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800929a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800929e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d047      	beq.n	8009334 <_dtoa_r+0x55c>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	2000      	movs	r0, #0
 80092aa:	494e      	ldr	r1, [pc, #312]	; (80093e4 <_dtoa_r+0x60c>)
 80092ac:	f7f7 faf6 	bl	800089c <__aeabi_ddiv>
 80092b0:	462a      	mov	r2, r5
 80092b2:	4633      	mov	r3, r6
 80092b4:	f7f7 f810 	bl	80002d8 <__aeabi_dsub>
 80092b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80092bc:	465d      	mov	r5, fp
 80092be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092c2:	f7f7 fc71 	bl	8000ba8 <__aeabi_d2iz>
 80092c6:	4606      	mov	r6, r0
 80092c8:	f7f7 f954 	bl	8000574 <__aeabi_i2d>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092d4:	f7f7 f800 	bl	80002d8 <__aeabi_dsub>
 80092d8:	3630      	adds	r6, #48	; 0x30
 80092da:	f805 6b01 	strb.w	r6, [r5], #1
 80092de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80092e2:	e9cd 0100 	strd	r0, r1, [sp]
 80092e6:	f7f7 fc21 	bl	8000b2c <__aeabi_dcmplt>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	d163      	bne.n	80093b6 <_dtoa_r+0x5de>
 80092ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092f2:	2000      	movs	r0, #0
 80092f4:	4937      	ldr	r1, [pc, #220]	; (80093d4 <_dtoa_r+0x5fc>)
 80092f6:	f7f6 ffef 	bl	80002d8 <__aeabi_dsub>
 80092fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80092fe:	f7f7 fc15 	bl	8000b2c <__aeabi_dcmplt>
 8009302:	2800      	cmp	r0, #0
 8009304:	f040 80b7 	bne.w	8009476 <_dtoa_r+0x69e>
 8009308:	eba5 030b 	sub.w	r3, r5, fp
 800930c:	429f      	cmp	r7, r3
 800930e:	f77f af7c 	ble.w	800920a <_dtoa_r+0x432>
 8009312:	2200      	movs	r2, #0
 8009314:	4b30      	ldr	r3, [pc, #192]	; (80093d8 <_dtoa_r+0x600>)
 8009316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800931a:	f7f7 f995 	bl	8000648 <__aeabi_dmul>
 800931e:	2200      	movs	r2, #0
 8009320:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009324:	4b2c      	ldr	r3, [pc, #176]	; (80093d8 <_dtoa_r+0x600>)
 8009326:	e9dd 0100 	ldrd	r0, r1, [sp]
 800932a:	f7f7 f98d 	bl	8000648 <__aeabi_dmul>
 800932e:	e9cd 0100 	strd	r0, r1, [sp]
 8009332:	e7c4      	b.n	80092be <_dtoa_r+0x4e6>
 8009334:	462a      	mov	r2, r5
 8009336:	4633      	mov	r3, r6
 8009338:	f7f7 f986 	bl	8000648 <__aeabi_dmul>
 800933c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009340:	eb0b 0507 	add.w	r5, fp, r7
 8009344:	465e      	mov	r6, fp
 8009346:	e9dd 0100 	ldrd	r0, r1, [sp]
 800934a:	f7f7 fc2d 	bl	8000ba8 <__aeabi_d2iz>
 800934e:	4607      	mov	r7, r0
 8009350:	f7f7 f910 	bl	8000574 <__aeabi_i2d>
 8009354:	3730      	adds	r7, #48	; 0x30
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800935e:	f7f6 ffbb 	bl	80002d8 <__aeabi_dsub>
 8009362:	f806 7b01 	strb.w	r7, [r6], #1
 8009366:	42ae      	cmp	r6, r5
 8009368:	e9cd 0100 	strd	r0, r1, [sp]
 800936c:	f04f 0200 	mov.w	r2, #0
 8009370:	d126      	bne.n	80093c0 <_dtoa_r+0x5e8>
 8009372:	4b1c      	ldr	r3, [pc, #112]	; (80093e4 <_dtoa_r+0x60c>)
 8009374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009378:	f7f6 ffb0 	bl	80002dc <__adddf3>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009384:	f7f7 fbf0 	bl	8000b68 <__aeabi_dcmpgt>
 8009388:	2800      	cmp	r0, #0
 800938a:	d174      	bne.n	8009476 <_dtoa_r+0x69e>
 800938c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009390:	2000      	movs	r0, #0
 8009392:	4914      	ldr	r1, [pc, #80]	; (80093e4 <_dtoa_r+0x60c>)
 8009394:	f7f6 ffa0 	bl	80002d8 <__aeabi_dsub>
 8009398:	4602      	mov	r2, r0
 800939a:	460b      	mov	r3, r1
 800939c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093a0:	f7f7 fbc4 	bl	8000b2c <__aeabi_dcmplt>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	f43f af30 	beq.w	800920a <_dtoa_r+0x432>
 80093aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093ae:	2b30      	cmp	r3, #48	; 0x30
 80093b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80093b4:	d002      	beq.n	80093bc <_dtoa_r+0x5e4>
 80093b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80093ba:	e04a      	b.n	8009452 <_dtoa_r+0x67a>
 80093bc:	4615      	mov	r5, r2
 80093be:	e7f4      	b.n	80093aa <_dtoa_r+0x5d2>
 80093c0:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <_dtoa_r+0x600>)
 80093c2:	f7f7 f941 	bl	8000648 <__aeabi_dmul>
 80093c6:	e9cd 0100 	strd	r0, r1, [sp]
 80093ca:	e7bc      	b.n	8009346 <_dtoa_r+0x56e>
 80093cc:	0800ae28 	.word	0x0800ae28
 80093d0:	0800ae00 	.word	0x0800ae00
 80093d4:	3ff00000 	.word	0x3ff00000
 80093d8:	40240000 	.word	0x40240000
 80093dc:	401c0000 	.word	0x401c0000
 80093e0:	40140000 	.word	0x40140000
 80093e4:	3fe00000 	.word	0x3fe00000
 80093e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80093ec:	465d      	mov	r5, fp
 80093ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093f2:	4630      	mov	r0, r6
 80093f4:	4639      	mov	r1, r7
 80093f6:	f7f7 fa51 	bl	800089c <__aeabi_ddiv>
 80093fa:	f7f7 fbd5 	bl	8000ba8 <__aeabi_d2iz>
 80093fe:	4680      	mov	r8, r0
 8009400:	f7f7 f8b8 	bl	8000574 <__aeabi_i2d>
 8009404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009408:	f7f7 f91e 	bl	8000648 <__aeabi_dmul>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4630      	mov	r0, r6
 8009412:	4639      	mov	r1, r7
 8009414:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009418:	f7f6 ff5e 	bl	80002d8 <__aeabi_dsub>
 800941c:	f805 6b01 	strb.w	r6, [r5], #1
 8009420:	eba5 060b 	sub.w	r6, r5, fp
 8009424:	45b1      	cmp	r9, r6
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	d139      	bne.n	80094a0 <_dtoa_r+0x6c8>
 800942c:	f7f6 ff56 	bl	80002dc <__adddf3>
 8009430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009434:	4606      	mov	r6, r0
 8009436:	460f      	mov	r7, r1
 8009438:	f7f7 fb96 	bl	8000b68 <__aeabi_dcmpgt>
 800943c:	b9c8      	cbnz	r0, 8009472 <_dtoa_r+0x69a>
 800943e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009442:	4630      	mov	r0, r6
 8009444:	4639      	mov	r1, r7
 8009446:	f7f7 fb67 	bl	8000b18 <__aeabi_dcmpeq>
 800944a:	b110      	cbz	r0, 8009452 <_dtoa_r+0x67a>
 800944c:	f018 0f01 	tst.w	r8, #1
 8009450:	d10f      	bne.n	8009472 <_dtoa_r+0x69a>
 8009452:	9904      	ldr	r1, [sp, #16]
 8009454:	4620      	mov	r0, r4
 8009456:	f000 fe0a 	bl	800a06e <_Bfree>
 800945a:	2300      	movs	r3, #0
 800945c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800945e:	702b      	strb	r3, [r5, #0]
 8009460:	f10a 0301 	add.w	r3, sl, #1
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 8241 	beq.w	80098f0 <_dtoa_r+0xb18>
 800946e:	601d      	str	r5, [r3, #0]
 8009470:	e23e      	b.n	80098f0 <_dtoa_r+0xb18>
 8009472:	f8cd a020 	str.w	sl, [sp, #32]
 8009476:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800947a:	2a39      	cmp	r2, #57	; 0x39
 800947c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009480:	d108      	bne.n	8009494 <_dtoa_r+0x6bc>
 8009482:	459b      	cmp	fp, r3
 8009484:	d10a      	bne.n	800949c <_dtoa_r+0x6c4>
 8009486:	9b08      	ldr	r3, [sp, #32]
 8009488:	3301      	adds	r3, #1
 800948a:	9308      	str	r3, [sp, #32]
 800948c:	2330      	movs	r3, #48	; 0x30
 800948e:	f88b 3000 	strb.w	r3, [fp]
 8009492:	465b      	mov	r3, fp
 8009494:	781a      	ldrb	r2, [r3, #0]
 8009496:	3201      	adds	r2, #1
 8009498:	701a      	strb	r2, [r3, #0]
 800949a:	e78c      	b.n	80093b6 <_dtoa_r+0x5de>
 800949c:	461d      	mov	r5, r3
 800949e:	e7ea      	b.n	8009476 <_dtoa_r+0x69e>
 80094a0:	2200      	movs	r2, #0
 80094a2:	4b9b      	ldr	r3, [pc, #620]	; (8009710 <_dtoa_r+0x938>)
 80094a4:	f7f7 f8d0 	bl	8000648 <__aeabi_dmul>
 80094a8:	2200      	movs	r2, #0
 80094aa:	2300      	movs	r3, #0
 80094ac:	4606      	mov	r6, r0
 80094ae:	460f      	mov	r7, r1
 80094b0:	f7f7 fb32 	bl	8000b18 <__aeabi_dcmpeq>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d09a      	beq.n	80093ee <_dtoa_r+0x616>
 80094b8:	e7cb      	b.n	8009452 <_dtoa_r+0x67a>
 80094ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094bc:	2a00      	cmp	r2, #0
 80094be:	f000 808b 	beq.w	80095d8 <_dtoa_r+0x800>
 80094c2:	9a06      	ldr	r2, [sp, #24]
 80094c4:	2a01      	cmp	r2, #1
 80094c6:	dc6e      	bgt.n	80095a6 <_dtoa_r+0x7ce>
 80094c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80094ca:	2a00      	cmp	r2, #0
 80094cc:	d067      	beq.n	800959e <_dtoa_r+0x7c6>
 80094ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80094d2:	9f07      	ldr	r7, [sp, #28]
 80094d4:	9d05      	ldr	r5, [sp, #20]
 80094d6:	9a05      	ldr	r2, [sp, #20]
 80094d8:	2101      	movs	r1, #1
 80094da:	441a      	add	r2, r3
 80094dc:	4620      	mov	r0, r4
 80094de:	9205      	str	r2, [sp, #20]
 80094e0:	4498      	add	r8, r3
 80094e2:	f000 fea2 	bl	800a22a <__i2b>
 80094e6:	4606      	mov	r6, r0
 80094e8:	2d00      	cmp	r5, #0
 80094ea:	dd0c      	ble.n	8009506 <_dtoa_r+0x72e>
 80094ec:	f1b8 0f00 	cmp.w	r8, #0
 80094f0:	dd09      	ble.n	8009506 <_dtoa_r+0x72e>
 80094f2:	4545      	cmp	r5, r8
 80094f4:	9a05      	ldr	r2, [sp, #20]
 80094f6:	462b      	mov	r3, r5
 80094f8:	bfa8      	it	ge
 80094fa:	4643      	movge	r3, r8
 80094fc:	1ad2      	subs	r2, r2, r3
 80094fe:	9205      	str	r2, [sp, #20]
 8009500:	1aed      	subs	r5, r5, r3
 8009502:	eba8 0803 	sub.w	r8, r8, r3
 8009506:	9b07      	ldr	r3, [sp, #28]
 8009508:	b1eb      	cbz	r3, 8009546 <_dtoa_r+0x76e>
 800950a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800950c:	2b00      	cmp	r3, #0
 800950e:	d067      	beq.n	80095e0 <_dtoa_r+0x808>
 8009510:	b18f      	cbz	r7, 8009536 <_dtoa_r+0x75e>
 8009512:	4631      	mov	r1, r6
 8009514:	463a      	mov	r2, r7
 8009516:	4620      	mov	r0, r4
 8009518:	f000 ff26 	bl	800a368 <__pow5mult>
 800951c:	9a04      	ldr	r2, [sp, #16]
 800951e:	4601      	mov	r1, r0
 8009520:	4606      	mov	r6, r0
 8009522:	4620      	mov	r0, r4
 8009524:	f000 fe8a 	bl	800a23c <__multiply>
 8009528:	9904      	ldr	r1, [sp, #16]
 800952a:	9008      	str	r0, [sp, #32]
 800952c:	4620      	mov	r0, r4
 800952e:	f000 fd9e 	bl	800a06e <_Bfree>
 8009532:	9b08      	ldr	r3, [sp, #32]
 8009534:	9304      	str	r3, [sp, #16]
 8009536:	9b07      	ldr	r3, [sp, #28]
 8009538:	1bda      	subs	r2, r3, r7
 800953a:	d004      	beq.n	8009546 <_dtoa_r+0x76e>
 800953c:	9904      	ldr	r1, [sp, #16]
 800953e:	4620      	mov	r0, r4
 8009540:	f000 ff12 	bl	800a368 <__pow5mult>
 8009544:	9004      	str	r0, [sp, #16]
 8009546:	2101      	movs	r1, #1
 8009548:	4620      	mov	r0, r4
 800954a:	f000 fe6e 	bl	800a22a <__i2b>
 800954e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009550:	4607      	mov	r7, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	f000 81d0 	beq.w	80098f8 <_dtoa_r+0xb20>
 8009558:	461a      	mov	r2, r3
 800955a:	4601      	mov	r1, r0
 800955c:	4620      	mov	r0, r4
 800955e:	f000 ff03 	bl	800a368 <__pow5mult>
 8009562:	9b06      	ldr	r3, [sp, #24]
 8009564:	2b01      	cmp	r3, #1
 8009566:	4607      	mov	r7, r0
 8009568:	dc40      	bgt.n	80095ec <_dtoa_r+0x814>
 800956a:	9b00      	ldr	r3, [sp, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d139      	bne.n	80095e4 <_dtoa_r+0x80c>
 8009570:	9b01      	ldr	r3, [sp, #4]
 8009572:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009576:	2b00      	cmp	r3, #0
 8009578:	d136      	bne.n	80095e8 <_dtoa_r+0x810>
 800957a:	9b01      	ldr	r3, [sp, #4]
 800957c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009580:	0d1b      	lsrs	r3, r3, #20
 8009582:	051b      	lsls	r3, r3, #20
 8009584:	b12b      	cbz	r3, 8009592 <_dtoa_r+0x7ba>
 8009586:	9b05      	ldr	r3, [sp, #20]
 8009588:	3301      	adds	r3, #1
 800958a:	9305      	str	r3, [sp, #20]
 800958c:	f108 0801 	add.w	r8, r8, #1
 8009590:	2301      	movs	r3, #1
 8009592:	9307      	str	r3, [sp, #28]
 8009594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009596:	2b00      	cmp	r3, #0
 8009598:	d12a      	bne.n	80095f0 <_dtoa_r+0x818>
 800959a:	2001      	movs	r0, #1
 800959c:	e030      	b.n	8009600 <_dtoa_r+0x828>
 800959e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095a4:	e795      	b.n	80094d2 <_dtoa_r+0x6fa>
 80095a6:	9b07      	ldr	r3, [sp, #28]
 80095a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80095ac:	42bb      	cmp	r3, r7
 80095ae:	bfbf      	itttt	lt
 80095b0:	9b07      	ldrlt	r3, [sp, #28]
 80095b2:	9707      	strlt	r7, [sp, #28]
 80095b4:	1afa      	sublt	r2, r7, r3
 80095b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80095b8:	bfbb      	ittet	lt
 80095ba:	189b      	addlt	r3, r3, r2
 80095bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80095be:	1bdf      	subge	r7, r3, r7
 80095c0:	2700      	movlt	r7, #0
 80095c2:	f1b9 0f00 	cmp.w	r9, #0
 80095c6:	bfb5      	itete	lt
 80095c8:	9b05      	ldrlt	r3, [sp, #20]
 80095ca:	9d05      	ldrge	r5, [sp, #20]
 80095cc:	eba3 0509 	sublt.w	r5, r3, r9
 80095d0:	464b      	movge	r3, r9
 80095d2:	bfb8      	it	lt
 80095d4:	2300      	movlt	r3, #0
 80095d6:	e77e      	b.n	80094d6 <_dtoa_r+0x6fe>
 80095d8:	9f07      	ldr	r7, [sp, #28]
 80095da:	9d05      	ldr	r5, [sp, #20]
 80095dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80095de:	e783      	b.n	80094e8 <_dtoa_r+0x710>
 80095e0:	9a07      	ldr	r2, [sp, #28]
 80095e2:	e7ab      	b.n	800953c <_dtoa_r+0x764>
 80095e4:	2300      	movs	r3, #0
 80095e6:	e7d4      	b.n	8009592 <_dtoa_r+0x7ba>
 80095e8:	9b00      	ldr	r3, [sp, #0]
 80095ea:	e7d2      	b.n	8009592 <_dtoa_r+0x7ba>
 80095ec:	2300      	movs	r3, #0
 80095ee:	9307      	str	r3, [sp, #28]
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80095f6:	6918      	ldr	r0, [r3, #16]
 80095f8:	f000 fdc9 	bl	800a18e <__hi0bits>
 80095fc:	f1c0 0020 	rsb	r0, r0, #32
 8009600:	4440      	add	r0, r8
 8009602:	f010 001f 	ands.w	r0, r0, #31
 8009606:	d047      	beq.n	8009698 <_dtoa_r+0x8c0>
 8009608:	f1c0 0320 	rsb	r3, r0, #32
 800960c:	2b04      	cmp	r3, #4
 800960e:	dd3b      	ble.n	8009688 <_dtoa_r+0x8b0>
 8009610:	9b05      	ldr	r3, [sp, #20]
 8009612:	f1c0 001c 	rsb	r0, r0, #28
 8009616:	4403      	add	r3, r0
 8009618:	9305      	str	r3, [sp, #20]
 800961a:	4405      	add	r5, r0
 800961c:	4480      	add	r8, r0
 800961e:	9b05      	ldr	r3, [sp, #20]
 8009620:	2b00      	cmp	r3, #0
 8009622:	dd05      	ble.n	8009630 <_dtoa_r+0x858>
 8009624:	461a      	mov	r2, r3
 8009626:	9904      	ldr	r1, [sp, #16]
 8009628:	4620      	mov	r0, r4
 800962a:	f000 feeb 	bl	800a404 <__lshift>
 800962e:	9004      	str	r0, [sp, #16]
 8009630:	f1b8 0f00 	cmp.w	r8, #0
 8009634:	dd05      	ble.n	8009642 <_dtoa_r+0x86a>
 8009636:	4639      	mov	r1, r7
 8009638:	4642      	mov	r2, r8
 800963a:	4620      	mov	r0, r4
 800963c:	f000 fee2 	bl	800a404 <__lshift>
 8009640:	4607      	mov	r7, r0
 8009642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009644:	b353      	cbz	r3, 800969c <_dtoa_r+0x8c4>
 8009646:	4639      	mov	r1, r7
 8009648:	9804      	ldr	r0, [sp, #16]
 800964a:	f000 ff2f 	bl	800a4ac <__mcmp>
 800964e:	2800      	cmp	r0, #0
 8009650:	da24      	bge.n	800969c <_dtoa_r+0x8c4>
 8009652:	2300      	movs	r3, #0
 8009654:	220a      	movs	r2, #10
 8009656:	9904      	ldr	r1, [sp, #16]
 8009658:	4620      	mov	r0, r4
 800965a:	f000 fd1f 	bl	800a09c <__multadd>
 800965e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009660:	9004      	str	r0, [sp, #16]
 8009662:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 814d 	beq.w	8009906 <_dtoa_r+0xb2e>
 800966c:	2300      	movs	r3, #0
 800966e:	4631      	mov	r1, r6
 8009670:	220a      	movs	r2, #10
 8009672:	4620      	mov	r0, r4
 8009674:	f000 fd12 	bl	800a09c <__multadd>
 8009678:	9b02      	ldr	r3, [sp, #8]
 800967a:	2b00      	cmp	r3, #0
 800967c:	4606      	mov	r6, r0
 800967e:	dc4f      	bgt.n	8009720 <_dtoa_r+0x948>
 8009680:	9b06      	ldr	r3, [sp, #24]
 8009682:	2b02      	cmp	r3, #2
 8009684:	dd4c      	ble.n	8009720 <_dtoa_r+0x948>
 8009686:	e011      	b.n	80096ac <_dtoa_r+0x8d4>
 8009688:	d0c9      	beq.n	800961e <_dtoa_r+0x846>
 800968a:	9a05      	ldr	r2, [sp, #20]
 800968c:	331c      	adds	r3, #28
 800968e:	441a      	add	r2, r3
 8009690:	9205      	str	r2, [sp, #20]
 8009692:	441d      	add	r5, r3
 8009694:	4498      	add	r8, r3
 8009696:	e7c2      	b.n	800961e <_dtoa_r+0x846>
 8009698:	4603      	mov	r3, r0
 800969a:	e7f6      	b.n	800968a <_dtoa_r+0x8b2>
 800969c:	f1b9 0f00 	cmp.w	r9, #0
 80096a0:	dc38      	bgt.n	8009714 <_dtoa_r+0x93c>
 80096a2:	9b06      	ldr	r3, [sp, #24]
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	dd35      	ble.n	8009714 <_dtoa_r+0x93c>
 80096a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80096ac:	9b02      	ldr	r3, [sp, #8]
 80096ae:	b963      	cbnz	r3, 80096ca <_dtoa_r+0x8f2>
 80096b0:	4639      	mov	r1, r7
 80096b2:	2205      	movs	r2, #5
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 fcf1 	bl	800a09c <__multadd>
 80096ba:	4601      	mov	r1, r0
 80096bc:	4607      	mov	r7, r0
 80096be:	9804      	ldr	r0, [sp, #16]
 80096c0:	f000 fef4 	bl	800a4ac <__mcmp>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	f73f adcc 	bgt.w	8009262 <_dtoa_r+0x48a>
 80096ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096cc:	465d      	mov	r5, fp
 80096ce:	ea6f 0a03 	mvn.w	sl, r3
 80096d2:	f04f 0900 	mov.w	r9, #0
 80096d6:	4639      	mov	r1, r7
 80096d8:	4620      	mov	r0, r4
 80096da:	f000 fcc8 	bl	800a06e <_Bfree>
 80096de:	2e00      	cmp	r6, #0
 80096e0:	f43f aeb7 	beq.w	8009452 <_dtoa_r+0x67a>
 80096e4:	f1b9 0f00 	cmp.w	r9, #0
 80096e8:	d005      	beq.n	80096f6 <_dtoa_r+0x91e>
 80096ea:	45b1      	cmp	r9, r6
 80096ec:	d003      	beq.n	80096f6 <_dtoa_r+0x91e>
 80096ee:	4649      	mov	r1, r9
 80096f0:	4620      	mov	r0, r4
 80096f2:	f000 fcbc 	bl	800a06e <_Bfree>
 80096f6:	4631      	mov	r1, r6
 80096f8:	4620      	mov	r0, r4
 80096fa:	f000 fcb8 	bl	800a06e <_Bfree>
 80096fe:	e6a8      	b.n	8009452 <_dtoa_r+0x67a>
 8009700:	2700      	movs	r7, #0
 8009702:	463e      	mov	r6, r7
 8009704:	e7e1      	b.n	80096ca <_dtoa_r+0x8f2>
 8009706:	f8dd a020 	ldr.w	sl, [sp, #32]
 800970a:	463e      	mov	r6, r7
 800970c:	e5a9      	b.n	8009262 <_dtoa_r+0x48a>
 800970e:	bf00      	nop
 8009710:	40240000 	.word	0x40240000
 8009714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009716:	f8cd 9008 	str.w	r9, [sp, #8]
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 80fa 	beq.w	8009914 <_dtoa_r+0xb3c>
 8009720:	2d00      	cmp	r5, #0
 8009722:	dd05      	ble.n	8009730 <_dtoa_r+0x958>
 8009724:	4631      	mov	r1, r6
 8009726:	462a      	mov	r2, r5
 8009728:	4620      	mov	r0, r4
 800972a:	f000 fe6b 	bl	800a404 <__lshift>
 800972e:	4606      	mov	r6, r0
 8009730:	9b07      	ldr	r3, [sp, #28]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d04c      	beq.n	80097d0 <_dtoa_r+0x9f8>
 8009736:	6871      	ldr	r1, [r6, #4]
 8009738:	4620      	mov	r0, r4
 800973a:	f000 fc64 	bl	800a006 <_Balloc>
 800973e:	6932      	ldr	r2, [r6, #16]
 8009740:	3202      	adds	r2, #2
 8009742:	4605      	mov	r5, r0
 8009744:	0092      	lsls	r2, r2, #2
 8009746:	f106 010c 	add.w	r1, r6, #12
 800974a:	300c      	adds	r0, #12
 800974c:	f000 fc50 	bl	8009ff0 <memcpy>
 8009750:	2201      	movs	r2, #1
 8009752:	4629      	mov	r1, r5
 8009754:	4620      	mov	r0, r4
 8009756:	f000 fe55 	bl	800a404 <__lshift>
 800975a:	9b00      	ldr	r3, [sp, #0]
 800975c:	f8cd b014 	str.w	fp, [sp, #20]
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	46b1      	mov	r9, r6
 8009766:	9307      	str	r3, [sp, #28]
 8009768:	4606      	mov	r6, r0
 800976a:	4639      	mov	r1, r7
 800976c:	9804      	ldr	r0, [sp, #16]
 800976e:	f7ff faa5 	bl	8008cbc <quorem>
 8009772:	4649      	mov	r1, r9
 8009774:	4605      	mov	r5, r0
 8009776:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800977a:	9804      	ldr	r0, [sp, #16]
 800977c:	f000 fe96 	bl	800a4ac <__mcmp>
 8009780:	4632      	mov	r2, r6
 8009782:	9000      	str	r0, [sp, #0]
 8009784:	4639      	mov	r1, r7
 8009786:	4620      	mov	r0, r4
 8009788:	f000 feaa 	bl	800a4e0 <__mdiff>
 800978c:	68c3      	ldr	r3, [r0, #12]
 800978e:	4602      	mov	r2, r0
 8009790:	bb03      	cbnz	r3, 80097d4 <_dtoa_r+0x9fc>
 8009792:	4601      	mov	r1, r0
 8009794:	9008      	str	r0, [sp, #32]
 8009796:	9804      	ldr	r0, [sp, #16]
 8009798:	f000 fe88 	bl	800a4ac <__mcmp>
 800979c:	9a08      	ldr	r2, [sp, #32]
 800979e:	4603      	mov	r3, r0
 80097a0:	4611      	mov	r1, r2
 80097a2:	4620      	mov	r0, r4
 80097a4:	9308      	str	r3, [sp, #32]
 80097a6:	f000 fc62 	bl	800a06e <_Bfree>
 80097aa:	9b08      	ldr	r3, [sp, #32]
 80097ac:	b9a3      	cbnz	r3, 80097d8 <_dtoa_r+0xa00>
 80097ae:	9a06      	ldr	r2, [sp, #24]
 80097b0:	b992      	cbnz	r2, 80097d8 <_dtoa_r+0xa00>
 80097b2:	9a07      	ldr	r2, [sp, #28]
 80097b4:	b982      	cbnz	r2, 80097d8 <_dtoa_r+0xa00>
 80097b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80097ba:	d029      	beq.n	8009810 <_dtoa_r+0xa38>
 80097bc:	9b00      	ldr	r3, [sp, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	dd01      	ble.n	80097c6 <_dtoa_r+0x9ee>
 80097c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80097c6:	9b05      	ldr	r3, [sp, #20]
 80097c8:	1c5d      	adds	r5, r3, #1
 80097ca:	f883 8000 	strb.w	r8, [r3]
 80097ce:	e782      	b.n	80096d6 <_dtoa_r+0x8fe>
 80097d0:	4630      	mov	r0, r6
 80097d2:	e7c2      	b.n	800975a <_dtoa_r+0x982>
 80097d4:	2301      	movs	r3, #1
 80097d6:	e7e3      	b.n	80097a0 <_dtoa_r+0x9c8>
 80097d8:	9a00      	ldr	r2, [sp, #0]
 80097da:	2a00      	cmp	r2, #0
 80097dc:	db04      	blt.n	80097e8 <_dtoa_r+0xa10>
 80097de:	d125      	bne.n	800982c <_dtoa_r+0xa54>
 80097e0:	9a06      	ldr	r2, [sp, #24]
 80097e2:	bb1a      	cbnz	r2, 800982c <_dtoa_r+0xa54>
 80097e4:	9a07      	ldr	r2, [sp, #28]
 80097e6:	bb0a      	cbnz	r2, 800982c <_dtoa_r+0xa54>
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	ddec      	ble.n	80097c6 <_dtoa_r+0x9ee>
 80097ec:	2201      	movs	r2, #1
 80097ee:	9904      	ldr	r1, [sp, #16]
 80097f0:	4620      	mov	r0, r4
 80097f2:	f000 fe07 	bl	800a404 <__lshift>
 80097f6:	4639      	mov	r1, r7
 80097f8:	9004      	str	r0, [sp, #16]
 80097fa:	f000 fe57 	bl	800a4ac <__mcmp>
 80097fe:	2800      	cmp	r0, #0
 8009800:	dc03      	bgt.n	800980a <_dtoa_r+0xa32>
 8009802:	d1e0      	bne.n	80097c6 <_dtoa_r+0x9ee>
 8009804:	f018 0f01 	tst.w	r8, #1
 8009808:	d0dd      	beq.n	80097c6 <_dtoa_r+0x9ee>
 800980a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800980e:	d1d8      	bne.n	80097c2 <_dtoa_r+0x9ea>
 8009810:	9b05      	ldr	r3, [sp, #20]
 8009812:	9a05      	ldr	r2, [sp, #20]
 8009814:	1c5d      	adds	r5, r3, #1
 8009816:	2339      	movs	r3, #57	; 0x39
 8009818:	7013      	strb	r3, [r2, #0]
 800981a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800981e:	2b39      	cmp	r3, #57	; 0x39
 8009820:	f105 32ff 	add.w	r2, r5, #4294967295
 8009824:	d04f      	beq.n	80098c6 <_dtoa_r+0xaee>
 8009826:	3301      	adds	r3, #1
 8009828:	7013      	strb	r3, [r2, #0]
 800982a:	e754      	b.n	80096d6 <_dtoa_r+0x8fe>
 800982c:	9a05      	ldr	r2, [sp, #20]
 800982e:	2b00      	cmp	r3, #0
 8009830:	f102 0501 	add.w	r5, r2, #1
 8009834:	dd06      	ble.n	8009844 <_dtoa_r+0xa6c>
 8009836:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800983a:	d0e9      	beq.n	8009810 <_dtoa_r+0xa38>
 800983c:	f108 0801 	add.w	r8, r8, #1
 8009840:	9b05      	ldr	r3, [sp, #20]
 8009842:	e7c2      	b.n	80097ca <_dtoa_r+0x9f2>
 8009844:	9a02      	ldr	r2, [sp, #8]
 8009846:	f805 8c01 	strb.w	r8, [r5, #-1]
 800984a:	eba5 030b 	sub.w	r3, r5, fp
 800984e:	4293      	cmp	r3, r2
 8009850:	d021      	beq.n	8009896 <_dtoa_r+0xabe>
 8009852:	2300      	movs	r3, #0
 8009854:	220a      	movs	r2, #10
 8009856:	9904      	ldr	r1, [sp, #16]
 8009858:	4620      	mov	r0, r4
 800985a:	f000 fc1f 	bl	800a09c <__multadd>
 800985e:	45b1      	cmp	r9, r6
 8009860:	9004      	str	r0, [sp, #16]
 8009862:	f04f 0300 	mov.w	r3, #0
 8009866:	f04f 020a 	mov.w	r2, #10
 800986a:	4649      	mov	r1, r9
 800986c:	4620      	mov	r0, r4
 800986e:	d105      	bne.n	800987c <_dtoa_r+0xaa4>
 8009870:	f000 fc14 	bl	800a09c <__multadd>
 8009874:	4681      	mov	r9, r0
 8009876:	4606      	mov	r6, r0
 8009878:	9505      	str	r5, [sp, #20]
 800987a:	e776      	b.n	800976a <_dtoa_r+0x992>
 800987c:	f000 fc0e 	bl	800a09c <__multadd>
 8009880:	4631      	mov	r1, r6
 8009882:	4681      	mov	r9, r0
 8009884:	2300      	movs	r3, #0
 8009886:	220a      	movs	r2, #10
 8009888:	4620      	mov	r0, r4
 800988a:	f000 fc07 	bl	800a09c <__multadd>
 800988e:	4606      	mov	r6, r0
 8009890:	e7f2      	b.n	8009878 <_dtoa_r+0xaa0>
 8009892:	f04f 0900 	mov.w	r9, #0
 8009896:	2201      	movs	r2, #1
 8009898:	9904      	ldr	r1, [sp, #16]
 800989a:	4620      	mov	r0, r4
 800989c:	f000 fdb2 	bl	800a404 <__lshift>
 80098a0:	4639      	mov	r1, r7
 80098a2:	9004      	str	r0, [sp, #16]
 80098a4:	f000 fe02 	bl	800a4ac <__mcmp>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	dcb6      	bgt.n	800981a <_dtoa_r+0xa42>
 80098ac:	d102      	bne.n	80098b4 <_dtoa_r+0xadc>
 80098ae:	f018 0f01 	tst.w	r8, #1
 80098b2:	d1b2      	bne.n	800981a <_dtoa_r+0xa42>
 80098b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80098b8:	2b30      	cmp	r3, #48	; 0x30
 80098ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80098be:	f47f af0a 	bne.w	80096d6 <_dtoa_r+0x8fe>
 80098c2:	4615      	mov	r5, r2
 80098c4:	e7f6      	b.n	80098b4 <_dtoa_r+0xadc>
 80098c6:	4593      	cmp	fp, r2
 80098c8:	d105      	bne.n	80098d6 <_dtoa_r+0xafe>
 80098ca:	2331      	movs	r3, #49	; 0x31
 80098cc:	f10a 0a01 	add.w	sl, sl, #1
 80098d0:	f88b 3000 	strb.w	r3, [fp]
 80098d4:	e6ff      	b.n	80096d6 <_dtoa_r+0x8fe>
 80098d6:	4615      	mov	r5, r2
 80098d8:	e79f      	b.n	800981a <_dtoa_r+0xa42>
 80098da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009940 <_dtoa_r+0xb68>
 80098de:	e007      	b.n	80098f0 <_dtoa_r+0xb18>
 80098e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009944 <_dtoa_r+0xb6c>
 80098e6:	b11b      	cbz	r3, 80098f0 <_dtoa_r+0xb18>
 80098e8:	f10b 0308 	add.w	r3, fp, #8
 80098ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	4658      	mov	r0, fp
 80098f2:	b017      	add	sp, #92	; 0x5c
 80098f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f8:	9b06      	ldr	r3, [sp, #24]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	f77f ae35 	ble.w	800956a <_dtoa_r+0x792>
 8009900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009902:	9307      	str	r3, [sp, #28]
 8009904:	e649      	b.n	800959a <_dtoa_r+0x7c2>
 8009906:	9b02      	ldr	r3, [sp, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	dc03      	bgt.n	8009914 <_dtoa_r+0xb3c>
 800990c:	9b06      	ldr	r3, [sp, #24]
 800990e:	2b02      	cmp	r3, #2
 8009910:	f73f aecc 	bgt.w	80096ac <_dtoa_r+0x8d4>
 8009914:	465d      	mov	r5, fp
 8009916:	4639      	mov	r1, r7
 8009918:	9804      	ldr	r0, [sp, #16]
 800991a:	f7ff f9cf 	bl	8008cbc <quorem>
 800991e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009922:	f805 8b01 	strb.w	r8, [r5], #1
 8009926:	9a02      	ldr	r2, [sp, #8]
 8009928:	eba5 030b 	sub.w	r3, r5, fp
 800992c:	429a      	cmp	r2, r3
 800992e:	ddb0      	ble.n	8009892 <_dtoa_r+0xaba>
 8009930:	2300      	movs	r3, #0
 8009932:	220a      	movs	r2, #10
 8009934:	9904      	ldr	r1, [sp, #16]
 8009936:	4620      	mov	r0, r4
 8009938:	f000 fbb0 	bl	800a09c <__multadd>
 800993c:	9004      	str	r0, [sp, #16]
 800993e:	e7ea      	b.n	8009916 <_dtoa_r+0xb3e>
 8009940:	0800ad68 	.word	0x0800ad68
 8009944:	0800ade8 	.word	0x0800ade8

08009948 <rshift>:
 8009948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800994a:	6906      	ldr	r6, [r0, #16]
 800994c:	114b      	asrs	r3, r1, #5
 800994e:	429e      	cmp	r6, r3
 8009950:	f100 0414 	add.w	r4, r0, #20
 8009954:	dd30      	ble.n	80099b8 <rshift+0x70>
 8009956:	f011 011f 	ands.w	r1, r1, #31
 800995a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800995e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009962:	d108      	bne.n	8009976 <rshift+0x2e>
 8009964:	4621      	mov	r1, r4
 8009966:	42b2      	cmp	r2, r6
 8009968:	460b      	mov	r3, r1
 800996a:	d211      	bcs.n	8009990 <rshift+0x48>
 800996c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009970:	f841 3b04 	str.w	r3, [r1], #4
 8009974:	e7f7      	b.n	8009966 <rshift+0x1e>
 8009976:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800997a:	f1c1 0c20 	rsb	ip, r1, #32
 800997e:	40cd      	lsrs	r5, r1
 8009980:	3204      	adds	r2, #4
 8009982:	4623      	mov	r3, r4
 8009984:	42b2      	cmp	r2, r6
 8009986:	4617      	mov	r7, r2
 8009988:	d30c      	bcc.n	80099a4 <rshift+0x5c>
 800998a:	601d      	str	r5, [r3, #0]
 800998c:	b105      	cbz	r5, 8009990 <rshift+0x48>
 800998e:	3304      	adds	r3, #4
 8009990:	1b1a      	subs	r2, r3, r4
 8009992:	42a3      	cmp	r3, r4
 8009994:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009998:	bf08      	it	eq
 800999a:	2300      	moveq	r3, #0
 800999c:	6102      	str	r2, [r0, #16]
 800999e:	bf08      	it	eq
 80099a0:	6143      	streq	r3, [r0, #20]
 80099a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099a4:	683f      	ldr	r7, [r7, #0]
 80099a6:	fa07 f70c 	lsl.w	r7, r7, ip
 80099aa:	433d      	orrs	r5, r7
 80099ac:	f843 5b04 	str.w	r5, [r3], #4
 80099b0:	f852 5b04 	ldr.w	r5, [r2], #4
 80099b4:	40cd      	lsrs	r5, r1
 80099b6:	e7e5      	b.n	8009984 <rshift+0x3c>
 80099b8:	4623      	mov	r3, r4
 80099ba:	e7e9      	b.n	8009990 <rshift+0x48>

080099bc <__hexdig_fun>:
 80099bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80099c0:	2b09      	cmp	r3, #9
 80099c2:	d802      	bhi.n	80099ca <__hexdig_fun+0xe>
 80099c4:	3820      	subs	r0, #32
 80099c6:	b2c0      	uxtb	r0, r0
 80099c8:	4770      	bx	lr
 80099ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80099ce:	2b05      	cmp	r3, #5
 80099d0:	d801      	bhi.n	80099d6 <__hexdig_fun+0x1a>
 80099d2:	3847      	subs	r0, #71	; 0x47
 80099d4:	e7f7      	b.n	80099c6 <__hexdig_fun+0xa>
 80099d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80099da:	2b05      	cmp	r3, #5
 80099dc:	d801      	bhi.n	80099e2 <__hexdig_fun+0x26>
 80099de:	3827      	subs	r0, #39	; 0x27
 80099e0:	e7f1      	b.n	80099c6 <__hexdig_fun+0xa>
 80099e2:	2000      	movs	r0, #0
 80099e4:	4770      	bx	lr

080099e6 <__gethex>:
 80099e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ea:	b08b      	sub	sp, #44	; 0x2c
 80099ec:	468a      	mov	sl, r1
 80099ee:	9002      	str	r0, [sp, #8]
 80099f0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80099f2:	9306      	str	r3, [sp, #24]
 80099f4:	4690      	mov	r8, r2
 80099f6:	f000 fad0 	bl	8009f9a <__localeconv_l>
 80099fa:	6803      	ldr	r3, [r0, #0]
 80099fc:	9303      	str	r3, [sp, #12]
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7f6 fc0e 	bl	8000220 <strlen>
 8009a04:	9b03      	ldr	r3, [sp, #12]
 8009a06:	9001      	str	r0, [sp, #4]
 8009a08:	4403      	add	r3, r0
 8009a0a:	f04f 0b00 	mov.w	fp, #0
 8009a0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009a12:	9307      	str	r3, [sp, #28]
 8009a14:	f8da 3000 	ldr.w	r3, [sl]
 8009a18:	3302      	adds	r3, #2
 8009a1a:	461f      	mov	r7, r3
 8009a1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a20:	2830      	cmp	r0, #48	; 0x30
 8009a22:	d06c      	beq.n	8009afe <__gethex+0x118>
 8009a24:	f7ff ffca 	bl	80099bc <__hexdig_fun>
 8009a28:	4604      	mov	r4, r0
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	d16a      	bne.n	8009b04 <__gethex+0x11e>
 8009a2e:	9a01      	ldr	r2, [sp, #4]
 8009a30:	9903      	ldr	r1, [sp, #12]
 8009a32:	4638      	mov	r0, r7
 8009a34:	f001 f8fe 	bl	800ac34 <strncmp>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d166      	bne.n	8009b0a <__gethex+0x124>
 8009a3c:	9b01      	ldr	r3, [sp, #4]
 8009a3e:	5cf8      	ldrb	r0, [r7, r3]
 8009a40:	18fe      	adds	r6, r7, r3
 8009a42:	f7ff ffbb 	bl	80099bc <__hexdig_fun>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d062      	beq.n	8009b10 <__gethex+0x12a>
 8009a4a:	4633      	mov	r3, r6
 8009a4c:	7818      	ldrb	r0, [r3, #0]
 8009a4e:	2830      	cmp	r0, #48	; 0x30
 8009a50:	461f      	mov	r7, r3
 8009a52:	f103 0301 	add.w	r3, r3, #1
 8009a56:	d0f9      	beq.n	8009a4c <__gethex+0x66>
 8009a58:	f7ff ffb0 	bl	80099bc <__hexdig_fun>
 8009a5c:	fab0 f580 	clz	r5, r0
 8009a60:	096d      	lsrs	r5, r5, #5
 8009a62:	4634      	mov	r4, r6
 8009a64:	f04f 0b01 	mov.w	fp, #1
 8009a68:	463a      	mov	r2, r7
 8009a6a:	4616      	mov	r6, r2
 8009a6c:	3201      	adds	r2, #1
 8009a6e:	7830      	ldrb	r0, [r6, #0]
 8009a70:	f7ff ffa4 	bl	80099bc <__hexdig_fun>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d1f8      	bne.n	8009a6a <__gethex+0x84>
 8009a78:	9a01      	ldr	r2, [sp, #4]
 8009a7a:	9903      	ldr	r1, [sp, #12]
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f001 f8d9 	bl	800ac34 <strncmp>
 8009a82:	b950      	cbnz	r0, 8009a9a <__gethex+0xb4>
 8009a84:	b954      	cbnz	r4, 8009a9c <__gethex+0xb6>
 8009a86:	9b01      	ldr	r3, [sp, #4]
 8009a88:	18f4      	adds	r4, r6, r3
 8009a8a:	4622      	mov	r2, r4
 8009a8c:	4616      	mov	r6, r2
 8009a8e:	3201      	adds	r2, #1
 8009a90:	7830      	ldrb	r0, [r6, #0]
 8009a92:	f7ff ff93 	bl	80099bc <__hexdig_fun>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d1f8      	bne.n	8009a8c <__gethex+0xa6>
 8009a9a:	b10c      	cbz	r4, 8009aa0 <__gethex+0xba>
 8009a9c:	1ba4      	subs	r4, r4, r6
 8009a9e:	00a4      	lsls	r4, r4, #2
 8009aa0:	7833      	ldrb	r3, [r6, #0]
 8009aa2:	2b50      	cmp	r3, #80	; 0x50
 8009aa4:	d001      	beq.n	8009aaa <__gethex+0xc4>
 8009aa6:	2b70      	cmp	r3, #112	; 0x70
 8009aa8:	d140      	bne.n	8009b2c <__gethex+0x146>
 8009aaa:	7873      	ldrb	r3, [r6, #1]
 8009aac:	2b2b      	cmp	r3, #43	; 0x2b
 8009aae:	d031      	beq.n	8009b14 <__gethex+0x12e>
 8009ab0:	2b2d      	cmp	r3, #45	; 0x2d
 8009ab2:	d033      	beq.n	8009b1c <__gethex+0x136>
 8009ab4:	1c71      	adds	r1, r6, #1
 8009ab6:	f04f 0900 	mov.w	r9, #0
 8009aba:	7808      	ldrb	r0, [r1, #0]
 8009abc:	f7ff ff7e 	bl	80099bc <__hexdig_fun>
 8009ac0:	1e43      	subs	r3, r0, #1
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b18      	cmp	r3, #24
 8009ac6:	d831      	bhi.n	8009b2c <__gethex+0x146>
 8009ac8:	f1a0 0210 	sub.w	r2, r0, #16
 8009acc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009ad0:	f7ff ff74 	bl	80099bc <__hexdig_fun>
 8009ad4:	1e43      	subs	r3, r0, #1
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b18      	cmp	r3, #24
 8009ada:	d922      	bls.n	8009b22 <__gethex+0x13c>
 8009adc:	f1b9 0f00 	cmp.w	r9, #0
 8009ae0:	d000      	beq.n	8009ae4 <__gethex+0xfe>
 8009ae2:	4252      	negs	r2, r2
 8009ae4:	4414      	add	r4, r2
 8009ae6:	f8ca 1000 	str.w	r1, [sl]
 8009aea:	b30d      	cbz	r5, 8009b30 <__gethex+0x14a>
 8009aec:	f1bb 0f00 	cmp.w	fp, #0
 8009af0:	bf0c      	ite	eq
 8009af2:	2706      	moveq	r7, #6
 8009af4:	2700      	movne	r7, #0
 8009af6:	4638      	mov	r0, r7
 8009af8:	b00b      	add	sp, #44	; 0x2c
 8009afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009afe:	f10b 0b01 	add.w	fp, fp, #1
 8009b02:	e78a      	b.n	8009a1a <__gethex+0x34>
 8009b04:	2500      	movs	r5, #0
 8009b06:	462c      	mov	r4, r5
 8009b08:	e7ae      	b.n	8009a68 <__gethex+0x82>
 8009b0a:	463e      	mov	r6, r7
 8009b0c:	2501      	movs	r5, #1
 8009b0e:	e7c7      	b.n	8009aa0 <__gethex+0xba>
 8009b10:	4604      	mov	r4, r0
 8009b12:	e7fb      	b.n	8009b0c <__gethex+0x126>
 8009b14:	f04f 0900 	mov.w	r9, #0
 8009b18:	1cb1      	adds	r1, r6, #2
 8009b1a:	e7ce      	b.n	8009aba <__gethex+0xd4>
 8009b1c:	f04f 0901 	mov.w	r9, #1
 8009b20:	e7fa      	b.n	8009b18 <__gethex+0x132>
 8009b22:	230a      	movs	r3, #10
 8009b24:	fb03 0202 	mla	r2, r3, r2, r0
 8009b28:	3a10      	subs	r2, #16
 8009b2a:	e7cf      	b.n	8009acc <__gethex+0xe6>
 8009b2c:	4631      	mov	r1, r6
 8009b2e:	e7da      	b.n	8009ae6 <__gethex+0x100>
 8009b30:	1bf3      	subs	r3, r6, r7
 8009b32:	3b01      	subs	r3, #1
 8009b34:	4629      	mov	r1, r5
 8009b36:	2b07      	cmp	r3, #7
 8009b38:	dc49      	bgt.n	8009bce <__gethex+0x1e8>
 8009b3a:	9802      	ldr	r0, [sp, #8]
 8009b3c:	f000 fa63 	bl	800a006 <_Balloc>
 8009b40:	9b01      	ldr	r3, [sp, #4]
 8009b42:	f100 0914 	add.w	r9, r0, #20
 8009b46:	f04f 0b00 	mov.w	fp, #0
 8009b4a:	f1c3 0301 	rsb	r3, r3, #1
 8009b4e:	4605      	mov	r5, r0
 8009b50:	f8cd 9010 	str.w	r9, [sp, #16]
 8009b54:	46da      	mov	sl, fp
 8009b56:	9308      	str	r3, [sp, #32]
 8009b58:	42b7      	cmp	r7, r6
 8009b5a:	d33b      	bcc.n	8009bd4 <__gethex+0x1ee>
 8009b5c:	9804      	ldr	r0, [sp, #16]
 8009b5e:	f840 ab04 	str.w	sl, [r0], #4
 8009b62:	eba0 0009 	sub.w	r0, r0, r9
 8009b66:	1080      	asrs	r0, r0, #2
 8009b68:	6128      	str	r0, [r5, #16]
 8009b6a:	0147      	lsls	r7, r0, #5
 8009b6c:	4650      	mov	r0, sl
 8009b6e:	f000 fb0e 	bl	800a18e <__hi0bits>
 8009b72:	f8d8 6000 	ldr.w	r6, [r8]
 8009b76:	1a3f      	subs	r7, r7, r0
 8009b78:	42b7      	cmp	r7, r6
 8009b7a:	dd64      	ble.n	8009c46 <__gethex+0x260>
 8009b7c:	1bbf      	subs	r7, r7, r6
 8009b7e:	4639      	mov	r1, r7
 8009b80:	4628      	mov	r0, r5
 8009b82:	f000 fe1d 	bl	800a7c0 <__any_on>
 8009b86:	4682      	mov	sl, r0
 8009b88:	b178      	cbz	r0, 8009baa <__gethex+0x1c4>
 8009b8a:	1e7b      	subs	r3, r7, #1
 8009b8c:	1159      	asrs	r1, r3, #5
 8009b8e:	f003 021f 	and.w	r2, r3, #31
 8009b92:	f04f 0a01 	mov.w	sl, #1
 8009b96:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009b9a:	fa0a f202 	lsl.w	r2, sl, r2
 8009b9e:	420a      	tst	r2, r1
 8009ba0:	d003      	beq.n	8009baa <__gethex+0x1c4>
 8009ba2:	4553      	cmp	r3, sl
 8009ba4:	dc46      	bgt.n	8009c34 <__gethex+0x24e>
 8009ba6:	f04f 0a02 	mov.w	sl, #2
 8009baa:	4639      	mov	r1, r7
 8009bac:	4628      	mov	r0, r5
 8009bae:	f7ff fecb 	bl	8009948 <rshift>
 8009bb2:	443c      	add	r4, r7
 8009bb4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bb8:	42a3      	cmp	r3, r4
 8009bba:	da52      	bge.n	8009c62 <__gethex+0x27c>
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	9802      	ldr	r0, [sp, #8]
 8009bc0:	f000 fa55 	bl	800a06e <_Bfree>
 8009bc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	6013      	str	r3, [r2, #0]
 8009bca:	27a3      	movs	r7, #163	; 0xa3
 8009bcc:	e793      	b.n	8009af6 <__gethex+0x110>
 8009bce:	3101      	adds	r1, #1
 8009bd0:	105b      	asrs	r3, r3, #1
 8009bd2:	e7b0      	b.n	8009b36 <__gethex+0x150>
 8009bd4:	1e73      	subs	r3, r6, #1
 8009bd6:	9305      	str	r3, [sp, #20]
 8009bd8:	9a07      	ldr	r2, [sp, #28]
 8009bda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d018      	beq.n	8009c14 <__gethex+0x22e>
 8009be2:	f1bb 0f20 	cmp.w	fp, #32
 8009be6:	d107      	bne.n	8009bf8 <__gethex+0x212>
 8009be8:	9b04      	ldr	r3, [sp, #16]
 8009bea:	f8c3 a000 	str.w	sl, [r3]
 8009bee:	3304      	adds	r3, #4
 8009bf0:	f04f 0a00 	mov.w	sl, #0
 8009bf4:	9304      	str	r3, [sp, #16]
 8009bf6:	46d3      	mov	fp, sl
 8009bf8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009bfc:	f7ff fede 	bl	80099bc <__hexdig_fun>
 8009c00:	f000 000f 	and.w	r0, r0, #15
 8009c04:	fa00 f00b 	lsl.w	r0, r0, fp
 8009c08:	ea4a 0a00 	orr.w	sl, sl, r0
 8009c0c:	f10b 0b04 	add.w	fp, fp, #4
 8009c10:	9b05      	ldr	r3, [sp, #20]
 8009c12:	e00d      	b.n	8009c30 <__gethex+0x24a>
 8009c14:	9b05      	ldr	r3, [sp, #20]
 8009c16:	9a08      	ldr	r2, [sp, #32]
 8009c18:	4413      	add	r3, r2
 8009c1a:	42bb      	cmp	r3, r7
 8009c1c:	d3e1      	bcc.n	8009be2 <__gethex+0x1fc>
 8009c1e:	4618      	mov	r0, r3
 8009c20:	9a01      	ldr	r2, [sp, #4]
 8009c22:	9903      	ldr	r1, [sp, #12]
 8009c24:	9309      	str	r3, [sp, #36]	; 0x24
 8009c26:	f001 f805 	bl	800ac34 <strncmp>
 8009c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d1d8      	bne.n	8009be2 <__gethex+0x1fc>
 8009c30:	461e      	mov	r6, r3
 8009c32:	e791      	b.n	8009b58 <__gethex+0x172>
 8009c34:	1eb9      	subs	r1, r7, #2
 8009c36:	4628      	mov	r0, r5
 8009c38:	f000 fdc2 	bl	800a7c0 <__any_on>
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	d0b2      	beq.n	8009ba6 <__gethex+0x1c0>
 8009c40:	f04f 0a03 	mov.w	sl, #3
 8009c44:	e7b1      	b.n	8009baa <__gethex+0x1c4>
 8009c46:	da09      	bge.n	8009c5c <__gethex+0x276>
 8009c48:	1bf7      	subs	r7, r6, r7
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	463a      	mov	r2, r7
 8009c4e:	9802      	ldr	r0, [sp, #8]
 8009c50:	f000 fbd8 	bl	800a404 <__lshift>
 8009c54:	1be4      	subs	r4, r4, r7
 8009c56:	4605      	mov	r5, r0
 8009c58:	f100 0914 	add.w	r9, r0, #20
 8009c5c:	f04f 0a00 	mov.w	sl, #0
 8009c60:	e7a8      	b.n	8009bb4 <__gethex+0x1ce>
 8009c62:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009c66:	42a0      	cmp	r0, r4
 8009c68:	dd6a      	ble.n	8009d40 <__gethex+0x35a>
 8009c6a:	1b04      	subs	r4, r0, r4
 8009c6c:	42a6      	cmp	r6, r4
 8009c6e:	dc2e      	bgt.n	8009cce <__gethex+0x2e8>
 8009c70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d022      	beq.n	8009cbe <__gethex+0x2d8>
 8009c78:	2b03      	cmp	r3, #3
 8009c7a:	d024      	beq.n	8009cc6 <__gethex+0x2e0>
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d115      	bne.n	8009cac <__gethex+0x2c6>
 8009c80:	42a6      	cmp	r6, r4
 8009c82:	d113      	bne.n	8009cac <__gethex+0x2c6>
 8009c84:	2e01      	cmp	r6, #1
 8009c86:	dc0b      	bgt.n	8009ca0 <__gethex+0x2ba>
 8009c88:	9a06      	ldr	r2, [sp, #24]
 8009c8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009c8e:	6013      	str	r3, [r2, #0]
 8009c90:	2301      	movs	r3, #1
 8009c92:	612b      	str	r3, [r5, #16]
 8009c94:	f8c9 3000 	str.w	r3, [r9]
 8009c98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c9a:	2762      	movs	r7, #98	; 0x62
 8009c9c:	601d      	str	r5, [r3, #0]
 8009c9e:	e72a      	b.n	8009af6 <__gethex+0x110>
 8009ca0:	1e71      	subs	r1, r6, #1
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	f000 fd8c 	bl	800a7c0 <__any_on>
 8009ca8:	2800      	cmp	r0, #0
 8009caa:	d1ed      	bne.n	8009c88 <__gethex+0x2a2>
 8009cac:	4629      	mov	r1, r5
 8009cae:	9802      	ldr	r0, [sp, #8]
 8009cb0:	f000 f9dd 	bl	800a06e <_Bfree>
 8009cb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	6013      	str	r3, [r2, #0]
 8009cba:	2750      	movs	r7, #80	; 0x50
 8009cbc:	e71b      	b.n	8009af6 <__gethex+0x110>
 8009cbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d0e1      	beq.n	8009c88 <__gethex+0x2a2>
 8009cc4:	e7f2      	b.n	8009cac <__gethex+0x2c6>
 8009cc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1dd      	bne.n	8009c88 <__gethex+0x2a2>
 8009ccc:	e7ee      	b.n	8009cac <__gethex+0x2c6>
 8009cce:	1e67      	subs	r7, r4, #1
 8009cd0:	f1ba 0f00 	cmp.w	sl, #0
 8009cd4:	d131      	bne.n	8009d3a <__gethex+0x354>
 8009cd6:	b127      	cbz	r7, 8009ce2 <__gethex+0x2fc>
 8009cd8:	4639      	mov	r1, r7
 8009cda:	4628      	mov	r0, r5
 8009cdc:	f000 fd70 	bl	800a7c0 <__any_on>
 8009ce0:	4682      	mov	sl, r0
 8009ce2:	117a      	asrs	r2, r7, #5
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	f007 071f 	and.w	r7, r7, #31
 8009cea:	fa03 f707 	lsl.w	r7, r3, r7
 8009cee:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	421f      	tst	r7, r3
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	bf18      	it	ne
 8009cfa:	f04a 0a02 	orrne.w	sl, sl, #2
 8009cfe:	1b36      	subs	r6, r6, r4
 8009d00:	f7ff fe22 	bl	8009948 <rshift>
 8009d04:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009d08:	2702      	movs	r7, #2
 8009d0a:	f1ba 0f00 	cmp.w	sl, #0
 8009d0e:	d048      	beq.n	8009da2 <__gethex+0x3bc>
 8009d10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d015      	beq.n	8009d44 <__gethex+0x35e>
 8009d18:	2b03      	cmp	r3, #3
 8009d1a:	d017      	beq.n	8009d4c <__gethex+0x366>
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d109      	bne.n	8009d34 <__gethex+0x34e>
 8009d20:	f01a 0f02 	tst.w	sl, #2
 8009d24:	d006      	beq.n	8009d34 <__gethex+0x34e>
 8009d26:	f8d9 3000 	ldr.w	r3, [r9]
 8009d2a:	ea4a 0a03 	orr.w	sl, sl, r3
 8009d2e:	f01a 0f01 	tst.w	sl, #1
 8009d32:	d10e      	bne.n	8009d52 <__gethex+0x36c>
 8009d34:	f047 0710 	orr.w	r7, r7, #16
 8009d38:	e033      	b.n	8009da2 <__gethex+0x3bc>
 8009d3a:	f04f 0a01 	mov.w	sl, #1
 8009d3e:	e7d0      	b.n	8009ce2 <__gethex+0x2fc>
 8009d40:	2701      	movs	r7, #1
 8009d42:	e7e2      	b.n	8009d0a <__gethex+0x324>
 8009d44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d46:	f1c3 0301 	rsb	r3, r3, #1
 8009d4a:	9315      	str	r3, [sp, #84]	; 0x54
 8009d4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0f0      	beq.n	8009d34 <__gethex+0x34e>
 8009d52:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009d56:	f105 0314 	add.w	r3, r5, #20
 8009d5a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009d5e:	eb03 010a 	add.w	r1, r3, sl
 8009d62:	f04f 0c00 	mov.w	ip, #0
 8009d66:	4618      	mov	r0, r3
 8009d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009d70:	d01c      	beq.n	8009dac <__gethex+0x3c6>
 8009d72:	3201      	adds	r2, #1
 8009d74:	6002      	str	r2, [r0, #0]
 8009d76:	2f02      	cmp	r7, #2
 8009d78:	f105 0314 	add.w	r3, r5, #20
 8009d7c:	d138      	bne.n	8009df0 <__gethex+0x40a>
 8009d7e:	f8d8 2000 	ldr.w	r2, [r8]
 8009d82:	3a01      	subs	r2, #1
 8009d84:	42b2      	cmp	r2, r6
 8009d86:	d10a      	bne.n	8009d9e <__gethex+0x3b8>
 8009d88:	1171      	asrs	r1, r6, #5
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f006 061f 	and.w	r6, r6, #31
 8009d90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d94:	fa02 f606 	lsl.w	r6, r2, r6
 8009d98:	421e      	tst	r6, r3
 8009d9a:	bf18      	it	ne
 8009d9c:	4617      	movne	r7, r2
 8009d9e:	f047 0720 	orr.w	r7, r7, #32
 8009da2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009da4:	601d      	str	r5, [r3, #0]
 8009da6:	9b06      	ldr	r3, [sp, #24]
 8009da8:	601c      	str	r4, [r3, #0]
 8009daa:	e6a4      	b.n	8009af6 <__gethex+0x110>
 8009dac:	4299      	cmp	r1, r3
 8009dae:	f843 cc04 	str.w	ip, [r3, #-4]
 8009db2:	d8d8      	bhi.n	8009d66 <__gethex+0x380>
 8009db4:	68ab      	ldr	r3, [r5, #8]
 8009db6:	4599      	cmp	r9, r3
 8009db8:	db12      	blt.n	8009de0 <__gethex+0x3fa>
 8009dba:	6869      	ldr	r1, [r5, #4]
 8009dbc:	9802      	ldr	r0, [sp, #8]
 8009dbe:	3101      	adds	r1, #1
 8009dc0:	f000 f921 	bl	800a006 <_Balloc>
 8009dc4:	692a      	ldr	r2, [r5, #16]
 8009dc6:	3202      	adds	r2, #2
 8009dc8:	f105 010c 	add.w	r1, r5, #12
 8009dcc:	4683      	mov	fp, r0
 8009dce:	0092      	lsls	r2, r2, #2
 8009dd0:	300c      	adds	r0, #12
 8009dd2:	f000 f90d 	bl	8009ff0 <memcpy>
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	9802      	ldr	r0, [sp, #8]
 8009dda:	f000 f948 	bl	800a06e <_Bfree>
 8009dde:	465d      	mov	r5, fp
 8009de0:	692b      	ldr	r3, [r5, #16]
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009de8:	612a      	str	r2, [r5, #16]
 8009dea:	2201      	movs	r2, #1
 8009dec:	615a      	str	r2, [r3, #20]
 8009dee:	e7c2      	b.n	8009d76 <__gethex+0x390>
 8009df0:	692a      	ldr	r2, [r5, #16]
 8009df2:	454a      	cmp	r2, r9
 8009df4:	dd0b      	ble.n	8009e0e <__gethex+0x428>
 8009df6:	2101      	movs	r1, #1
 8009df8:	4628      	mov	r0, r5
 8009dfa:	f7ff fda5 	bl	8009948 <rshift>
 8009dfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e02:	3401      	adds	r4, #1
 8009e04:	42a3      	cmp	r3, r4
 8009e06:	f6ff aed9 	blt.w	8009bbc <__gethex+0x1d6>
 8009e0a:	2701      	movs	r7, #1
 8009e0c:	e7c7      	b.n	8009d9e <__gethex+0x3b8>
 8009e0e:	f016 061f 	ands.w	r6, r6, #31
 8009e12:	d0fa      	beq.n	8009e0a <__gethex+0x424>
 8009e14:	449a      	add	sl, r3
 8009e16:	f1c6 0620 	rsb	r6, r6, #32
 8009e1a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009e1e:	f000 f9b6 	bl	800a18e <__hi0bits>
 8009e22:	42b0      	cmp	r0, r6
 8009e24:	dbe7      	blt.n	8009df6 <__gethex+0x410>
 8009e26:	e7f0      	b.n	8009e0a <__gethex+0x424>

08009e28 <L_shift>:
 8009e28:	f1c2 0208 	rsb	r2, r2, #8
 8009e2c:	0092      	lsls	r2, r2, #2
 8009e2e:	b570      	push	{r4, r5, r6, lr}
 8009e30:	f1c2 0620 	rsb	r6, r2, #32
 8009e34:	6843      	ldr	r3, [r0, #4]
 8009e36:	6804      	ldr	r4, [r0, #0]
 8009e38:	fa03 f506 	lsl.w	r5, r3, r6
 8009e3c:	432c      	orrs	r4, r5
 8009e3e:	40d3      	lsrs	r3, r2
 8009e40:	6004      	str	r4, [r0, #0]
 8009e42:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e46:	4288      	cmp	r0, r1
 8009e48:	d3f4      	bcc.n	8009e34 <L_shift+0xc>
 8009e4a:	bd70      	pop	{r4, r5, r6, pc}

08009e4c <__match>:
 8009e4c:	b530      	push	{r4, r5, lr}
 8009e4e:	6803      	ldr	r3, [r0, #0]
 8009e50:	3301      	adds	r3, #1
 8009e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e56:	b914      	cbnz	r4, 8009e5e <__match+0x12>
 8009e58:	6003      	str	r3, [r0, #0]
 8009e5a:	2001      	movs	r0, #1
 8009e5c:	bd30      	pop	{r4, r5, pc}
 8009e5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009e66:	2d19      	cmp	r5, #25
 8009e68:	bf98      	it	ls
 8009e6a:	3220      	addls	r2, #32
 8009e6c:	42a2      	cmp	r2, r4
 8009e6e:	d0f0      	beq.n	8009e52 <__match+0x6>
 8009e70:	2000      	movs	r0, #0
 8009e72:	e7f3      	b.n	8009e5c <__match+0x10>

08009e74 <__hexnan>:
 8009e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e78:	680b      	ldr	r3, [r1, #0]
 8009e7a:	6801      	ldr	r1, [r0, #0]
 8009e7c:	115f      	asrs	r7, r3, #5
 8009e7e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009e82:	f013 031f 	ands.w	r3, r3, #31
 8009e86:	b087      	sub	sp, #28
 8009e88:	bf18      	it	ne
 8009e8a:	3704      	addne	r7, #4
 8009e8c:	2500      	movs	r5, #0
 8009e8e:	1f3e      	subs	r6, r7, #4
 8009e90:	4682      	mov	sl, r0
 8009e92:	4690      	mov	r8, r2
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	f847 5c04 	str.w	r5, [r7, #-4]
 8009e9a:	46b1      	mov	r9, r6
 8009e9c:	4634      	mov	r4, r6
 8009e9e:	9502      	str	r5, [sp, #8]
 8009ea0:	46ab      	mov	fp, r5
 8009ea2:	784a      	ldrb	r2, [r1, #1]
 8009ea4:	1c4b      	adds	r3, r1, #1
 8009ea6:	9303      	str	r3, [sp, #12]
 8009ea8:	b342      	cbz	r2, 8009efc <__hexnan+0x88>
 8009eaa:	4610      	mov	r0, r2
 8009eac:	9105      	str	r1, [sp, #20]
 8009eae:	9204      	str	r2, [sp, #16]
 8009eb0:	f7ff fd84 	bl	80099bc <__hexdig_fun>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d143      	bne.n	8009f40 <__hexnan+0xcc>
 8009eb8:	9a04      	ldr	r2, [sp, #16]
 8009eba:	9905      	ldr	r1, [sp, #20]
 8009ebc:	2a20      	cmp	r2, #32
 8009ebe:	d818      	bhi.n	8009ef2 <__hexnan+0x7e>
 8009ec0:	9b02      	ldr	r3, [sp, #8]
 8009ec2:	459b      	cmp	fp, r3
 8009ec4:	dd13      	ble.n	8009eee <__hexnan+0x7a>
 8009ec6:	454c      	cmp	r4, r9
 8009ec8:	d206      	bcs.n	8009ed8 <__hexnan+0x64>
 8009eca:	2d07      	cmp	r5, #7
 8009ecc:	dc04      	bgt.n	8009ed8 <__hexnan+0x64>
 8009ece:	462a      	mov	r2, r5
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	4620      	mov	r0, r4
 8009ed4:	f7ff ffa8 	bl	8009e28 <L_shift>
 8009ed8:	4544      	cmp	r4, r8
 8009eda:	d944      	bls.n	8009f66 <__hexnan+0xf2>
 8009edc:	2300      	movs	r3, #0
 8009ede:	f1a4 0904 	sub.w	r9, r4, #4
 8009ee2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ee6:	f8cd b008 	str.w	fp, [sp, #8]
 8009eea:	464c      	mov	r4, r9
 8009eec:	461d      	mov	r5, r3
 8009eee:	9903      	ldr	r1, [sp, #12]
 8009ef0:	e7d7      	b.n	8009ea2 <__hexnan+0x2e>
 8009ef2:	2a29      	cmp	r2, #41	; 0x29
 8009ef4:	d14a      	bne.n	8009f8c <__hexnan+0x118>
 8009ef6:	3102      	adds	r1, #2
 8009ef8:	f8ca 1000 	str.w	r1, [sl]
 8009efc:	f1bb 0f00 	cmp.w	fp, #0
 8009f00:	d044      	beq.n	8009f8c <__hexnan+0x118>
 8009f02:	454c      	cmp	r4, r9
 8009f04:	d206      	bcs.n	8009f14 <__hexnan+0xa0>
 8009f06:	2d07      	cmp	r5, #7
 8009f08:	dc04      	bgt.n	8009f14 <__hexnan+0xa0>
 8009f0a:	462a      	mov	r2, r5
 8009f0c:	4649      	mov	r1, r9
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f7ff ff8a 	bl	8009e28 <L_shift>
 8009f14:	4544      	cmp	r4, r8
 8009f16:	d928      	bls.n	8009f6a <__hexnan+0xf6>
 8009f18:	4643      	mov	r3, r8
 8009f1a:	f854 2b04 	ldr.w	r2, [r4], #4
 8009f1e:	f843 2b04 	str.w	r2, [r3], #4
 8009f22:	42a6      	cmp	r6, r4
 8009f24:	d2f9      	bcs.n	8009f1a <__hexnan+0xa6>
 8009f26:	2200      	movs	r2, #0
 8009f28:	f843 2b04 	str.w	r2, [r3], #4
 8009f2c:	429e      	cmp	r6, r3
 8009f2e:	d2fb      	bcs.n	8009f28 <__hexnan+0xb4>
 8009f30:	6833      	ldr	r3, [r6, #0]
 8009f32:	b91b      	cbnz	r3, 8009f3c <__hexnan+0xc8>
 8009f34:	4546      	cmp	r6, r8
 8009f36:	d127      	bne.n	8009f88 <__hexnan+0x114>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	6033      	str	r3, [r6, #0]
 8009f3c:	2005      	movs	r0, #5
 8009f3e:	e026      	b.n	8009f8e <__hexnan+0x11a>
 8009f40:	3501      	adds	r5, #1
 8009f42:	2d08      	cmp	r5, #8
 8009f44:	f10b 0b01 	add.w	fp, fp, #1
 8009f48:	dd06      	ble.n	8009f58 <__hexnan+0xe4>
 8009f4a:	4544      	cmp	r4, r8
 8009f4c:	d9cf      	bls.n	8009eee <__hexnan+0x7a>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f54:	2501      	movs	r5, #1
 8009f56:	3c04      	subs	r4, #4
 8009f58:	6822      	ldr	r2, [r4, #0]
 8009f5a:	f000 000f 	and.w	r0, r0, #15
 8009f5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009f62:	6020      	str	r0, [r4, #0]
 8009f64:	e7c3      	b.n	8009eee <__hexnan+0x7a>
 8009f66:	2508      	movs	r5, #8
 8009f68:	e7c1      	b.n	8009eee <__hexnan+0x7a>
 8009f6a:	9b01      	ldr	r3, [sp, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d0df      	beq.n	8009f30 <__hexnan+0xbc>
 8009f70:	f04f 32ff 	mov.w	r2, #4294967295
 8009f74:	f1c3 0320 	rsb	r3, r3, #32
 8009f78:	fa22 f303 	lsr.w	r3, r2, r3
 8009f7c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009f80:	401a      	ands	r2, r3
 8009f82:	f847 2c04 	str.w	r2, [r7, #-4]
 8009f86:	e7d3      	b.n	8009f30 <__hexnan+0xbc>
 8009f88:	3e04      	subs	r6, #4
 8009f8a:	e7d1      	b.n	8009f30 <__hexnan+0xbc>
 8009f8c:	2004      	movs	r0, #4
 8009f8e:	b007      	add	sp, #28
 8009f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f94 <__locale_ctype_ptr_l>:
 8009f94:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009f98:	4770      	bx	lr

08009f9a <__localeconv_l>:
 8009f9a:	30f0      	adds	r0, #240	; 0xf0
 8009f9c:	4770      	bx	lr
	...

08009fa0 <_localeconv_r>:
 8009fa0:	4b04      	ldr	r3, [pc, #16]	; (8009fb4 <_localeconv_r+0x14>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6a18      	ldr	r0, [r3, #32]
 8009fa6:	4b04      	ldr	r3, [pc, #16]	; (8009fb8 <_localeconv_r+0x18>)
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	bf08      	it	eq
 8009fac:	4618      	moveq	r0, r3
 8009fae:	30f0      	adds	r0, #240	; 0xf0
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	2000000c 	.word	0x2000000c
 8009fb8:	20000070 	.word	0x20000070

08009fbc <malloc>:
 8009fbc:	4b02      	ldr	r3, [pc, #8]	; (8009fc8 <malloc+0xc>)
 8009fbe:	4601      	mov	r1, r0
 8009fc0:	6818      	ldr	r0, [r3, #0]
 8009fc2:	f000 bc7b 	b.w	800a8bc <_malloc_r>
 8009fc6:	bf00      	nop
 8009fc8:	2000000c 	.word	0x2000000c

08009fcc <__ascii_mbtowc>:
 8009fcc:	b082      	sub	sp, #8
 8009fce:	b901      	cbnz	r1, 8009fd2 <__ascii_mbtowc+0x6>
 8009fd0:	a901      	add	r1, sp, #4
 8009fd2:	b142      	cbz	r2, 8009fe6 <__ascii_mbtowc+0x1a>
 8009fd4:	b14b      	cbz	r3, 8009fea <__ascii_mbtowc+0x1e>
 8009fd6:	7813      	ldrb	r3, [r2, #0]
 8009fd8:	600b      	str	r3, [r1, #0]
 8009fda:	7812      	ldrb	r2, [r2, #0]
 8009fdc:	1c10      	adds	r0, r2, #0
 8009fde:	bf18      	it	ne
 8009fe0:	2001      	movne	r0, #1
 8009fe2:	b002      	add	sp, #8
 8009fe4:	4770      	bx	lr
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	e7fb      	b.n	8009fe2 <__ascii_mbtowc+0x16>
 8009fea:	f06f 0001 	mvn.w	r0, #1
 8009fee:	e7f8      	b.n	8009fe2 <__ascii_mbtowc+0x16>

08009ff0 <memcpy>:
 8009ff0:	b510      	push	{r4, lr}
 8009ff2:	1e43      	subs	r3, r0, #1
 8009ff4:	440a      	add	r2, r1
 8009ff6:	4291      	cmp	r1, r2
 8009ff8:	d100      	bne.n	8009ffc <memcpy+0xc>
 8009ffa:	bd10      	pop	{r4, pc}
 8009ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a000:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a004:	e7f7      	b.n	8009ff6 <memcpy+0x6>

0800a006 <_Balloc>:
 800a006:	b570      	push	{r4, r5, r6, lr}
 800a008:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a00a:	4604      	mov	r4, r0
 800a00c:	460e      	mov	r6, r1
 800a00e:	b93d      	cbnz	r5, 800a020 <_Balloc+0x1a>
 800a010:	2010      	movs	r0, #16
 800a012:	f7ff ffd3 	bl	8009fbc <malloc>
 800a016:	6260      	str	r0, [r4, #36]	; 0x24
 800a018:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a01c:	6005      	str	r5, [r0, #0]
 800a01e:	60c5      	str	r5, [r0, #12]
 800a020:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a022:	68eb      	ldr	r3, [r5, #12]
 800a024:	b183      	cbz	r3, 800a048 <_Balloc+0x42>
 800a026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a02e:	b9b8      	cbnz	r0, 800a060 <_Balloc+0x5a>
 800a030:	2101      	movs	r1, #1
 800a032:	fa01 f506 	lsl.w	r5, r1, r6
 800a036:	1d6a      	adds	r2, r5, #5
 800a038:	0092      	lsls	r2, r2, #2
 800a03a:	4620      	mov	r0, r4
 800a03c:	f000 fbe1 	bl	800a802 <_calloc_r>
 800a040:	b160      	cbz	r0, 800a05c <_Balloc+0x56>
 800a042:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a046:	e00e      	b.n	800a066 <_Balloc+0x60>
 800a048:	2221      	movs	r2, #33	; 0x21
 800a04a:	2104      	movs	r1, #4
 800a04c:	4620      	mov	r0, r4
 800a04e:	f000 fbd8 	bl	800a802 <_calloc_r>
 800a052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a054:	60e8      	str	r0, [r5, #12]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e4      	bne.n	800a026 <_Balloc+0x20>
 800a05c:	2000      	movs	r0, #0
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
 800a060:	6802      	ldr	r2, [r0, #0]
 800a062:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a066:	2300      	movs	r3, #0
 800a068:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a06c:	e7f7      	b.n	800a05e <_Balloc+0x58>

0800a06e <_Bfree>:
 800a06e:	b570      	push	{r4, r5, r6, lr}
 800a070:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a072:	4606      	mov	r6, r0
 800a074:	460d      	mov	r5, r1
 800a076:	b93c      	cbnz	r4, 800a088 <_Bfree+0x1a>
 800a078:	2010      	movs	r0, #16
 800a07a:	f7ff ff9f 	bl	8009fbc <malloc>
 800a07e:	6270      	str	r0, [r6, #36]	; 0x24
 800a080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a084:	6004      	str	r4, [r0, #0]
 800a086:	60c4      	str	r4, [r0, #12]
 800a088:	b13d      	cbz	r5, 800a09a <_Bfree+0x2c>
 800a08a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a08c:	686a      	ldr	r2, [r5, #4]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a094:	6029      	str	r1, [r5, #0]
 800a096:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a09a:	bd70      	pop	{r4, r5, r6, pc}

0800a09c <__multadd>:
 800a09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a0:	690d      	ldr	r5, [r1, #16]
 800a0a2:	461f      	mov	r7, r3
 800a0a4:	4606      	mov	r6, r0
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	f101 0c14 	add.w	ip, r1, #20
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	f8dc 0000 	ldr.w	r0, [ip]
 800a0b2:	b281      	uxth	r1, r0
 800a0b4:	fb02 7101 	mla	r1, r2, r1, r7
 800a0b8:	0c0f      	lsrs	r7, r1, #16
 800a0ba:	0c00      	lsrs	r0, r0, #16
 800a0bc:	fb02 7000 	mla	r0, r2, r0, r7
 800a0c0:	b289      	uxth	r1, r1
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a0c8:	429d      	cmp	r5, r3
 800a0ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a0ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a0d2:	dcec      	bgt.n	800a0ae <__multadd+0x12>
 800a0d4:	b1d7      	cbz	r7, 800a10c <__multadd+0x70>
 800a0d6:	68a3      	ldr	r3, [r4, #8]
 800a0d8:	42ab      	cmp	r3, r5
 800a0da:	dc12      	bgt.n	800a102 <__multadd+0x66>
 800a0dc:	6861      	ldr	r1, [r4, #4]
 800a0de:	4630      	mov	r0, r6
 800a0e0:	3101      	adds	r1, #1
 800a0e2:	f7ff ff90 	bl	800a006 <_Balloc>
 800a0e6:	6922      	ldr	r2, [r4, #16]
 800a0e8:	3202      	adds	r2, #2
 800a0ea:	f104 010c 	add.w	r1, r4, #12
 800a0ee:	4680      	mov	r8, r0
 800a0f0:	0092      	lsls	r2, r2, #2
 800a0f2:	300c      	adds	r0, #12
 800a0f4:	f7ff ff7c 	bl	8009ff0 <memcpy>
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f7ff ffb7 	bl	800a06e <_Bfree>
 800a100:	4644      	mov	r4, r8
 800a102:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a106:	3501      	adds	r5, #1
 800a108:	615f      	str	r7, [r3, #20]
 800a10a:	6125      	str	r5, [r4, #16]
 800a10c:	4620      	mov	r0, r4
 800a10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a112 <__s2b>:
 800a112:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a116:	460c      	mov	r4, r1
 800a118:	4615      	mov	r5, r2
 800a11a:	461f      	mov	r7, r3
 800a11c:	2209      	movs	r2, #9
 800a11e:	3308      	adds	r3, #8
 800a120:	4606      	mov	r6, r0
 800a122:	fb93 f3f2 	sdiv	r3, r3, r2
 800a126:	2100      	movs	r1, #0
 800a128:	2201      	movs	r2, #1
 800a12a:	429a      	cmp	r2, r3
 800a12c:	db20      	blt.n	800a170 <__s2b+0x5e>
 800a12e:	4630      	mov	r0, r6
 800a130:	f7ff ff69 	bl	800a006 <_Balloc>
 800a134:	9b08      	ldr	r3, [sp, #32]
 800a136:	6143      	str	r3, [r0, #20]
 800a138:	2d09      	cmp	r5, #9
 800a13a:	f04f 0301 	mov.w	r3, #1
 800a13e:	6103      	str	r3, [r0, #16]
 800a140:	dd19      	ble.n	800a176 <__s2b+0x64>
 800a142:	f104 0809 	add.w	r8, r4, #9
 800a146:	46c1      	mov	r9, r8
 800a148:	442c      	add	r4, r5
 800a14a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a14e:	4601      	mov	r1, r0
 800a150:	3b30      	subs	r3, #48	; 0x30
 800a152:	220a      	movs	r2, #10
 800a154:	4630      	mov	r0, r6
 800a156:	f7ff ffa1 	bl	800a09c <__multadd>
 800a15a:	45a1      	cmp	r9, r4
 800a15c:	d1f5      	bne.n	800a14a <__s2b+0x38>
 800a15e:	eb08 0405 	add.w	r4, r8, r5
 800a162:	3c08      	subs	r4, #8
 800a164:	1b2d      	subs	r5, r5, r4
 800a166:	1963      	adds	r3, r4, r5
 800a168:	42bb      	cmp	r3, r7
 800a16a:	db07      	blt.n	800a17c <__s2b+0x6a>
 800a16c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a170:	0052      	lsls	r2, r2, #1
 800a172:	3101      	adds	r1, #1
 800a174:	e7d9      	b.n	800a12a <__s2b+0x18>
 800a176:	340a      	adds	r4, #10
 800a178:	2509      	movs	r5, #9
 800a17a:	e7f3      	b.n	800a164 <__s2b+0x52>
 800a17c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a180:	4601      	mov	r1, r0
 800a182:	3b30      	subs	r3, #48	; 0x30
 800a184:	220a      	movs	r2, #10
 800a186:	4630      	mov	r0, r6
 800a188:	f7ff ff88 	bl	800a09c <__multadd>
 800a18c:	e7eb      	b.n	800a166 <__s2b+0x54>

0800a18e <__hi0bits>:
 800a18e:	0c02      	lsrs	r2, r0, #16
 800a190:	0412      	lsls	r2, r2, #16
 800a192:	4603      	mov	r3, r0
 800a194:	b9b2      	cbnz	r2, 800a1c4 <__hi0bits+0x36>
 800a196:	0403      	lsls	r3, r0, #16
 800a198:	2010      	movs	r0, #16
 800a19a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a19e:	bf04      	itt	eq
 800a1a0:	021b      	lsleq	r3, r3, #8
 800a1a2:	3008      	addeq	r0, #8
 800a1a4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a1a8:	bf04      	itt	eq
 800a1aa:	011b      	lsleq	r3, r3, #4
 800a1ac:	3004      	addeq	r0, #4
 800a1ae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a1b2:	bf04      	itt	eq
 800a1b4:	009b      	lsleq	r3, r3, #2
 800a1b6:	3002      	addeq	r0, #2
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	db06      	blt.n	800a1ca <__hi0bits+0x3c>
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	d503      	bpl.n	800a1c8 <__hi0bits+0x3a>
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	4770      	bx	lr
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	e7e8      	b.n	800a19a <__hi0bits+0xc>
 800a1c8:	2020      	movs	r0, #32
 800a1ca:	4770      	bx	lr

0800a1cc <__lo0bits>:
 800a1cc:	6803      	ldr	r3, [r0, #0]
 800a1ce:	f013 0207 	ands.w	r2, r3, #7
 800a1d2:	4601      	mov	r1, r0
 800a1d4:	d00b      	beq.n	800a1ee <__lo0bits+0x22>
 800a1d6:	07da      	lsls	r2, r3, #31
 800a1d8:	d423      	bmi.n	800a222 <__lo0bits+0x56>
 800a1da:	0798      	lsls	r0, r3, #30
 800a1dc:	bf49      	itett	mi
 800a1de:	085b      	lsrmi	r3, r3, #1
 800a1e0:	089b      	lsrpl	r3, r3, #2
 800a1e2:	2001      	movmi	r0, #1
 800a1e4:	600b      	strmi	r3, [r1, #0]
 800a1e6:	bf5c      	itt	pl
 800a1e8:	600b      	strpl	r3, [r1, #0]
 800a1ea:	2002      	movpl	r0, #2
 800a1ec:	4770      	bx	lr
 800a1ee:	b298      	uxth	r0, r3
 800a1f0:	b9a8      	cbnz	r0, 800a21e <__lo0bits+0x52>
 800a1f2:	0c1b      	lsrs	r3, r3, #16
 800a1f4:	2010      	movs	r0, #16
 800a1f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a1fa:	bf04      	itt	eq
 800a1fc:	0a1b      	lsreq	r3, r3, #8
 800a1fe:	3008      	addeq	r0, #8
 800a200:	071a      	lsls	r2, r3, #28
 800a202:	bf04      	itt	eq
 800a204:	091b      	lsreq	r3, r3, #4
 800a206:	3004      	addeq	r0, #4
 800a208:	079a      	lsls	r2, r3, #30
 800a20a:	bf04      	itt	eq
 800a20c:	089b      	lsreq	r3, r3, #2
 800a20e:	3002      	addeq	r0, #2
 800a210:	07da      	lsls	r2, r3, #31
 800a212:	d402      	bmi.n	800a21a <__lo0bits+0x4e>
 800a214:	085b      	lsrs	r3, r3, #1
 800a216:	d006      	beq.n	800a226 <__lo0bits+0x5a>
 800a218:	3001      	adds	r0, #1
 800a21a:	600b      	str	r3, [r1, #0]
 800a21c:	4770      	bx	lr
 800a21e:	4610      	mov	r0, r2
 800a220:	e7e9      	b.n	800a1f6 <__lo0bits+0x2a>
 800a222:	2000      	movs	r0, #0
 800a224:	4770      	bx	lr
 800a226:	2020      	movs	r0, #32
 800a228:	4770      	bx	lr

0800a22a <__i2b>:
 800a22a:	b510      	push	{r4, lr}
 800a22c:	460c      	mov	r4, r1
 800a22e:	2101      	movs	r1, #1
 800a230:	f7ff fee9 	bl	800a006 <_Balloc>
 800a234:	2201      	movs	r2, #1
 800a236:	6144      	str	r4, [r0, #20]
 800a238:	6102      	str	r2, [r0, #16]
 800a23a:	bd10      	pop	{r4, pc}

0800a23c <__multiply>:
 800a23c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a240:	4614      	mov	r4, r2
 800a242:	690a      	ldr	r2, [r1, #16]
 800a244:	6923      	ldr	r3, [r4, #16]
 800a246:	429a      	cmp	r2, r3
 800a248:	bfb8      	it	lt
 800a24a:	460b      	movlt	r3, r1
 800a24c:	4688      	mov	r8, r1
 800a24e:	bfbc      	itt	lt
 800a250:	46a0      	movlt	r8, r4
 800a252:	461c      	movlt	r4, r3
 800a254:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a258:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a25c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a260:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a264:	eb07 0609 	add.w	r6, r7, r9
 800a268:	42b3      	cmp	r3, r6
 800a26a:	bfb8      	it	lt
 800a26c:	3101      	addlt	r1, #1
 800a26e:	f7ff feca 	bl	800a006 <_Balloc>
 800a272:	f100 0514 	add.w	r5, r0, #20
 800a276:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a27a:	462b      	mov	r3, r5
 800a27c:	2200      	movs	r2, #0
 800a27e:	4573      	cmp	r3, lr
 800a280:	d316      	bcc.n	800a2b0 <__multiply+0x74>
 800a282:	f104 0214 	add.w	r2, r4, #20
 800a286:	f108 0114 	add.w	r1, r8, #20
 800a28a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a28e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	9b00      	ldr	r3, [sp, #0]
 800a296:	9201      	str	r2, [sp, #4]
 800a298:	4293      	cmp	r3, r2
 800a29a:	d80c      	bhi.n	800a2b6 <__multiply+0x7a>
 800a29c:	2e00      	cmp	r6, #0
 800a29e:	dd03      	ble.n	800a2a8 <__multiply+0x6c>
 800a2a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d05d      	beq.n	800a364 <__multiply+0x128>
 800a2a8:	6106      	str	r6, [r0, #16]
 800a2aa:	b003      	add	sp, #12
 800a2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b0:	f843 2b04 	str.w	r2, [r3], #4
 800a2b4:	e7e3      	b.n	800a27e <__multiply+0x42>
 800a2b6:	f8b2 b000 	ldrh.w	fp, [r2]
 800a2ba:	f1bb 0f00 	cmp.w	fp, #0
 800a2be:	d023      	beq.n	800a308 <__multiply+0xcc>
 800a2c0:	4689      	mov	r9, r1
 800a2c2:	46ac      	mov	ip, r5
 800a2c4:	f04f 0800 	mov.w	r8, #0
 800a2c8:	f859 4b04 	ldr.w	r4, [r9], #4
 800a2cc:	f8dc a000 	ldr.w	sl, [ip]
 800a2d0:	b2a3      	uxth	r3, r4
 800a2d2:	fa1f fa8a 	uxth.w	sl, sl
 800a2d6:	fb0b a303 	mla	r3, fp, r3, sl
 800a2da:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a2de:	f8dc 4000 	ldr.w	r4, [ip]
 800a2e2:	4443      	add	r3, r8
 800a2e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a2e8:	fb0b 840a 	mla	r4, fp, sl, r8
 800a2ec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a2f0:	46e2      	mov	sl, ip
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a2f8:	454f      	cmp	r7, r9
 800a2fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a2fe:	f84a 3b04 	str.w	r3, [sl], #4
 800a302:	d82b      	bhi.n	800a35c <__multiply+0x120>
 800a304:	f8cc 8004 	str.w	r8, [ip, #4]
 800a308:	9b01      	ldr	r3, [sp, #4]
 800a30a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a30e:	3204      	adds	r2, #4
 800a310:	f1ba 0f00 	cmp.w	sl, #0
 800a314:	d020      	beq.n	800a358 <__multiply+0x11c>
 800a316:	682b      	ldr	r3, [r5, #0]
 800a318:	4689      	mov	r9, r1
 800a31a:	46a8      	mov	r8, r5
 800a31c:	f04f 0b00 	mov.w	fp, #0
 800a320:	f8b9 c000 	ldrh.w	ip, [r9]
 800a324:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a328:	fb0a 440c 	mla	r4, sl, ip, r4
 800a32c:	445c      	add	r4, fp
 800a32e:	46c4      	mov	ip, r8
 800a330:	b29b      	uxth	r3, r3
 800a332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a336:	f84c 3b04 	str.w	r3, [ip], #4
 800a33a:	f859 3b04 	ldr.w	r3, [r9], #4
 800a33e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a342:	0c1b      	lsrs	r3, r3, #16
 800a344:	fb0a b303 	mla	r3, sl, r3, fp
 800a348:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a34c:	454f      	cmp	r7, r9
 800a34e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a352:	d805      	bhi.n	800a360 <__multiply+0x124>
 800a354:	f8c8 3004 	str.w	r3, [r8, #4]
 800a358:	3504      	adds	r5, #4
 800a35a:	e79b      	b.n	800a294 <__multiply+0x58>
 800a35c:	46d4      	mov	ip, sl
 800a35e:	e7b3      	b.n	800a2c8 <__multiply+0x8c>
 800a360:	46e0      	mov	r8, ip
 800a362:	e7dd      	b.n	800a320 <__multiply+0xe4>
 800a364:	3e01      	subs	r6, #1
 800a366:	e799      	b.n	800a29c <__multiply+0x60>

0800a368 <__pow5mult>:
 800a368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a36c:	4615      	mov	r5, r2
 800a36e:	f012 0203 	ands.w	r2, r2, #3
 800a372:	4606      	mov	r6, r0
 800a374:	460f      	mov	r7, r1
 800a376:	d007      	beq.n	800a388 <__pow5mult+0x20>
 800a378:	3a01      	subs	r2, #1
 800a37a:	4c21      	ldr	r4, [pc, #132]	; (800a400 <__pow5mult+0x98>)
 800a37c:	2300      	movs	r3, #0
 800a37e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a382:	f7ff fe8b 	bl	800a09c <__multadd>
 800a386:	4607      	mov	r7, r0
 800a388:	10ad      	asrs	r5, r5, #2
 800a38a:	d035      	beq.n	800a3f8 <__pow5mult+0x90>
 800a38c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a38e:	b93c      	cbnz	r4, 800a3a0 <__pow5mult+0x38>
 800a390:	2010      	movs	r0, #16
 800a392:	f7ff fe13 	bl	8009fbc <malloc>
 800a396:	6270      	str	r0, [r6, #36]	; 0x24
 800a398:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a39c:	6004      	str	r4, [r0, #0]
 800a39e:	60c4      	str	r4, [r0, #12]
 800a3a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a3a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3a8:	b94c      	cbnz	r4, 800a3be <__pow5mult+0x56>
 800a3aa:	f240 2171 	movw	r1, #625	; 0x271
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	f7ff ff3b 	bl	800a22a <__i2b>
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	6003      	str	r3, [r0, #0]
 800a3be:	f04f 0800 	mov.w	r8, #0
 800a3c2:	07eb      	lsls	r3, r5, #31
 800a3c4:	d50a      	bpl.n	800a3dc <__pow5mult+0x74>
 800a3c6:	4639      	mov	r1, r7
 800a3c8:	4622      	mov	r2, r4
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f7ff ff36 	bl	800a23c <__multiply>
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	4681      	mov	r9, r0
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	f7ff fe4a 	bl	800a06e <_Bfree>
 800a3da:	464f      	mov	r7, r9
 800a3dc:	106d      	asrs	r5, r5, #1
 800a3de:	d00b      	beq.n	800a3f8 <__pow5mult+0x90>
 800a3e0:	6820      	ldr	r0, [r4, #0]
 800a3e2:	b938      	cbnz	r0, 800a3f4 <__pow5mult+0x8c>
 800a3e4:	4622      	mov	r2, r4
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f7ff ff27 	bl	800a23c <__multiply>
 800a3ee:	6020      	str	r0, [r4, #0]
 800a3f0:	f8c0 8000 	str.w	r8, [r0]
 800a3f4:	4604      	mov	r4, r0
 800a3f6:	e7e4      	b.n	800a3c2 <__pow5mult+0x5a>
 800a3f8:	4638      	mov	r0, r7
 800a3fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3fe:	bf00      	nop
 800a400:	0800aef0 	.word	0x0800aef0

0800a404 <__lshift>:
 800a404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a408:	460c      	mov	r4, r1
 800a40a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a40e:	6923      	ldr	r3, [r4, #16]
 800a410:	6849      	ldr	r1, [r1, #4]
 800a412:	eb0a 0903 	add.w	r9, sl, r3
 800a416:	68a3      	ldr	r3, [r4, #8]
 800a418:	4607      	mov	r7, r0
 800a41a:	4616      	mov	r6, r2
 800a41c:	f109 0501 	add.w	r5, r9, #1
 800a420:	42ab      	cmp	r3, r5
 800a422:	db32      	blt.n	800a48a <__lshift+0x86>
 800a424:	4638      	mov	r0, r7
 800a426:	f7ff fdee 	bl	800a006 <_Balloc>
 800a42a:	2300      	movs	r3, #0
 800a42c:	4680      	mov	r8, r0
 800a42e:	f100 0114 	add.w	r1, r0, #20
 800a432:	461a      	mov	r2, r3
 800a434:	4553      	cmp	r3, sl
 800a436:	db2b      	blt.n	800a490 <__lshift+0x8c>
 800a438:	6920      	ldr	r0, [r4, #16]
 800a43a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a43e:	f104 0314 	add.w	r3, r4, #20
 800a442:	f016 021f 	ands.w	r2, r6, #31
 800a446:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a44a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a44e:	d025      	beq.n	800a49c <__lshift+0x98>
 800a450:	f1c2 0e20 	rsb	lr, r2, #32
 800a454:	2000      	movs	r0, #0
 800a456:	681e      	ldr	r6, [r3, #0]
 800a458:	468a      	mov	sl, r1
 800a45a:	4096      	lsls	r6, r2
 800a45c:	4330      	orrs	r0, r6
 800a45e:	f84a 0b04 	str.w	r0, [sl], #4
 800a462:	f853 0b04 	ldr.w	r0, [r3], #4
 800a466:	459c      	cmp	ip, r3
 800a468:	fa20 f00e 	lsr.w	r0, r0, lr
 800a46c:	d814      	bhi.n	800a498 <__lshift+0x94>
 800a46e:	6048      	str	r0, [r1, #4]
 800a470:	b108      	cbz	r0, 800a476 <__lshift+0x72>
 800a472:	f109 0502 	add.w	r5, r9, #2
 800a476:	3d01      	subs	r5, #1
 800a478:	4638      	mov	r0, r7
 800a47a:	f8c8 5010 	str.w	r5, [r8, #16]
 800a47e:	4621      	mov	r1, r4
 800a480:	f7ff fdf5 	bl	800a06e <_Bfree>
 800a484:	4640      	mov	r0, r8
 800a486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a48a:	3101      	adds	r1, #1
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	e7c7      	b.n	800a420 <__lshift+0x1c>
 800a490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a494:	3301      	adds	r3, #1
 800a496:	e7cd      	b.n	800a434 <__lshift+0x30>
 800a498:	4651      	mov	r1, sl
 800a49a:	e7dc      	b.n	800a456 <__lshift+0x52>
 800a49c:	3904      	subs	r1, #4
 800a49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a2:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4a6:	459c      	cmp	ip, r3
 800a4a8:	d8f9      	bhi.n	800a49e <__lshift+0x9a>
 800a4aa:	e7e4      	b.n	800a476 <__lshift+0x72>

0800a4ac <__mcmp>:
 800a4ac:	6903      	ldr	r3, [r0, #16]
 800a4ae:	690a      	ldr	r2, [r1, #16]
 800a4b0:	1a9b      	subs	r3, r3, r2
 800a4b2:	b530      	push	{r4, r5, lr}
 800a4b4:	d10c      	bne.n	800a4d0 <__mcmp+0x24>
 800a4b6:	0092      	lsls	r2, r2, #2
 800a4b8:	3014      	adds	r0, #20
 800a4ba:	3114      	adds	r1, #20
 800a4bc:	1884      	adds	r4, r0, r2
 800a4be:	4411      	add	r1, r2
 800a4c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a4c8:	4295      	cmp	r5, r2
 800a4ca:	d003      	beq.n	800a4d4 <__mcmp+0x28>
 800a4cc:	d305      	bcc.n	800a4da <__mcmp+0x2e>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	bd30      	pop	{r4, r5, pc}
 800a4d4:	42a0      	cmp	r0, r4
 800a4d6:	d3f3      	bcc.n	800a4c0 <__mcmp+0x14>
 800a4d8:	e7fa      	b.n	800a4d0 <__mcmp+0x24>
 800a4da:	f04f 33ff 	mov.w	r3, #4294967295
 800a4de:	e7f7      	b.n	800a4d0 <__mcmp+0x24>

0800a4e0 <__mdiff>:
 800a4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e4:	460d      	mov	r5, r1
 800a4e6:	4607      	mov	r7, r0
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	4614      	mov	r4, r2
 800a4ee:	f7ff ffdd 	bl	800a4ac <__mcmp>
 800a4f2:	1e06      	subs	r6, r0, #0
 800a4f4:	d108      	bne.n	800a508 <__mdiff+0x28>
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	f7ff fd84 	bl	800a006 <_Balloc>
 800a4fe:	2301      	movs	r3, #1
 800a500:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a508:	bfa4      	itt	ge
 800a50a:	4623      	movge	r3, r4
 800a50c:	462c      	movge	r4, r5
 800a50e:	4638      	mov	r0, r7
 800a510:	6861      	ldr	r1, [r4, #4]
 800a512:	bfa6      	itte	ge
 800a514:	461d      	movge	r5, r3
 800a516:	2600      	movge	r6, #0
 800a518:	2601      	movlt	r6, #1
 800a51a:	f7ff fd74 	bl	800a006 <_Balloc>
 800a51e:	692b      	ldr	r3, [r5, #16]
 800a520:	60c6      	str	r6, [r0, #12]
 800a522:	6926      	ldr	r6, [r4, #16]
 800a524:	f105 0914 	add.w	r9, r5, #20
 800a528:	f104 0214 	add.w	r2, r4, #20
 800a52c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a530:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a534:	f100 0514 	add.w	r5, r0, #20
 800a538:	f04f 0e00 	mov.w	lr, #0
 800a53c:	f852 ab04 	ldr.w	sl, [r2], #4
 800a540:	f859 4b04 	ldr.w	r4, [r9], #4
 800a544:	fa1e f18a 	uxtah	r1, lr, sl
 800a548:	b2a3      	uxth	r3, r4
 800a54a:	1ac9      	subs	r1, r1, r3
 800a54c:	0c23      	lsrs	r3, r4, #16
 800a54e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a552:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a556:	b289      	uxth	r1, r1
 800a558:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a55c:	45c8      	cmp	r8, r9
 800a55e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a562:	4694      	mov	ip, r2
 800a564:	f845 3b04 	str.w	r3, [r5], #4
 800a568:	d8e8      	bhi.n	800a53c <__mdiff+0x5c>
 800a56a:	45bc      	cmp	ip, r7
 800a56c:	d304      	bcc.n	800a578 <__mdiff+0x98>
 800a56e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a572:	b183      	cbz	r3, 800a596 <__mdiff+0xb6>
 800a574:	6106      	str	r6, [r0, #16]
 800a576:	e7c5      	b.n	800a504 <__mdiff+0x24>
 800a578:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a57c:	fa1e f381 	uxtah	r3, lr, r1
 800a580:	141a      	asrs	r2, r3, #16
 800a582:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a586:	b29b      	uxth	r3, r3
 800a588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a58c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a590:	f845 3b04 	str.w	r3, [r5], #4
 800a594:	e7e9      	b.n	800a56a <__mdiff+0x8a>
 800a596:	3e01      	subs	r6, #1
 800a598:	e7e9      	b.n	800a56e <__mdiff+0x8e>
	...

0800a59c <__ulp>:
 800a59c:	4b12      	ldr	r3, [pc, #72]	; (800a5e8 <__ulp+0x4c>)
 800a59e:	ee10 2a90 	vmov	r2, s1
 800a5a2:	401a      	ands	r2, r3
 800a5a4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	dd04      	ble.n	800a5b6 <__ulp+0x1a>
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	ec41 0b10 	vmov	d0, r0, r1
 800a5b4:	4770      	bx	lr
 800a5b6:	425b      	negs	r3, r3
 800a5b8:	151b      	asrs	r3, r3, #20
 800a5ba:	2b13      	cmp	r3, #19
 800a5bc:	f04f 0000 	mov.w	r0, #0
 800a5c0:	f04f 0100 	mov.w	r1, #0
 800a5c4:	dc04      	bgt.n	800a5d0 <__ulp+0x34>
 800a5c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a5ca:	fa42 f103 	asr.w	r1, r2, r3
 800a5ce:	e7ef      	b.n	800a5b0 <__ulp+0x14>
 800a5d0:	3b14      	subs	r3, #20
 800a5d2:	2b1e      	cmp	r3, #30
 800a5d4:	f04f 0201 	mov.w	r2, #1
 800a5d8:	bfda      	itte	le
 800a5da:	f1c3 031f 	rsble	r3, r3, #31
 800a5de:	fa02 f303 	lslle.w	r3, r2, r3
 800a5e2:	4613      	movgt	r3, r2
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	e7e3      	b.n	800a5b0 <__ulp+0x14>
 800a5e8:	7ff00000 	.word	0x7ff00000

0800a5ec <__b2d>:
 800a5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ee:	6905      	ldr	r5, [r0, #16]
 800a5f0:	f100 0714 	add.w	r7, r0, #20
 800a5f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a5f8:	1f2e      	subs	r6, r5, #4
 800a5fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a5fe:	4620      	mov	r0, r4
 800a600:	f7ff fdc5 	bl	800a18e <__hi0bits>
 800a604:	f1c0 0320 	rsb	r3, r0, #32
 800a608:	280a      	cmp	r0, #10
 800a60a:	600b      	str	r3, [r1, #0]
 800a60c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a684 <__b2d+0x98>
 800a610:	dc14      	bgt.n	800a63c <__b2d+0x50>
 800a612:	f1c0 0e0b 	rsb	lr, r0, #11
 800a616:	fa24 f10e 	lsr.w	r1, r4, lr
 800a61a:	42b7      	cmp	r7, r6
 800a61c:	ea41 030c 	orr.w	r3, r1, ip
 800a620:	bf34      	ite	cc
 800a622:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a626:	2100      	movcs	r1, #0
 800a628:	3015      	adds	r0, #21
 800a62a:	fa04 f000 	lsl.w	r0, r4, r0
 800a62e:	fa21 f10e 	lsr.w	r1, r1, lr
 800a632:	ea40 0201 	orr.w	r2, r0, r1
 800a636:	ec43 2b10 	vmov	d0, r2, r3
 800a63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a63c:	42b7      	cmp	r7, r6
 800a63e:	bf3a      	itte	cc
 800a640:	f1a5 0608 	subcc.w	r6, r5, #8
 800a644:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a648:	2100      	movcs	r1, #0
 800a64a:	380b      	subs	r0, #11
 800a64c:	d015      	beq.n	800a67a <__b2d+0x8e>
 800a64e:	4084      	lsls	r4, r0
 800a650:	f1c0 0520 	rsb	r5, r0, #32
 800a654:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a658:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a65c:	42be      	cmp	r6, r7
 800a65e:	fa21 fc05 	lsr.w	ip, r1, r5
 800a662:	ea44 030c 	orr.w	r3, r4, ip
 800a666:	bf8c      	ite	hi
 800a668:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a66c:	2400      	movls	r4, #0
 800a66e:	fa01 f000 	lsl.w	r0, r1, r0
 800a672:	40ec      	lsrs	r4, r5
 800a674:	ea40 0204 	orr.w	r2, r0, r4
 800a678:	e7dd      	b.n	800a636 <__b2d+0x4a>
 800a67a:	ea44 030c 	orr.w	r3, r4, ip
 800a67e:	460a      	mov	r2, r1
 800a680:	e7d9      	b.n	800a636 <__b2d+0x4a>
 800a682:	bf00      	nop
 800a684:	3ff00000 	.word	0x3ff00000

0800a688 <__d2b>:
 800a688:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a68c:	460e      	mov	r6, r1
 800a68e:	2101      	movs	r1, #1
 800a690:	ec59 8b10 	vmov	r8, r9, d0
 800a694:	4615      	mov	r5, r2
 800a696:	f7ff fcb6 	bl	800a006 <_Balloc>
 800a69a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a69e:	4607      	mov	r7, r0
 800a6a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6a4:	bb34      	cbnz	r4, 800a6f4 <__d2b+0x6c>
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	f1b8 0300 	subs.w	r3, r8, #0
 800a6ac:	d027      	beq.n	800a6fe <__d2b+0x76>
 800a6ae:	a802      	add	r0, sp, #8
 800a6b0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a6b4:	f7ff fd8a 	bl	800a1cc <__lo0bits>
 800a6b8:	9900      	ldr	r1, [sp, #0]
 800a6ba:	b1f0      	cbz	r0, 800a6fa <__d2b+0x72>
 800a6bc:	9a01      	ldr	r2, [sp, #4]
 800a6be:	f1c0 0320 	rsb	r3, r0, #32
 800a6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c6:	430b      	orrs	r3, r1
 800a6c8:	40c2      	lsrs	r2, r0
 800a6ca:	617b      	str	r3, [r7, #20]
 800a6cc:	9201      	str	r2, [sp, #4]
 800a6ce:	9b01      	ldr	r3, [sp, #4]
 800a6d0:	61bb      	str	r3, [r7, #24]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	bf14      	ite	ne
 800a6d6:	2102      	movne	r1, #2
 800a6d8:	2101      	moveq	r1, #1
 800a6da:	6139      	str	r1, [r7, #16]
 800a6dc:	b1c4      	cbz	r4, 800a710 <__d2b+0x88>
 800a6de:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a6e2:	4404      	add	r4, r0
 800a6e4:	6034      	str	r4, [r6, #0]
 800a6e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6ea:	6028      	str	r0, [r5, #0]
 800a6ec:	4638      	mov	r0, r7
 800a6ee:	b003      	add	sp, #12
 800a6f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6f8:	e7d5      	b.n	800a6a6 <__d2b+0x1e>
 800a6fa:	6179      	str	r1, [r7, #20]
 800a6fc:	e7e7      	b.n	800a6ce <__d2b+0x46>
 800a6fe:	a801      	add	r0, sp, #4
 800a700:	f7ff fd64 	bl	800a1cc <__lo0bits>
 800a704:	9b01      	ldr	r3, [sp, #4]
 800a706:	617b      	str	r3, [r7, #20]
 800a708:	2101      	movs	r1, #1
 800a70a:	6139      	str	r1, [r7, #16]
 800a70c:	3020      	adds	r0, #32
 800a70e:	e7e5      	b.n	800a6dc <__d2b+0x54>
 800a710:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a714:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a718:	6030      	str	r0, [r6, #0]
 800a71a:	6918      	ldr	r0, [r3, #16]
 800a71c:	f7ff fd37 	bl	800a18e <__hi0bits>
 800a720:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a724:	e7e1      	b.n	800a6ea <__d2b+0x62>

0800a726 <__ratio>:
 800a726:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72a:	4688      	mov	r8, r1
 800a72c:	4669      	mov	r1, sp
 800a72e:	4681      	mov	r9, r0
 800a730:	f7ff ff5c 	bl	800a5ec <__b2d>
 800a734:	a901      	add	r1, sp, #4
 800a736:	4640      	mov	r0, r8
 800a738:	ec57 6b10 	vmov	r6, r7, d0
 800a73c:	f7ff ff56 	bl	800a5ec <__b2d>
 800a740:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a744:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a748:	eba3 0c02 	sub.w	ip, r3, r2
 800a74c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a750:	1a9b      	subs	r3, r3, r2
 800a752:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a756:	ec5b ab10 	vmov	sl, fp, d0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	bfce      	itee	gt
 800a75e:	463a      	movgt	r2, r7
 800a760:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a764:	465a      	movle	r2, fp
 800a766:	4659      	mov	r1, fp
 800a768:	463d      	mov	r5, r7
 800a76a:	bfd4      	ite	le
 800a76c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a770:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a774:	4630      	mov	r0, r6
 800a776:	ee10 2a10 	vmov	r2, s0
 800a77a:	460b      	mov	r3, r1
 800a77c:	4629      	mov	r1, r5
 800a77e:	f7f6 f88d 	bl	800089c <__aeabi_ddiv>
 800a782:	ec41 0b10 	vmov	d0, r0, r1
 800a786:	b003      	add	sp, #12
 800a788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a78c <__copybits>:
 800a78c:	3901      	subs	r1, #1
 800a78e:	b510      	push	{r4, lr}
 800a790:	1149      	asrs	r1, r1, #5
 800a792:	6914      	ldr	r4, [r2, #16]
 800a794:	3101      	adds	r1, #1
 800a796:	f102 0314 	add.w	r3, r2, #20
 800a79a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a79e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a7a2:	42a3      	cmp	r3, r4
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	d303      	bcc.n	800a7b0 <__copybits+0x24>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	428a      	cmp	r2, r1
 800a7ac:	d305      	bcc.n	800a7ba <__copybits+0x2e>
 800a7ae:	bd10      	pop	{r4, pc}
 800a7b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b4:	f840 2b04 	str.w	r2, [r0], #4
 800a7b8:	e7f3      	b.n	800a7a2 <__copybits+0x16>
 800a7ba:	f842 3b04 	str.w	r3, [r2], #4
 800a7be:	e7f4      	b.n	800a7aa <__copybits+0x1e>

0800a7c0 <__any_on>:
 800a7c0:	f100 0214 	add.w	r2, r0, #20
 800a7c4:	6900      	ldr	r0, [r0, #16]
 800a7c6:	114b      	asrs	r3, r1, #5
 800a7c8:	4298      	cmp	r0, r3
 800a7ca:	b510      	push	{r4, lr}
 800a7cc:	db11      	blt.n	800a7f2 <__any_on+0x32>
 800a7ce:	dd0a      	ble.n	800a7e6 <__any_on+0x26>
 800a7d0:	f011 011f 	ands.w	r1, r1, #31
 800a7d4:	d007      	beq.n	800a7e6 <__any_on+0x26>
 800a7d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7da:	fa24 f001 	lsr.w	r0, r4, r1
 800a7de:	fa00 f101 	lsl.w	r1, r0, r1
 800a7e2:	428c      	cmp	r4, r1
 800a7e4:	d10b      	bne.n	800a7fe <__any_on+0x3e>
 800a7e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d803      	bhi.n	800a7f6 <__any_on+0x36>
 800a7ee:	2000      	movs	r0, #0
 800a7f0:	bd10      	pop	{r4, pc}
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	e7f7      	b.n	800a7e6 <__any_on+0x26>
 800a7f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7fa:	2900      	cmp	r1, #0
 800a7fc:	d0f5      	beq.n	800a7ea <__any_on+0x2a>
 800a7fe:	2001      	movs	r0, #1
 800a800:	e7f6      	b.n	800a7f0 <__any_on+0x30>

0800a802 <_calloc_r>:
 800a802:	b538      	push	{r3, r4, r5, lr}
 800a804:	fb02 f401 	mul.w	r4, r2, r1
 800a808:	4621      	mov	r1, r4
 800a80a:	f000 f857 	bl	800a8bc <_malloc_r>
 800a80e:	4605      	mov	r5, r0
 800a810:	b118      	cbz	r0, 800a81a <_calloc_r+0x18>
 800a812:	4622      	mov	r2, r4
 800a814:	2100      	movs	r1, #0
 800a816:	f7fc fd35 	bl	8007284 <memset>
 800a81a:	4628      	mov	r0, r5
 800a81c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a820 <_free_r>:
 800a820:	b538      	push	{r3, r4, r5, lr}
 800a822:	4605      	mov	r5, r0
 800a824:	2900      	cmp	r1, #0
 800a826:	d045      	beq.n	800a8b4 <_free_r+0x94>
 800a828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a82c:	1f0c      	subs	r4, r1, #4
 800a82e:	2b00      	cmp	r3, #0
 800a830:	bfb8      	it	lt
 800a832:	18e4      	addlt	r4, r4, r3
 800a834:	f000 fa36 	bl	800aca4 <__malloc_lock>
 800a838:	4a1f      	ldr	r2, [pc, #124]	; (800a8b8 <_free_r+0x98>)
 800a83a:	6813      	ldr	r3, [r2, #0]
 800a83c:	4610      	mov	r0, r2
 800a83e:	b933      	cbnz	r3, 800a84e <_free_r+0x2e>
 800a840:	6063      	str	r3, [r4, #4]
 800a842:	6014      	str	r4, [r2, #0]
 800a844:	4628      	mov	r0, r5
 800a846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a84a:	f000 ba2c 	b.w	800aca6 <__malloc_unlock>
 800a84e:	42a3      	cmp	r3, r4
 800a850:	d90c      	bls.n	800a86c <_free_r+0x4c>
 800a852:	6821      	ldr	r1, [r4, #0]
 800a854:	1862      	adds	r2, r4, r1
 800a856:	4293      	cmp	r3, r2
 800a858:	bf04      	itt	eq
 800a85a:	681a      	ldreq	r2, [r3, #0]
 800a85c:	685b      	ldreq	r3, [r3, #4]
 800a85e:	6063      	str	r3, [r4, #4]
 800a860:	bf04      	itt	eq
 800a862:	1852      	addeq	r2, r2, r1
 800a864:	6022      	streq	r2, [r4, #0]
 800a866:	6004      	str	r4, [r0, #0]
 800a868:	e7ec      	b.n	800a844 <_free_r+0x24>
 800a86a:	4613      	mov	r3, r2
 800a86c:	685a      	ldr	r2, [r3, #4]
 800a86e:	b10a      	cbz	r2, 800a874 <_free_r+0x54>
 800a870:	42a2      	cmp	r2, r4
 800a872:	d9fa      	bls.n	800a86a <_free_r+0x4a>
 800a874:	6819      	ldr	r1, [r3, #0]
 800a876:	1858      	adds	r0, r3, r1
 800a878:	42a0      	cmp	r0, r4
 800a87a:	d10b      	bne.n	800a894 <_free_r+0x74>
 800a87c:	6820      	ldr	r0, [r4, #0]
 800a87e:	4401      	add	r1, r0
 800a880:	1858      	adds	r0, r3, r1
 800a882:	4282      	cmp	r2, r0
 800a884:	6019      	str	r1, [r3, #0]
 800a886:	d1dd      	bne.n	800a844 <_free_r+0x24>
 800a888:	6810      	ldr	r0, [r2, #0]
 800a88a:	6852      	ldr	r2, [r2, #4]
 800a88c:	605a      	str	r2, [r3, #4]
 800a88e:	4401      	add	r1, r0
 800a890:	6019      	str	r1, [r3, #0]
 800a892:	e7d7      	b.n	800a844 <_free_r+0x24>
 800a894:	d902      	bls.n	800a89c <_free_r+0x7c>
 800a896:	230c      	movs	r3, #12
 800a898:	602b      	str	r3, [r5, #0]
 800a89a:	e7d3      	b.n	800a844 <_free_r+0x24>
 800a89c:	6820      	ldr	r0, [r4, #0]
 800a89e:	1821      	adds	r1, r4, r0
 800a8a0:	428a      	cmp	r2, r1
 800a8a2:	bf04      	itt	eq
 800a8a4:	6811      	ldreq	r1, [r2, #0]
 800a8a6:	6852      	ldreq	r2, [r2, #4]
 800a8a8:	6062      	str	r2, [r4, #4]
 800a8aa:	bf04      	itt	eq
 800a8ac:	1809      	addeq	r1, r1, r0
 800a8ae:	6021      	streq	r1, [r4, #0]
 800a8b0:	605c      	str	r4, [r3, #4]
 800a8b2:	e7c7      	b.n	800a844 <_free_r+0x24>
 800a8b4:	bd38      	pop	{r3, r4, r5, pc}
 800a8b6:	bf00      	nop
 800a8b8:	2000025c 	.word	0x2000025c

0800a8bc <_malloc_r>:
 800a8bc:	b570      	push	{r4, r5, r6, lr}
 800a8be:	1ccd      	adds	r5, r1, #3
 800a8c0:	f025 0503 	bic.w	r5, r5, #3
 800a8c4:	3508      	adds	r5, #8
 800a8c6:	2d0c      	cmp	r5, #12
 800a8c8:	bf38      	it	cc
 800a8ca:	250c      	movcc	r5, #12
 800a8cc:	2d00      	cmp	r5, #0
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	db01      	blt.n	800a8d6 <_malloc_r+0x1a>
 800a8d2:	42a9      	cmp	r1, r5
 800a8d4:	d903      	bls.n	800a8de <_malloc_r+0x22>
 800a8d6:	230c      	movs	r3, #12
 800a8d8:	6033      	str	r3, [r6, #0]
 800a8da:	2000      	movs	r0, #0
 800a8dc:	bd70      	pop	{r4, r5, r6, pc}
 800a8de:	f000 f9e1 	bl	800aca4 <__malloc_lock>
 800a8e2:	4a21      	ldr	r2, [pc, #132]	; (800a968 <_malloc_r+0xac>)
 800a8e4:	6814      	ldr	r4, [r2, #0]
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	b991      	cbnz	r1, 800a910 <_malloc_r+0x54>
 800a8ea:	4c20      	ldr	r4, [pc, #128]	; (800a96c <_malloc_r+0xb0>)
 800a8ec:	6823      	ldr	r3, [r4, #0]
 800a8ee:	b91b      	cbnz	r3, 800a8f8 <_malloc_r+0x3c>
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	f000 f98f 	bl	800ac14 <_sbrk_r>
 800a8f6:	6020      	str	r0, [r4, #0]
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f000 f98a 	bl	800ac14 <_sbrk_r>
 800a900:	1c43      	adds	r3, r0, #1
 800a902:	d124      	bne.n	800a94e <_malloc_r+0x92>
 800a904:	230c      	movs	r3, #12
 800a906:	6033      	str	r3, [r6, #0]
 800a908:	4630      	mov	r0, r6
 800a90a:	f000 f9cc 	bl	800aca6 <__malloc_unlock>
 800a90e:	e7e4      	b.n	800a8da <_malloc_r+0x1e>
 800a910:	680b      	ldr	r3, [r1, #0]
 800a912:	1b5b      	subs	r3, r3, r5
 800a914:	d418      	bmi.n	800a948 <_malloc_r+0x8c>
 800a916:	2b0b      	cmp	r3, #11
 800a918:	d90f      	bls.n	800a93a <_malloc_r+0x7e>
 800a91a:	600b      	str	r3, [r1, #0]
 800a91c:	50cd      	str	r5, [r1, r3]
 800a91e:	18cc      	adds	r4, r1, r3
 800a920:	4630      	mov	r0, r6
 800a922:	f000 f9c0 	bl	800aca6 <__malloc_unlock>
 800a926:	f104 000b 	add.w	r0, r4, #11
 800a92a:	1d23      	adds	r3, r4, #4
 800a92c:	f020 0007 	bic.w	r0, r0, #7
 800a930:	1ac3      	subs	r3, r0, r3
 800a932:	d0d3      	beq.n	800a8dc <_malloc_r+0x20>
 800a934:	425a      	negs	r2, r3
 800a936:	50e2      	str	r2, [r4, r3]
 800a938:	e7d0      	b.n	800a8dc <_malloc_r+0x20>
 800a93a:	428c      	cmp	r4, r1
 800a93c:	684b      	ldr	r3, [r1, #4]
 800a93e:	bf16      	itet	ne
 800a940:	6063      	strne	r3, [r4, #4]
 800a942:	6013      	streq	r3, [r2, #0]
 800a944:	460c      	movne	r4, r1
 800a946:	e7eb      	b.n	800a920 <_malloc_r+0x64>
 800a948:	460c      	mov	r4, r1
 800a94a:	6849      	ldr	r1, [r1, #4]
 800a94c:	e7cc      	b.n	800a8e8 <_malloc_r+0x2c>
 800a94e:	1cc4      	adds	r4, r0, #3
 800a950:	f024 0403 	bic.w	r4, r4, #3
 800a954:	42a0      	cmp	r0, r4
 800a956:	d005      	beq.n	800a964 <_malloc_r+0xa8>
 800a958:	1a21      	subs	r1, r4, r0
 800a95a:	4630      	mov	r0, r6
 800a95c:	f000 f95a 	bl	800ac14 <_sbrk_r>
 800a960:	3001      	adds	r0, #1
 800a962:	d0cf      	beq.n	800a904 <_malloc_r+0x48>
 800a964:	6025      	str	r5, [r4, #0]
 800a966:	e7db      	b.n	800a920 <_malloc_r+0x64>
 800a968:	2000025c 	.word	0x2000025c
 800a96c:	20000260 	.word	0x20000260

0800a970 <__ssputs_r>:
 800a970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a974:	688e      	ldr	r6, [r1, #8]
 800a976:	429e      	cmp	r6, r3
 800a978:	4682      	mov	sl, r0
 800a97a:	460c      	mov	r4, r1
 800a97c:	4690      	mov	r8, r2
 800a97e:	4699      	mov	r9, r3
 800a980:	d837      	bhi.n	800a9f2 <__ssputs_r+0x82>
 800a982:	898a      	ldrh	r2, [r1, #12]
 800a984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a988:	d031      	beq.n	800a9ee <__ssputs_r+0x7e>
 800a98a:	6825      	ldr	r5, [r4, #0]
 800a98c:	6909      	ldr	r1, [r1, #16]
 800a98e:	1a6f      	subs	r7, r5, r1
 800a990:	6965      	ldr	r5, [r4, #20]
 800a992:	2302      	movs	r3, #2
 800a994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a998:	fb95 f5f3 	sdiv	r5, r5, r3
 800a99c:	f109 0301 	add.w	r3, r9, #1
 800a9a0:	443b      	add	r3, r7
 800a9a2:	429d      	cmp	r5, r3
 800a9a4:	bf38      	it	cc
 800a9a6:	461d      	movcc	r5, r3
 800a9a8:	0553      	lsls	r3, r2, #21
 800a9aa:	d530      	bpl.n	800aa0e <__ssputs_r+0x9e>
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	f7ff ff85 	bl	800a8bc <_malloc_r>
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	b950      	cbnz	r0, 800a9cc <__ssputs_r+0x5c>
 800a9b6:	230c      	movs	r3, #12
 800a9b8:	f8ca 3000 	str.w	r3, [sl]
 800a9bc:	89a3      	ldrh	r3, [r4, #12]
 800a9be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9cc:	463a      	mov	r2, r7
 800a9ce:	6921      	ldr	r1, [r4, #16]
 800a9d0:	f7ff fb0e 	bl	8009ff0 <memcpy>
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9de:	81a3      	strh	r3, [r4, #12]
 800a9e0:	6126      	str	r6, [r4, #16]
 800a9e2:	6165      	str	r5, [r4, #20]
 800a9e4:	443e      	add	r6, r7
 800a9e6:	1bed      	subs	r5, r5, r7
 800a9e8:	6026      	str	r6, [r4, #0]
 800a9ea:	60a5      	str	r5, [r4, #8]
 800a9ec:	464e      	mov	r6, r9
 800a9ee:	454e      	cmp	r6, r9
 800a9f0:	d900      	bls.n	800a9f4 <__ssputs_r+0x84>
 800a9f2:	464e      	mov	r6, r9
 800a9f4:	4632      	mov	r2, r6
 800a9f6:	4641      	mov	r1, r8
 800a9f8:	6820      	ldr	r0, [r4, #0]
 800a9fa:	f000 f93a 	bl	800ac72 <memmove>
 800a9fe:	68a3      	ldr	r3, [r4, #8]
 800aa00:	1b9b      	subs	r3, r3, r6
 800aa02:	60a3      	str	r3, [r4, #8]
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	441e      	add	r6, r3
 800aa08:	6026      	str	r6, [r4, #0]
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	e7dc      	b.n	800a9c8 <__ssputs_r+0x58>
 800aa0e:	462a      	mov	r2, r5
 800aa10:	f000 f94a 	bl	800aca8 <_realloc_r>
 800aa14:	4606      	mov	r6, r0
 800aa16:	2800      	cmp	r0, #0
 800aa18:	d1e2      	bne.n	800a9e0 <__ssputs_r+0x70>
 800aa1a:	6921      	ldr	r1, [r4, #16]
 800aa1c:	4650      	mov	r0, sl
 800aa1e:	f7ff feff 	bl	800a820 <_free_r>
 800aa22:	e7c8      	b.n	800a9b6 <__ssputs_r+0x46>

0800aa24 <_svfiprintf_r>:
 800aa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa28:	461d      	mov	r5, r3
 800aa2a:	898b      	ldrh	r3, [r1, #12]
 800aa2c:	061f      	lsls	r7, r3, #24
 800aa2e:	b09d      	sub	sp, #116	; 0x74
 800aa30:	4680      	mov	r8, r0
 800aa32:	460c      	mov	r4, r1
 800aa34:	4616      	mov	r6, r2
 800aa36:	d50f      	bpl.n	800aa58 <_svfiprintf_r+0x34>
 800aa38:	690b      	ldr	r3, [r1, #16]
 800aa3a:	b96b      	cbnz	r3, 800aa58 <_svfiprintf_r+0x34>
 800aa3c:	2140      	movs	r1, #64	; 0x40
 800aa3e:	f7ff ff3d 	bl	800a8bc <_malloc_r>
 800aa42:	6020      	str	r0, [r4, #0]
 800aa44:	6120      	str	r0, [r4, #16]
 800aa46:	b928      	cbnz	r0, 800aa54 <_svfiprintf_r+0x30>
 800aa48:	230c      	movs	r3, #12
 800aa4a:	f8c8 3000 	str.w	r3, [r8]
 800aa4e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa52:	e0c8      	b.n	800abe6 <_svfiprintf_r+0x1c2>
 800aa54:	2340      	movs	r3, #64	; 0x40
 800aa56:	6163      	str	r3, [r4, #20]
 800aa58:	2300      	movs	r3, #0
 800aa5a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa5c:	2320      	movs	r3, #32
 800aa5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa62:	2330      	movs	r3, #48	; 0x30
 800aa64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa68:	9503      	str	r5, [sp, #12]
 800aa6a:	f04f 0b01 	mov.w	fp, #1
 800aa6e:	4637      	mov	r7, r6
 800aa70:	463d      	mov	r5, r7
 800aa72:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aa76:	b10b      	cbz	r3, 800aa7c <_svfiprintf_r+0x58>
 800aa78:	2b25      	cmp	r3, #37	; 0x25
 800aa7a:	d13e      	bne.n	800aafa <_svfiprintf_r+0xd6>
 800aa7c:	ebb7 0a06 	subs.w	sl, r7, r6
 800aa80:	d00b      	beq.n	800aa9a <_svfiprintf_r+0x76>
 800aa82:	4653      	mov	r3, sl
 800aa84:	4632      	mov	r2, r6
 800aa86:	4621      	mov	r1, r4
 800aa88:	4640      	mov	r0, r8
 800aa8a:	f7ff ff71 	bl	800a970 <__ssputs_r>
 800aa8e:	3001      	adds	r0, #1
 800aa90:	f000 80a4 	beq.w	800abdc <_svfiprintf_r+0x1b8>
 800aa94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa96:	4453      	add	r3, sl
 800aa98:	9309      	str	r3, [sp, #36]	; 0x24
 800aa9a:	783b      	ldrb	r3, [r7, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f000 809d 	beq.w	800abdc <_svfiprintf_r+0x1b8>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaac:	9304      	str	r3, [sp, #16]
 800aaae:	9307      	str	r3, [sp, #28]
 800aab0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aab4:	931a      	str	r3, [sp, #104]	; 0x68
 800aab6:	462f      	mov	r7, r5
 800aab8:	2205      	movs	r2, #5
 800aaba:	f817 1b01 	ldrb.w	r1, [r7], #1
 800aabe:	4850      	ldr	r0, [pc, #320]	; (800ac00 <_svfiprintf_r+0x1dc>)
 800aac0:	f7f5 fbb6 	bl	8000230 <memchr>
 800aac4:	9b04      	ldr	r3, [sp, #16]
 800aac6:	b9d0      	cbnz	r0, 800aafe <_svfiprintf_r+0xda>
 800aac8:	06d9      	lsls	r1, r3, #27
 800aaca:	bf44      	itt	mi
 800aacc:	2220      	movmi	r2, #32
 800aace:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aad2:	071a      	lsls	r2, r3, #28
 800aad4:	bf44      	itt	mi
 800aad6:	222b      	movmi	r2, #43	; 0x2b
 800aad8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aadc:	782a      	ldrb	r2, [r5, #0]
 800aade:	2a2a      	cmp	r2, #42	; 0x2a
 800aae0:	d015      	beq.n	800ab0e <_svfiprintf_r+0xea>
 800aae2:	9a07      	ldr	r2, [sp, #28]
 800aae4:	462f      	mov	r7, r5
 800aae6:	2000      	movs	r0, #0
 800aae8:	250a      	movs	r5, #10
 800aaea:	4639      	mov	r1, r7
 800aaec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aaf0:	3b30      	subs	r3, #48	; 0x30
 800aaf2:	2b09      	cmp	r3, #9
 800aaf4:	d94d      	bls.n	800ab92 <_svfiprintf_r+0x16e>
 800aaf6:	b1b8      	cbz	r0, 800ab28 <_svfiprintf_r+0x104>
 800aaf8:	e00f      	b.n	800ab1a <_svfiprintf_r+0xf6>
 800aafa:	462f      	mov	r7, r5
 800aafc:	e7b8      	b.n	800aa70 <_svfiprintf_r+0x4c>
 800aafe:	4a40      	ldr	r2, [pc, #256]	; (800ac00 <_svfiprintf_r+0x1dc>)
 800ab00:	1a80      	subs	r0, r0, r2
 800ab02:	fa0b f000 	lsl.w	r0, fp, r0
 800ab06:	4318      	orrs	r0, r3
 800ab08:	9004      	str	r0, [sp, #16]
 800ab0a:	463d      	mov	r5, r7
 800ab0c:	e7d3      	b.n	800aab6 <_svfiprintf_r+0x92>
 800ab0e:	9a03      	ldr	r2, [sp, #12]
 800ab10:	1d11      	adds	r1, r2, #4
 800ab12:	6812      	ldr	r2, [r2, #0]
 800ab14:	9103      	str	r1, [sp, #12]
 800ab16:	2a00      	cmp	r2, #0
 800ab18:	db01      	blt.n	800ab1e <_svfiprintf_r+0xfa>
 800ab1a:	9207      	str	r2, [sp, #28]
 800ab1c:	e004      	b.n	800ab28 <_svfiprintf_r+0x104>
 800ab1e:	4252      	negs	r2, r2
 800ab20:	f043 0302 	orr.w	r3, r3, #2
 800ab24:	9207      	str	r2, [sp, #28]
 800ab26:	9304      	str	r3, [sp, #16]
 800ab28:	783b      	ldrb	r3, [r7, #0]
 800ab2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ab2c:	d10c      	bne.n	800ab48 <_svfiprintf_r+0x124>
 800ab2e:	787b      	ldrb	r3, [r7, #1]
 800ab30:	2b2a      	cmp	r3, #42	; 0x2a
 800ab32:	d133      	bne.n	800ab9c <_svfiprintf_r+0x178>
 800ab34:	9b03      	ldr	r3, [sp, #12]
 800ab36:	1d1a      	adds	r2, r3, #4
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	9203      	str	r2, [sp, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	bfb8      	it	lt
 800ab40:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab44:	3702      	adds	r7, #2
 800ab46:	9305      	str	r3, [sp, #20]
 800ab48:	4d2e      	ldr	r5, [pc, #184]	; (800ac04 <_svfiprintf_r+0x1e0>)
 800ab4a:	7839      	ldrb	r1, [r7, #0]
 800ab4c:	2203      	movs	r2, #3
 800ab4e:	4628      	mov	r0, r5
 800ab50:	f7f5 fb6e 	bl	8000230 <memchr>
 800ab54:	b138      	cbz	r0, 800ab66 <_svfiprintf_r+0x142>
 800ab56:	2340      	movs	r3, #64	; 0x40
 800ab58:	1b40      	subs	r0, r0, r5
 800ab5a:	fa03 f000 	lsl.w	r0, r3, r0
 800ab5e:	9b04      	ldr	r3, [sp, #16]
 800ab60:	4303      	orrs	r3, r0
 800ab62:	3701      	adds	r7, #1
 800ab64:	9304      	str	r3, [sp, #16]
 800ab66:	7839      	ldrb	r1, [r7, #0]
 800ab68:	4827      	ldr	r0, [pc, #156]	; (800ac08 <_svfiprintf_r+0x1e4>)
 800ab6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab6e:	2206      	movs	r2, #6
 800ab70:	1c7e      	adds	r6, r7, #1
 800ab72:	f7f5 fb5d 	bl	8000230 <memchr>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d038      	beq.n	800abec <_svfiprintf_r+0x1c8>
 800ab7a:	4b24      	ldr	r3, [pc, #144]	; (800ac0c <_svfiprintf_r+0x1e8>)
 800ab7c:	bb13      	cbnz	r3, 800abc4 <_svfiprintf_r+0x1a0>
 800ab7e:	9b03      	ldr	r3, [sp, #12]
 800ab80:	3307      	adds	r3, #7
 800ab82:	f023 0307 	bic.w	r3, r3, #7
 800ab86:	3308      	adds	r3, #8
 800ab88:	9303      	str	r3, [sp, #12]
 800ab8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab8c:	444b      	add	r3, r9
 800ab8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab90:	e76d      	b.n	800aa6e <_svfiprintf_r+0x4a>
 800ab92:	fb05 3202 	mla	r2, r5, r2, r3
 800ab96:	2001      	movs	r0, #1
 800ab98:	460f      	mov	r7, r1
 800ab9a:	e7a6      	b.n	800aaea <_svfiprintf_r+0xc6>
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	3701      	adds	r7, #1
 800aba0:	9305      	str	r3, [sp, #20]
 800aba2:	4619      	mov	r1, r3
 800aba4:	250a      	movs	r5, #10
 800aba6:	4638      	mov	r0, r7
 800aba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abac:	3a30      	subs	r2, #48	; 0x30
 800abae:	2a09      	cmp	r2, #9
 800abb0:	d903      	bls.n	800abba <_svfiprintf_r+0x196>
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d0c8      	beq.n	800ab48 <_svfiprintf_r+0x124>
 800abb6:	9105      	str	r1, [sp, #20]
 800abb8:	e7c6      	b.n	800ab48 <_svfiprintf_r+0x124>
 800abba:	fb05 2101 	mla	r1, r5, r1, r2
 800abbe:	2301      	movs	r3, #1
 800abc0:	4607      	mov	r7, r0
 800abc2:	e7f0      	b.n	800aba6 <_svfiprintf_r+0x182>
 800abc4:	ab03      	add	r3, sp, #12
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	4622      	mov	r2, r4
 800abca:	4b11      	ldr	r3, [pc, #68]	; (800ac10 <_svfiprintf_r+0x1ec>)
 800abcc:	a904      	add	r1, sp, #16
 800abce:	4640      	mov	r0, r8
 800abd0:	f7fc fbf4 	bl	80073bc <_printf_float>
 800abd4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800abd8:	4681      	mov	r9, r0
 800abda:	d1d6      	bne.n	800ab8a <_svfiprintf_r+0x166>
 800abdc:	89a3      	ldrh	r3, [r4, #12]
 800abde:	065b      	lsls	r3, r3, #25
 800abe0:	f53f af35 	bmi.w	800aa4e <_svfiprintf_r+0x2a>
 800abe4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abe6:	b01d      	add	sp, #116	; 0x74
 800abe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abec:	ab03      	add	r3, sp, #12
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	4622      	mov	r2, r4
 800abf2:	4b07      	ldr	r3, [pc, #28]	; (800ac10 <_svfiprintf_r+0x1ec>)
 800abf4:	a904      	add	r1, sp, #16
 800abf6:	4640      	mov	r0, r8
 800abf8:	f7fc fe96 	bl	8007928 <_printf_i>
 800abfc:	e7ea      	b.n	800abd4 <_svfiprintf_r+0x1b0>
 800abfe:	bf00      	nop
 800ac00:	0800aefc 	.word	0x0800aefc
 800ac04:	0800af02 	.word	0x0800af02
 800ac08:	0800af06 	.word	0x0800af06
 800ac0c:	080073bd 	.word	0x080073bd
 800ac10:	0800a971 	.word	0x0800a971

0800ac14 <_sbrk_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	4c06      	ldr	r4, [pc, #24]	; (800ac30 <_sbrk_r+0x1c>)
 800ac18:	2300      	movs	r3, #0
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	4608      	mov	r0, r1
 800ac1e:	6023      	str	r3, [r4, #0]
 800ac20:	f7f6 fef8 	bl	8001a14 <_sbrk>
 800ac24:	1c43      	adds	r3, r0, #1
 800ac26:	d102      	bne.n	800ac2e <_sbrk_r+0x1a>
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	b103      	cbz	r3, 800ac2e <_sbrk_r+0x1a>
 800ac2c:	602b      	str	r3, [r5, #0]
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}
 800ac30:	20000400 	.word	0x20000400

0800ac34 <strncmp>:
 800ac34:	b510      	push	{r4, lr}
 800ac36:	b16a      	cbz	r2, 800ac54 <strncmp+0x20>
 800ac38:	3901      	subs	r1, #1
 800ac3a:	1884      	adds	r4, r0, r2
 800ac3c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ac40:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d103      	bne.n	800ac50 <strncmp+0x1c>
 800ac48:	42a0      	cmp	r0, r4
 800ac4a:	d001      	beq.n	800ac50 <strncmp+0x1c>
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1f5      	bne.n	800ac3c <strncmp+0x8>
 800ac50:	1a98      	subs	r0, r3, r2
 800ac52:	bd10      	pop	{r4, pc}
 800ac54:	4610      	mov	r0, r2
 800ac56:	e7fc      	b.n	800ac52 <strncmp+0x1e>

0800ac58 <__ascii_wctomb>:
 800ac58:	b149      	cbz	r1, 800ac6e <__ascii_wctomb+0x16>
 800ac5a:	2aff      	cmp	r2, #255	; 0xff
 800ac5c:	bf85      	ittet	hi
 800ac5e:	238a      	movhi	r3, #138	; 0x8a
 800ac60:	6003      	strhi	r3, [r0, #0]
 800ac62:	700a      	strbls	r2, [r1, #0]
 800ac64:	f04f 30ff 	movhi.w	r0, #4294967295
 800ac68:	bf98      	it	ls
 800ac6a:	2001      	movls	r0, #1
 800ac6c:	4770      	bx	lr
 800ac6e:	4608      	mov	r0, r1
 800ac70:	4770      	bx	lr

0800ac72 <memmove>:
 800ac72:	4288      	cmp	r0, r1
 800ac74:	b510      	push	{r4, lr}
 800ac76:	eb01 0302 	add.w	r3, r1, r2
 800ac7a:	d807      	bhi.n	800ac8c <memmove+0x1a>
 800ac7c:	1e42      	subs	r2, r0, #1
 800ac7e:	4299      	cmp	r1, r3
 800ac80:	d00a      	beq.n	800ac98 <memmove+0x26>
 800ac82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac86:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ac8a:	e7f8      	b.n	800ac7e <memmove+0xc>
 800ac8c:	4283      	cmp	r3, r0
 800ac8e:	d9f5      	bls.n	800ac7c <memmove+0xa>
 800ac90:	1881      	adds	r1, r0, r2
 800ac92:	1ad2      	subs	r2, r2, r3
 800ac94:	42d3      	cmn	r3, r2
 800ac96:	d100      	bne.n	800ac9a <memmove+0x28>
 800ac98:	bd10      	pop	{r4, pc}
 800ac9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800aca2:	e7f7      	b.n	800ac94 <memmove+0x22>

0800aca4 <__malloc_lock>:
 800aca4:	4770      	bx	lr

0800aca6 <__malloc_unlock>:
 800aca6:	4770      	bx	lr

0800aca8 <_realloc_r>:
 800aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acaa:	4607      	mov	r7, r0
 800acac:	4614      	mov	r4, r2
 800acae:	460e      	mov	r6, r1
 800acb0:	b921      	cbnz	r1, 800acbc <_realloc_r+0x14>
 800acb2:	4611      	mov	r1, r2
 800acb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800acb8:	f7ff be00 	b.w	800a8bc <_malloc_r>
 800acbc:	b922      	cbnz	r2, 800acc8 <_realloc_r+0x20>
 800acbe:	f7ff fdaf 	bl	800a820 <_free_r>
 800acc2:	4625      	mov	r5, r4
 800acc4:	4628      	mov	r0, r5
 800acc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acc8:	f000 f814 	bl	800acf4 <_malloc_usable_size_r>
 800accc:	42a0      	cmp	r0, r4
 800acce:	d20f      	bcs.n	800acf0 <_realloc_r+0x48>
 800acd0:	4621      	mov	r1, r4
 800acd2:	4638      	mov	r0, r7
 800acd4:	f7ff fdf2 	bl	800a8bc <_malloc_r>
 800acd8:	4605      	mov	r5, r0
 800acda:	2800      	cmp	r0, #0
 800acdc:	d0f2      	beq.n	800acc4 <_realloc_r+0x1c>
 800acde:	4631      	mov	r1, r6
 800ace0:	4622      	mov	r2, r4
 800ace2:	f7ff f985 	bl	8009ff0 <memcpy>
 800ace6:	4631      	mov	r1, r6
 800ace8:	4638      	mov	r0, r7
 800acea:	f7ff fd99 	bl	800a820 <_free_r>
 800acee:	e7e9      	b.n	800acc4 <_realloc_r+0x1c>
 800acf0:	4635      	mov	r5, r6
 800acf2:	e7e7      	b.n	800acc4 <_realloc_r+0x1c>

0800acf4 <_malloc_usable_size_r>:
 800acf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acf8:	1f18      	subs	r0, r3, #4
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	bfbc      	itt	lt
 800acfe:	580b      	ldrlt	r3, [r1, r0]
 800ad00:	18c0      	addlt	r0, r0, r3
 800ad02:	4770      	bx	lr

0800ad04 <_init>:
 800ad04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad06:	bf00      	nop
 800ad08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0a:	bc08      	pop	{r3}
 800ad0c:	469e      	mov	lr, r3
 800ad0e:	4770      	bx	lr

0800ad10 <_fini>:
 800ad10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad12:	bf00      	nop
 800ad14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad16:	bc08      	pop	{r3}
 800ad18:	469e      	mov	lr, r3
 800ad1a:	4770      	bx	lr
